/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package ventana;

import conexion.Conexion;
import dao.TablasDao;
import dao.saepDao;
import graficas.Graficas;
import java.awt.Color;
import java.awt.Dialog;
import java.awt.Dimension;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import static java.lang.Boolean.FALSE;
import java.sql.SQLException;
import java.text.NumberFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.JTree;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
 
import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFRichTextString;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.labels.StandardXYItemLabelGenerator;
import org.jfree.chart.labels.XYItemLabelGenerator;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;
import org.jfree.data.general.DefaultPieDataset;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
/**
 *
 * @author acondaqua
 */
public class FramePrincipal extends javax.swing.JFrame {
    
    // ..........................................................
    
    public String clientes[][]                 = new String[500][5];  
    public String listaPuntosSum[][]           = new String[1000][25];  
    public String listaContratosPuntos[][]     = new String[1000][15]; 
    public String listaContratosPuntosAct[][]  = new String[1000][15];
    public String listaCondicionesActuales[][] = new String[1000][15];     
    public String lCondicionesSimulacion[][]   = new String[1000][30]; 
    public String lCondicionesActuales[][]     = new String[1000][30]; 
    
    public String lAhorrosHistorico[][]         = new String[5000][20];
    
    public String listaDatosBase[][]           = new String[500][2];  
    public String listaDatosActual[][]         = new String[500][2];  
    
    public int lhistoricoCalculos[][]           = new int[5000][7];
    
    public static String sMensajes             = "" ;
    // .......................................................... 
    public FramePrincipal miVentanaPrincipal;    
    // ..........................................................
    
    public int nClientes=0;
    public int nPuntos=0;
    public int nPuntosCalAhorro=0;
    public int nPuntosCalAhorroDetalle=0;
    public int nPuntosAlertaFinServicio=0;
    
    // ..........................................................
    
    public int indGen = 0 ;
    public int tipo_Act, tipo_Sim ;
    public int id_punto_actual;
    public int id_cliente_actual=0;
    public double ahorro_total_actual;
    public double pAhorro=0;
    public int nCalculosPunto ;
    public int id_tipo_Actual, id_tipo_Actual_Anterior;
    public int id_tipo_Sim, id_tipo_Sim_Anterior;
    public int indiceCalculo=0 ;
    
    
    private JDialog ventanaSecundaria;
    
    public String lTiposTarifas[] = {"","Tarifa 2.0A","Tarifa 2.0DH","Tarifa 2.1A","Tarifa 2.1DH","Tarifa 3.0A","Tarifa 3.1A","Tarifa 6.1A","Tarifa 2.0DH INDX","Tarifa 2.1DH INDX","Tarifa 3.0A INDX","Tarifa 2.0 INDX","Tarifa 2.1 INDX","Tarifa 3.1 INDX","TARIFA 6.1 A INDX"} ;
        
    // ..........................................................
    
    public int ftipoMedida=0;
    public int fCT=0;
    public int id_cliente_general=0 ;
    
    // ..........................................................
    
    public int filtrobusca= 0;
    public String FechaUltimoCalculo="06-02-2015";
    public int duracionServicioDias = 365 ;
    // ..........................................................
    
    public int fReglaPotenciaActual     = 1 ;
    public int fReglaPotenciaSimulado   = 1 ;
    public int fPotenciaFacturada       = 0 ;
    public int fEnergiaSimulada         = 0 ;
    
    // ..........................................................
     
    public informeSimpleFactura misDatos;
    
    // ..........................................................
    private BufferedImage _image;       //para la imagen en memoria
    private JFreeChart grafico;         // el grafico       
    // .......................................................... 

    // ..........................................................
    public JFileChooser fileChooser;                                   /*Declaramos el objeto fileChooser*/
    public String plogin="";
    public String ppassword="";
    public String bdStr="";
    public String urlStr="";
    public String sLogTxt = "";
    File nombre = null ;
    
    // ..........................................................
    
     public String tablaDatos[][]            = new String[35500][40];  
     public String nombres[]                 = new String[50];  
     public String tipos[]                   = new String[50];  
    
    // ..........................................................
     
     public int nDatos =0; 
     public int nColumnas=0 ;
     
    // ..........................................................
     
     public String clientesSimulacion[] = {"ACTIVA CLUB","COMUNIDAD REGANTES MONFORTE","FORUM","GH ELECTROTÉCNIA","RESIDENCIA GERIATRICA"} ;
     public String simulacionPuntos[][][] = {{
                                             {"727","10","C.D. ALMERIA"},
                                             {"728","10","C.D. ALZIRA"},
                                             {"729","14","C.D. JEREZ DE LA FRONTERA"},
                                             {"730","10","C.D. PUERTO SANTA MARIA"},
                                             {"731","14","C.D. VALENCIA"},
                                             {"761","14","C.D.WELLNESS NUEVO MESTALLA"}},
                                             {
                                             {"747","14","COMUNIDAD REGANTES MONFORTE"}},
                                             {
                                             {"749","14","FORUM"}}, 
                                             {
                                             {"750","14","GH ELECTROTÉCNIA"}},                                             
                                             {
                                             {"732","14","GERIATRICO"}}} ;

     public String simulacionMeses[][][]  = {{
                                            {"04 - 2015","05 - 2015","06 - 2015","07 - 2015","08 - 2015","09 - 2015","10 - 2015","11 - 2015","12 - 2015","01 - 2016"},
                                            {"06 - 2015","07 - 2015","08 - 2015","09 - 2015","10 - 2015","11 - 2015","12 - 2015","01 - 2016"},
                                            {"01 - 2015","02 - 2015","03 - 2015","04 - 2015","05 - 2015","06 - 2015","07 - 2015","08 - 2015","09 - 2015","10 - 2015","11 - 2015","12 - 2015","01 - 2016","09 - 2026","10 - 2026","11 - 2026","12 - 2026","1 - 2027"},
                                            {"06 - 2015","07 - 2015","08 - 2015","09 - 2015","10 - 2015","11 - 2015","12 - 2015","01 - 2016"},
                                            {"06 - 2015","07 - 2015","08 - 2015","09 - 2015","10 - 2015","11 - 2015","12 - 2015","01 - 2016","10 - 2026","11 - 2026","12 - 2026","1 - 2027"},
                                            {"06 - 2015","07 - 2015","08 - 2015","09 - 2015","10 - 2015","11 - 2015","12 - 2015","01 - 2016"}}, 
                                            {
                                            {"01 - 2015","02 - 2015","03 - 2015","04 - 2015","05 - 2015","06 - 2015","07 - 2015","08 - 2015","09 - 2015","10 - 2015","11 - 2015","12 - 2015","01 - 2016"}},    
                                            {
                                            {"07 - 2015","08 - 2015","09 - 2015","10 - 2015","11 - 2015","12 - 2015","01 - 2016","10 - 2026","11 - 2026","12 - 2026","1 - 2027"}},      
                                            {
                                            {"01 - 2015","02 - 2015","03 - 2015","04 - 2015","05 - 2015","06 - 2015","07 - 2015","08 - 2015","09 - 2015","10 - 2015","11 - 2015","12 - 2015","01 - 2016"}},                                                                                  
                                            {
                                            {"06 - 2015","07 - 2015","08 - 2015","09 - 2015","10 - 2015","11 - 2015","12 - 2015","01 - 2016"}}} ; 
  
     
     public String simulacionTablasOmie[] = {"01 - 2015","02 - 2015","03 - 2015","04 - 2015","05 - 2015","06 - 2015","07 - 2015","08 - 2015","09 - 2015","10 - 2015","11 - 2015","12 - 2015","01 - 2016","02 - 2016","03 - 2016","04 - 2016","05 - 2016","06 - 2016","07 - 2016","08 - 2016","09 - 2016","10 - 2016","11 - 2016","12 - 2016"} ;
     
     public String tablasOmieFechas[][] = {{"1","2015"},{"2","2015"},{"3","2015"},{"4","2015"},{"5","2015"},{"6","2015"},{"7","2015"},{"8","2015"},{"9","2015"},{"10","2015"},{"11","2015"},{"12","2015"},{"1","2016"},{"2","2016"},{"3","2016"},{"4","2016"},{"5","2016"},{"6","2016"},{"7","2016"},{"8","2016"},{"9","2016"},{"10","2016"},{"11","2016"},{"12","2016"}} ;
     public String tablasDatosEnergia[][] = {{"1","2015"},{"2","2015"},{"3","2015"},{"4","2015"},{"5","2015"},{"6","2015"},{"7","2015"},{"8","2015"},{"9","2015"},{"10","2015"},{"11","2015"},{"12","2015"},{"1","2016"},{"2","2016"},{"3","2016"},{"4","2016"},{"5","2016"},{"6","2016"},{"7","2016"},{"8","2016"},{"9","2016"},{"10","2016"},{"11","2016"},{"12","2016"}} ;
     
     public String tablasDatosPotencia[][] = {  {"5","727","2015-06-01","2015-06-30"},
                                                {"5","731","2015-06-01","2015-06-30"},
                                                {"5","731","2015-06-01","2015-06-30"},
                                                {"5","731","2015-06-01","2015-06-30"},
                                                {"5","731","2015-06-01","2015-06-30"},
                                                {"5","731","2015-06-01","2015-06-30"},
                                                {"5","761","2015-06-01","2015-06-30"},
                                                {"6","732","2015-06-01","2015-06-30"}} ;
     
     public String indiceSimulacionesPuntos[][]={{"5","727","10","C.D. ALMERIA","4","2015","2015-04-01","2015-04-30","01-04-2015","30-04-2015"},
                                                 {"5","727","10","C.D. ALMERIA","5","2015","2015-05-01","2015-05-31","01-05-2015","31-05-2015"},
                                                 {"5","727","10","C.D. ALMERIA","6","2015","2015-06-01","2015-06-30","01-06-2015","31-06-2015"},
                                                 {"5","727","10","C.D. ALMERIA","7","2015","2015-07-01","2015-07-31","01-07-2015","31-07-2015"},
                                                 {"5","727","10","C.D. ALMERIA","8","2015","2015-08-01","2015-08-31","01-08-2015","31-08-2015"},
                                                 {"5","727","10","C.D. ALMERIA","9","2015","2015-09-01","2015-09-30","01-09-2015","30-09-2015"},
                                                 {"5","727","10","C.D. ALMERIA","10","2015","2015-10-01","2015-10-31","01-10-2015","31-10-2015"},
                                                 {"5","727","10","C.D. ALMERIA","11","2015","2015-11-01","2015-11-30","01-11-2015","30-11-2015"},
                                                 {"5","727","10","C.D. ALMERIA","12","2015","2015-12-01","2015-12-31","01-12-2015","31-12-2015"},
                                                 {"5","727","10","C.D. ALMERIA","1","2016","2016-01-01","2016-01-31","01-01-2016","31-01-2016"},
                                                 {"5","728","10","C.D. ALZIRA","6","2015","2015-06-01","2015-06-30","01-06-2015","30-06-2015"},
                                                 {"5","728","10","C.D. ALZIRA","7","2015","2015-07-01","2015-07-31","01-07-2015","31-07-2015"},
                                                 {"5","728","10","C.D. ALZIRA","8","2015","2015-08-01","2015-08-31","01-08-2015","31-08-2015"},
                                                 {"5","728","10","C.D. ALZIRA","9","2015","2015-09-01","2015-09-30","01-09-2015","30-09-2015"},
                                                 {"5","728","10","C.D. ALZIRA","10","2015","2015-10-01","2015-10-31","01-10-2015","31-10-2015"},
                                                 {"5","728","10","C.D. ALZIRA","11","2015","2015-11-01","2015-11-30","01-11-2015","30-11-2015"},
                                                 {"5","728","10","C.D. ALZIRA","12","2015","2015-12-01","2015-12-31","01-12-2015","31-12-2015"},
                                                  {"5","728","10","C.D. ALZIRA","1","2016","2016-01-01","2016-01-31","01-01-2016","31-01-2016"},
                                                 {"5","729","14","C.D. JEREZ DE LA FRONTERA","1","2015","2015-01-01","2015-06-30","01-01-2015","30-01-2015"},
                                                 {"5","729","14","C.D. JEREZ DE LA FRONTERA","2","2015","2015-02-01","2015-06-30","01-02-2015","30-02-2015"},
                                                 {"5","729","14","C.D. JEREZ DE LA FRONTERA","3","2015","2015-03-01","2015-06-30","01-03-2015","30-03-2015"},
                                                 {"5","729","14","C.D. JEREZ DE LA FRONTERA","4","2015","2015-04-01","2015-06-30","01-04-2015","30-04-2015"},
                                                 {"5","729","14","C.D. JEREZ DE LA FRONTERA","5","2015","2015-05-01","2015-06-30","01-05-2015","30-05-2015"},
                                                 {"5","729","14","C.D. JEREZ DE LA FRONTERA","6","2015","2015-06-01","2015-06-30","01-06-2015","30-06-2015"},
                                                 {"5","729","14","C.D. JEREZ DE LA FRONTERA","7","2015","2015-07-01","2015-07-31","01-07-2015","31-07-2015"},
                                                 {"5","729","14","C.D. JEREZ DE LA FRONTERA","8","2015","2015-08-01","2015-08-31","01-08-2015","31-08-2015"},
                                                 {"5","729","14","C.D. JEREZ DE LA FRONTERA","9","2015","2015-09-01","2015-09-30","01-09-2015","30-09-2015"},
                                                 {"5","729","14","C.D. JEREZ DE LA FRONTERA","10","2015","2015-10-01","2015-10-31","01-10-2015","31-10-2015"},
                                                 {"5","729","14","C.D. JEREZ DE LA FRONTERA","11","2015","2015-11-01","2015-11-30","01-11-2015","30-11-2015"},
                                                 {"5","729","14","C.D. JEREZ DE LA FRONTERA","12","2015","2015-12-01","2015-12-31","01-12-2015","31-12-2015"},
                                                 {"5","729","14","C.D. JEREZ DE LA FRONTERA","1","2016","2016-01-01","2016-01-31","01-01-2016","31-01-2016"},
                                                 {"5","729","14","C.D. JEREZ DE LA FRONTERA","9","2026","2026-09-01","2026-09-30","01-09-2026","30-09-2026"},  
                                                 {"5","729","14","C.D. JEREZ DE LA FRONTERA","10","2026","2026-10-01","2026-10-31","01-10-2026","31-10-2026"},
                                                 {"5","729","14","C.D. JEREZ DE LA FRONTERA","11","2026","2026-11-01","2026-11-30","01-11-2026","30-11-2026"},
                                                 {"5","729","14","C.D. JEREZ DE LA FRONTERA","12","2026","2026-12-01","2026-12-31","01-12-2026","31-12-2026"},
                                                 {"5","729","14","C.D. JEREZ DE LA FRONTERA","1","2027","2027-01-01","2027-01-31","01-01-2027","31-01-2027"},
                                                 {"5","730","10","C.D. PUERTO SANTA MARIA","6","2015","2015-06-01","2015-06-30","01-06-2015","30-06-2015"},
                                                 {"5","730","10","C.D. PUERTO SANTA MARIA","7","2015","2015-07-01","2015-07-31","01-07-2015","31-07-2015"},
                                                 {"5","730","10","C.D. PUERTO SANTA MARIA","8","2015","2015-08-01","2015-08-31","01-08-2015","31-08-2015"},
                                                 {"5","730","10","C.D. PUERTO SANTA MARIA","9","2015","2015-09-01","2015-09-30","01-09-2015","30-09-2015"},
                                                 {"5","730","10","C.D. PUERTO SANTA MARIA","10","2015","2015-10-01","2015-10-31","01-10-2015","31-10-2015"},
                                                 {"5","730","10","C.D. PUERTO SANTA MARIA","11","2015","2015-11-01","2015-11-30","01-11-2015","30-11-2015"},
                                                 {"5","730","10","C.D. PUERTO SANTA MARIA","12","2015","2015-12-01","2015-12-31","01-12-2015","31-12-2015"},
                                                 {"5","730","10","C.D. PUERTO SANTA MARIA","1","2016","2016-01-01","2016-01-31","01-01-2016","31-01-2016"},
                                                 {"5","731","14","C.D. VALENCIA","6","2015","2015-06-01","2015-06-30","01-06-2015","30-06-2015"},
                                                 {"5","731","14","C.D. VALENCIA","7","2015","2015-07-01","2015-07-31","01-07-2015","31-07-2015"},
                                                 {"5","731","14","C.D. VALENCIA","8","2015","2015-08-01","2015-08-31","01-08-2015","31-08-2015"},
                                                 {"5","731","14","C.D. VALENCIA","9","2015","2015-09-01","2015-09-30","01-09-2015","30-09-2015"},
                                                 {"5","731","14","C.D. VALENCIA","10","2015","2015-10-01","2015-10-31","01-10-2015","31-10-2015"},
                                                 {"5","731","14","C.D. VALENCIA","11","2015","2015-11-01","2015-11-30","01-11-2015","30-11-2015"},
                                                 {"5","731","14","C.D. VALENCIA","12","2015","2015-12-01","2015-12-31","01-12-2015","31-12-2015"},
                                                 {"5","731","14","C.D. VALENCIA","1","2016","2016-01-01","2016-01-31","01-01-2016","31-01-2016"},
                                                 {"5","731","14","C.D. VALENCIA","10","2026","2026-10-01","2026-10-31","01-10-2026","31-10-2026"},
                                                 {"5","731","14","C.D. VALENCIA","11","2026","2026-11-01","2026-11-30","01-11-2026","30-11-2026"},
                                                 {"5","731","14","C.D. VALENCIA","12","2026","2026-12-01","2026-12-31","01-12-2026","31-12-2026"},
                                                 {"5","731","14","C.D. VALENCIA","1","2027","2027-01-01","2027-01-31","01-01-2027","01-01-2027"},
                                                 {"5","761","6","C.D.WELLNESS NUEVO MESTALLA","6","2015","2015-06-01","2015-06-30","01-06-2015","30-06-2015"},
                                                 {"5","761","6","C.D.WELLNESS NUEVO MESTALLA","7","2015","2015-07-01","2015-07-31","01-07-2015","31-07-2015"},
                                                 {"5","761","6","C.D.WELLNESS NUEVO MESTALLA","8","2015","2015-08-01","2015-08-31","01-08-2015","31-08-2015"},
                                                 {"5","761","6","C.D.WELLNESS NUEVO MESTALLA","9","2015","2015-09-01","2015-09-31","01-09-2015","30-09-2015"},
                                                 {"5","761","6","C.D.WELLNESS NUEVO MESTALLA","10","2015","2015-10-01","2015-10-31","01-10-2015","31-10-2015"},
                                                 {"5","761","6","C.D.WELLNESS NUEVO MESTALLA","11","2015","2015-11-01","2015-11-31","01-11-2015","30-11-2015"},
                                                 {"5","761","6","C.D.WELLNESS NUEVO MESTALLA","12","2015","2015-12-01","2015-12-31","01-12-2015","31-12-2015"},
                                                 {"5","761","6","C.D.WELLNESS NUEVO MESTALLA","1","2016","2016-01-01","2016-01-31","01-01-2016","31-01-2016"},
                                                 {"12","747","14","COMUNIDAD REGANTES MONFORTE","1","2015","2015-01-01","2015-01-31","01-01-2015","31-01-2015"},
                                                 {"12","747","14","COMUNIDAD REGANTES MONFORTE","2","2015","2015-02-01","2015-02-28","01-02-2015","28-02-2015"},
                                                 {"12","747","14","COMUNIDAD REGANTES MONFORTE","3","2015","2015-03-01","2015-03-31","01-03-2015","31-03-2015"},
                                                 {"12","747","14","COMUNIDAD REGANTES MONFORTE","4","2015","2015-04-01","2015-04-31","01-04-2015","30-04-2015"},
                                                 {"12","747","14","COMUNIDAD REGANTES MONFORTE","5","2015","2015-05-01","2015-05-31","01-05-2015","31-05-2015"},
                                                 {"12","747","14","COMUNIDAD REGANTES MONFORTE","6","2015","2015-06-01","2015-06-31","01-06-2015","30-06-2015"},
                                                 {"12","747","14","COMUNIDAD REGANTES MONFORTE","7","2015","2015-07-01","2015-07-31","01-07-2015","31-07-2015"},
                                                 {"12","747","14","COMUNIDAD REGANTES MONFORTE","8","2015","2015-08-01","2015-08-31","01-08-2015","31-08-2015"},
                                                 {"12","747","14","COMUNIDAD REGANTES MONFORTE","9","2015","2015-09-01","2015-09-31","01-09-2015","30-09-2015"},
                                                 {"12","747","14","COMUNIDAD REGANTES MONFORTE","10","2015","2015-10-01","2015-10-31","01-10-2015","31-10-2015"},
                                                 {"12","747","14","COMUNIDAD REGANTES MONFORTE","11","2015","2015-11-01","2015-11-31","01-11-2015","30-11-2015"},
                                                 {"12","747","14","COMUNIDAD REGANTES MONFORTE","12","2015","2015-12-01","2015-12-31","01-12-2015","31-12-2015"},
                                                  {"12","747","14","COMUNIDAD REGANTES MONFORTE","1","2016","2016-01-01","2016-01-31","01-01-2016","31-01-2016"},
                                                 {"14","749","14","FORUM","7","2015","2015-07-01","2015-07-31","01-07-2015","31-07-2015"},
                                                 {"14","749","14","FORUM","8","2015","2015-08-01","2015-08-31","01-08-2015","31-08-2015"},
                                                 {"14","749","14","FORUM","9","2015","2015-09-01","2015-09-30","01-09-2015","30-09-2015"},
                                                 {"14","749","14","FORUM","10","2015","2015-10-01","2015-10-31","01-10-2015","31-10-2015"},
                                                 {"14","749","14","FORUM","11","2015","2015-11-01","2015-11-30","01-11-2015","30-11-2015"},
                                                 {"14","749","14","FORUM","12","2015","2015-12-01","2015-12-31","01-12-2015","31-12-2015"},
                                                 {"14","749","14","FORUM","1","2016","2016-01-01","2016-01-31","01-01-2016","31-01-2016"},
                                                 {"14","749","14","FORUM","10","2026","2026-10-01","2026-10-31","01-10-2026","31-10-2026"},
                                                 {"14","749","14","FORUM","11","2026","2026-11-01","2026-11-30","01-11-2026","30-11-2026"},
                                                 {"14","749","14","FORUM","12","2026","2026-12-01","2026-12-31","01-12-2026","31-12-2026"},
                                                 {"14","749","14","FORUM","1","2027","2027-01-01","2027-01-31","01-01-2027","31-01-2027"},
                                                 {"15","750","14","GH ELETROTÉCNIA","1","2015","2015-01-01","2015-01-31","01-01-2015","31-01-2015"},
                                                 {"15","750","14","GH ELETROTÉCNIA","2","2015","2015-02-01","2015-02-28","01-02-2015","28-02-2015"},
                                                 {"15","750","14","GH ELETROTÉCNIA","3","2015","2015-03-01","2015-03-31","01-03-2015","31-03-2015"},
                                                 {"15","750","14","GH ELETROTÉCNIA","4","2015","2015-04-01","2015-04-31","01-04-2015","30-04-2015"},
                                                 {"15","750","14","GH ELETROTÉCNIA","5","2015","2015-05-01","2015-05-31","01-05-2015","31-05-2015"},
                                                 {"15","750","14","GH ELETROTÉCNIA","6","2015","2015-06-01","2015-06-31","01-06-2015","30-06-2015"},
                                                 {"15","750","14","GH ELETROTÉCNIA","7","2015","2015-07-01","2015-07-31","01-07-2015","31-07-2015"},
                                                 {"15","750","14","GH ELETROTÉCNIA","8","2015","2015-08-01","2015-08-31","01-08-2015","31-08-2015"},
                                                 {"15","750","14","GH ELETROTÉCNIA","9","2015","2015-09-01","2015-09-31","01-09-2015","30-09-2015"},
                                                 {"15","750","14","GH ELETROTÉCNIA","10","2015","2015-10-01","2015-10-31","01-10-2015","31-10-2015"},
                                                 {"15","750","14","GH ELETROTÉCNIA","11","2015","2015-11-01","2015-11-31","01-11-2015","30-11-2015"},
                                                 {"15","750","14","GH ELETROTÉCNIA","12","2015","2015-12-01","2015-12-31","01-12-2015","31-12-2015"},
                                                 {"15","750","14","GH ELETROTÉCNIA","1","2016","2016-01-01","2016-01-31","01-01-2016","31-01-2016"},  
                                                 {"6","732","10","GERIATRICO","6","2015","2015-06-01","2015-06-30","01-06-2015","30-06-2015"},
                                                 {"6","732","10","GERIATRICO","7","2015","2015-07-01","2015-07-31","01-07-2015","31-07-2015"},
                                                 {"6","732","10","GERIATRICO","8","2015","2015-08-01","2015-08-31","01-08-2015","31-08-2015"},
                                                 {"6","732","10","GERIATRICO","9","2015","2015-09-01","2015-09-30","01-09-2015","30-09-2015"},
                                                 {"6","732","10","GERIATRICO","10","2015","2015-10-01","2015-10-31","01-10-2015","31-10-2015"},
                                                 {"6","732","10","GERIATRICO","11","2015","2015-11-01","2015-11-30","01-11-2015","30-11-2015"},
                                                 {"6","732","10","GERIATRICO","12","2015","2015-12-01","2015-12-31","01-12-2015","31-12-2015"},
                                                 {"6","732","10","GERIATRICO","1","2016","2016-01-01","2016-01-31","01-01-2016","31-01-2016"} };
     
     public  DefaultTableModel model3,model4,model5,model6,model7;
     
    // public String clientesSimulacion[] = new String[100];
    
    public int nClientesSimulacion=0;
    
    public String condicionesContratoSimulacion[]    = new String[30]; 
    
    public int indSim = 0 ;
     
    // public String simulacionPuntos[][][] =  new String[100][50][3];
     
     
    /**
     * Creates new form FramePrincipal
     */
    public FramePrincipal() {
        initComponents();
        crearArbol();
        crearArbolCalculos();
        activarGraficas();
        generaTablaHistoricoPuntos();
        jTextField41.setVisible(false);
        jTextField42.setVisible(false);
        jTextField43.setVisible(false);
        jTextField44.setVisible(false);
        jTextField45.setVisible(false);
        jTextField46.setVisible(false);
        
        botonValidarCAct.setVisible(false);
        botonValidarSim.setVisible(false);
        
        jTextField32.setVisible(false);
        jLabel53.setVisible(false);
        
         this.jPanel26.setVisible(true); this.jPanel50.setVisible(false);
        
        this.misDatos= new informeSimpleFactura();                                  // Clase contenedor de datos para informe simulado factura.
        
    }
   /**
        * @param miVentana
         * Enviamos una instancia de la ventana principal
         */
    public void setVentanaPrincipal(FramePrincipal miVentana)  {
              miVentanaPrincipal=miVentana;
    }
        
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jTabbedPane6 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        arbol = new javax.swing.JTree();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel4 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel16 = new javax.swing.JLabel();
        jTextField10 = new javax.swing.JTextField();
        jButton5 = new javax.swing.JButton();
        jTextField58 = new javax.swing.JTextField();
        jLabel81 = new javax.swing.JLabel();
        jTextField59 = new javax.swing.JTextField();
        jCheckBox1 = new javax.swing.JCheckBox();
        jTextField3 = new javax.swing.JTextField();
        jButton11 = new javax.swing.JButton();
        jTextField264 = new javax.swing.JTextField();
        PDEntrada20A = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jTextField9 = new javax.swing.JTextField();
        jLabel80 = new javax.swing.JLabel();
        jTextField40 = new javax.swing.JTextField();
        jTextField60 = new javax.swing.JTextField();
        jPanel24 = new javax.swing.JPanel();
        botonCalculo = new javax.swing.JButton();
        botonBorrarCampos = new javax.swing.JButton();
        botonDetalles = new javax.swing.JButton();
        botonValidar = new javax.swing.JButton();
        jPanel25 = new javax.swing.JPanel();
        jTextField65 = new javax.swing.JTextField();
        jTextField66 = new javax.swing.JTextField();
        jLabel92 = new javax.swing.JLabel();
        jLabel93 = new javax.swing.JLabel();
        jTextField68 = new javax.swing.JTextField();
        jTextField67 = new javax.swing.JTextField();
        jTextField69 = new javax.swing.JTextField();
        jTextField70 = new javax.swing.JTextField();
        jLabel94 = new javax.swing.JLabel();
        jLabel95 = new javax.swing.JLabel();
        jTextField72 = new javax.swing.JTextField();
        jTextField71 = new javax.swing.JTextField();
        jLabel90 = new javax.swing.JLabel();
        jLabel91 = new javax.swing.JLabel();
        jPanel27 = new javax.swing.JPanel();
        jLabel105 = new javax.swing.JLabel();
        jLabel106 = new javax.swing.JLabel();
        jLabel107 = new javax.swing.JLabel();
        jTextField77 = new javax.swing.JTextField();
        jTextField78 = new javax.swing.JTextField();
        jTextField79 = new javax.swing.JTextField();
        jLabel108 = new javax.swing.JLabel();
        jLabel109 = new javax.swing.JLabel();
        jLabel110 = new javax.swing.JLabel();
        jComboBox7 = new javax.swing.JComboBox();
        jPanel28 = new javax.swing.JPanel();
        jLabel50 = new javax.swing.JLabel();
        jLabel51 = new javax.swing.JLabel();
        jLabel66 = new javax.swing.JLabel();
        jLabel69 = new javax.swing.JLabel();
        jTextField30 = new javax.swing.JTextField();
        jTextField15 = new javax.swing.JTextField();
        jTextField27 = new javax.swing.JTextField();
        jTextField5 = new javax.swing.JTextField();
        jTextField47 = new javax.swing.JTextField();
        jTextField82 = new javax.swing.JTextField();
        jLabel114 = new javax.swing.JLabel();
        jPanel29 = new javax.swing.JPanel();
        jTextField44 = new javax.swing.JTextField();
        jTextField41 = new javax.swing.JTextField();
        jTextField42 = new javax.swing.JTextField();
        jTextField43 = new javax.swing.JTextField();
        jTextField46 = new javax.swing.JTextField();
        jTextField45 = new javax.swing.JTextField();
        jPanel31 = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jTextField6 = new javax.swing.JTextField();
        jTextField7 = new javax.swing.JTextField();
        jTextField8 = new javax.swing.JTextField();
        jButton14 = new javax.swing.JButton();
        jButton15 = new javax.swing.JButton();
        jButton16 = new javax.swing.JButton();
        jButton17 = new javax.swing.JButton();
        jLabel46 = new javax.swing.JLabel();
        jLabel38 = new javax.swing.JLabel();
        jLabel37 = new javax.swing.JLabel();
        jLabel82 = new javax.swing.JLabel();
        jTextField80 = new javax.swing.JTextField();
        jLabel111 = new javax.swing.JLabel();
        jPanel44 = new javax.swing.JPanel();
        jLabel144 = new javax.swing.JLabel();
        jTextField106 = new javax.swing.JTextField();
        jTextField107 = new javax.swing.JTextField();
        jTextField108 = new javax.swing.JTextField();
        jLabel156 = new javax.swing.JLabel();
        jTextField113 = new javax.swing.JTextField();
        jTextField114 = new javax.swing.JTextField();
        jTextField115 = new javax.swing.JTextField();
        jLabel153 = new javax.swing.JLabel();
        jPanel45 = new javax.swing.JPanel();
        jLabel145 = new javax.swing.JLabel();
        jTextField109 = new javax.swing.JTextField();
        jLabel146 = new javax.swing.JLabel();
        jTextField110 = new javax.swing.JTextField();
        jLabel147 = new javax.swing.JLabel();
        jLabel148 = new javax.swing.JLabel();
        jPanel48 = new javax.swing.JPanel();
        jLabel161 = new javax.swing.JLabel();
        jTextField121 = new javax.swing.JTextField();
        jLabel162 = new javax.swing.JLabel();
        jTextField122 = new javax.swing.JTextField();
        jLabel163 = new javax.swing.JLabel();
        jLabel164 = new javax.swing.JLabel();
        jTextField123 = new javax.swing.JTextField();
        jPanel49 = new javax.swing.JPanel();
        jLabel112 = new javax.swing.JLabel();
        jTextField81 = new javax.swing.JTextField();
        jLabel113 = new javax.swing.JLabel();
        jLabel117 = new javax.swing.JLabel();
        jTextField85 = new javax.swing.JTextField();
        jLabel118 = new javax.swing.JLabel();
        jTextField126 = new javax.swing.JTextField();
        jLabel172 = new javax.swing.JLabel();
        jLabel173 = new javax.swing.JLabel();
        jTextField39 = new javax.swing.JTextField();
        jComboBox8 = new javax.swing.JComboBox();
        jLayeredPane1 = new javax.swing.JLayeredPane();
        jPanel26 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jLabel100 = new javax.swing.JLabel();
        energiaP1 = new javax.swing.JTextField();
        energiaP2 = new javax.swing.JTextField();
        energiaP3 = new javax.swing.JTextField();
        jTextField75 = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        jLabel101 = new javax.swing.JLabel();
        jPanel50 = new javax.swing.JPanel();
        jLabel103 = new javax.swing.JLabel();
        jLabel104 = new javax.swing.JLabel();
        jLabel165 = new javax.swing.JLabel();
        jLabel166 = new javax.swing.JLabel();
        energiaP1s = new javax.swing.JTextField();
        energiaP2s = new javax.swing.JTextField();
        energiaP3s = new javax.swing.JTextField();
        jTextField124 = new javax.swing.JTextField();
        jLabel167 = new javax.swing.JLabel();
        jLabel168 = new javax.swing.JLabel();
        jLabel169 = new javax.swing.JLabel();
        jLabel170 = new javax.swing.JLabel();
        jPanel10 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jLabel49 = new javax.swing.JLabel();
        jTextField29 = new javax.swing.JTextField();
        jLabel55 = new javax.swing.JLabel();
        jTextField34 = new javax.swing.JTextField();
        botonValidarSim = new javax.swing.JButton();
        jComboBox4 = new javax.swing.JComboBox();
        jPanel11 = new javax.swing.JPanel();
        jPanel30 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTextArea3 = new javax.swing.JTextArea();
        jLabel99 = new javax.swing.JLabel();
        jTextField74 = new javax.swing.JTextField();
        jLabel98 = new javax.swing.JLabel();
        jLabel45 = new javax.swing.JLabel();
        jLabel61 = new javax.swing.JLabel();
        jTextField26 = new javax.swing.JTextField();
        jLabel47 = new javax.swing.JLabel();
        jLabel62 = new javax.swing.JLabel();
        jTextField37 = new javax.swing.JTextField();
        jLabel63 = new javax.swing.JLabel();
        jLabel64 = new javax.swing.JLabel();
        jTextField38 = new javax.swing.JTextField();
        jLabel65 = new javax.swing.JLabel();
        jLabel150 = new javax.swing.JLabel();
        jTextField112 = new javax.swing.JTextField();
        jLabel151 = new javax.swing.JLabel();
        jCheckBox6 = new javax.swing.JCheckBox();
        jPanel32 = new javax.swing.JPanel();
        jLabel31 = new javax.swing.JLabel();
        jTextField20 = new javax.swing.JTextField();
        jLabel32 = new javax.swing.JLabel();
        jTextField21 = new javax.swing.JTextField();
        jLabel33 = new javax.swing.JLabel();
        jTextField22 = new javax.swing.JTextField();
        jPanel33 = new javax.swing.JPanel();
        jLabel39 = new javax.swing.JLabel();
        jTextField23 = new javax.swing.JTextField();
        jLabel40 = new javax.swing.JLabel();
        jLabel41 = new javax.swing.JLabel();
        jTextField24 = new javax.swing.JTextField();
        jTextField25 = new javax.swing.JTextField();
        jLabel42 = new javax.swing.JLabel();
        jLabel43 = new javax.swing.JLabel();
        jLabel44 = new javax.swing.JLabel();
        jTabbedPane7 = new javax.swing.JTabbedPane();
        jPanel46 = new javax.swing.JPanel();
        tipoMedida = new javax.swing.JComboBox();
        tipoSuministro = new javax.swing.JComboBox();
        jLabel83 = new javax.swing.JLabel();
        jTextField4 = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jTextField62 = new javax.swing.JTextField();
        jLabel88 = new javax.swing.JLabel();
        jTextField61 = new javax.swing.JTextField();
        jLabel84 = new javax.swing.JLabel();
        jPanel47 = new javax.swing.JPanel();
        jLabel154 = new javax.swing.JLabel();
        jTextField116 = new javax.swing.JTextField();
        jLabel155 = new javax.swing.JLabel();
        jTextField117 = new javax.swing.JTextField();
        jLabel157 = new javax.swing.JLabel();
        jTextField118 = new javax.swing.JTextField();
        jLabel158 = new javax.swing.JLabel();
        jTextField119 = new javax.swing.JTextField();
        jLabel159 = new javax.swing.JLabel();
        jTextField120 = new javax.swing.JTextField();
        jLabel160 = new javax.swing.JLabel();
        jTabbedPane8 = new javax.swing.JTabbedPane();
        miBarra01 = new javax.swing.JScrollPane();
        miTabla01 = new javax.swing.JTable();
        jScrollPane13 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        jTabbedPane11 = new javax.swing.JTabbedPane();
        PCContrato = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jTextField11 = new javax.swing.JTextField();
        jTextField12 = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        jTextField13 = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        jTextField14 = new javax.swing.JTextField();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jTextField16 = new javax.swing.JTextField();
        jTextField17 = new javax.swing.JTextField();
        jTextField18 = new javax.swing.JTextField();
        jLabel28 = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        jLabel34 = new javax.swing.JLabel();
        jTextField19 = new javax.swing.JTextField();
        jLabel35 = new javax.swing.JLabel();
        jTextField28 = new javax.swing.JTextField();
        jLabel48 = new javax.swing.JLabel();
        jLabel54 = new javax.swing.JLabel();
        jTextField33 = new javax.swing.JTextField();
        jLabel56 = new javax.swing.JLabel();
        jLabel57 = new javax.swing.JLabel();
        jTextField35 = new javax.swing.JTextField();
        jLabel58 = new javax.swing.JLabel();
        jLabel59 = new javax.swing.JLabel();
        jTextField36 = new javax.swing.JTextField();
        jLabel60 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        botonValidarCAct = new javax.swing.JButton();
        jComboBox3 = new javax.swing.JComboBox();
        jLabel96 = new javax.swing.JLabel();
        jTextField73 = new javax.swing.JTextField();
        jLabel97 = new javax.swing.JLabel();
        jLabel149 = new javax.swing.JLabel();
        jTextField111 = new javax.swing.JTextField();
        jLabel152 = new javax.swing.JLabel();
        jCheckBox5 = new javax.swing.JCheckBox();
        jPanel72 = new javax.swing.JPanel();
        jLabel238 = new javax.swing.JLabel();
        botonValidarCAct1 = new javax.swing.JButton();
        jComboBox11 = new javax.swing.JComboBox();
        jTextField243 = new javax.swing.JTextField();
        jLabel239 = new javax.swing.JLabel();
        jLabel240 = new javax.swing.JLabel();
        jTextField244 = new javax.swing.JTextField();
        jLabel241 = new javax.swing.JLabel();
        jTextField245 = new javax.swing.JTextField();
        jLabel242 = new javax.swing.JLabel();
        jTextField246 = new javax.swing.JTextField();
        jTextField247 = new javax.swing.JTextField();
        jLabel244 = new javax.swing.JLabel();
        jTextField248 = new javax.swing.JTextField();
        jLabel245 = new javax.swing.JLabel();
        jTextField249 = new javax.swing.JTextField();
        jTextField250 = new javax.swing.JTextField();
        jTextField251 = new javax.swing.JTextField();
        jLabel248 = new javax.swing.JLabel();
        jLabel249 = new javax.swing.JLabel();
        jLabel250 = new javax.swing.JLabel();
        jLabel251 = new javax.swing.JLabel();
        jLabel252 = new javax.swing.JLabel();
        jLabel253 = new javax.swing.JLabel();
        jTextField252 = new javax.swing.JTextField();
        jTextField253 = new javax.swing.JTextField();
        jTextField254 = new javax.swing.JTextField();
        jTextField255 = new javax.swing.JTextField();
        jTextField256 = new javax.swing.JTextField();
        jTextField257 = new javax.swing.JTextField();
        jTextField258 = new javax.swing.JTextField();
        jTextField259 = new javax.swing.JTextField();
        jTextField260 = new javax.swing.JTextField();
        jTextField261 = new javax.swing.JTextField();
        jTextField262 = new javax.swing.JTextField();
        jTextField263 = new javax.swing.JTextField();
        jLabel243 = new javax.swing.JLabel();
        jTextField265 = new javax.swing.JTextField();
        jLabel246 = new javax.swing.JLabel();
        jLabel247 = new javax.swing.JLabel();
        jTextField266 = new javax.swing.JTextField();
        jLabel254 = new javax.swing.JLabel();
        jCheckBox7 = new javax.swing.JCheckBox();
        jScrollPane16 = new javax.swing.JScrollPane();
        jTextArea5 = new javax.swing.JTextArea();
        jPanel7 = new javax.swing.JPanel();
        jTabbedPane3 = new javax.swing.JTabbedPane();
        jPanel12 = new javax.swing.JPanel();
        miBarra03 = new javax.swing.JScrollPane();
        miTabla03 = new javax.swing.JTable();
        jPanel13 = new javax.swing.JPanel();
        miBarra04 = new javax.swing.JScrollPane();
        miTabla04 = new javax.swing.JTable();
        jLabel52 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox();
        botonActualizaConsultaAnexo = new javax.swing.JButton();
        jTextField32 = new javax.swing.JTextField();
        jLabel53 = new javax.swing.JLabel();
        botonGenerarExel = new javax.swing.JButton();
        jButton12 = new javax.swing.JButton();
        jTextField63 = new javax.swing.JTextField();
        jLabel89 = new javax.swing.JLabel();
        jTextField64 = new javax.swing.JTextField();
        jTextField76 = new javax.swing.JTextField();
        jLabel102 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        jTabbedPane5 = new javax.swing.JTabbedPane();
        jPanel9 = new javax.swing.JPanel();
        jPanel18 = new javax.swing.JPanel();
        jScrollPane8 = new javax.swing.JScrollPane();
        arbol02 = new javax.swing.JTree();
        jPanel19 = new javax.swing.JPanel();
        jScrollPane10 = new javax.swing.JScrollPane();
        tablaC01 = new javax.swing.JTable();
        jScrollPane11 = new javax.swing.JScrollPane();
        tablaC02 = new javax.swing.JTable();
        jLabel76 = new javax.swing.JLabel();
        jTextField56 = new javax.swing.JTextField();
        jLabel77 = new javax.swing.JLabel();
        jTextField57 = new javax.swing.JTextField();
        jPanel20 = new javax.swing.JPanel();
        jButton9 = new javax.swing.JButton();
        jButton13 = new javax.swing.JButton();
        jPanel21 = new javax.swing.JPanel();
        jPanel22 = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        tablaC03 = new javax.swing.JTable();
        jLabel78 = new javax.swing.JLabel();
        jPanel23 = new javax.swing.JPanel();
        jScrollPane7 = new javax.swing.JScrollPane();
        tablaC04 = new javax.swing.JTable();
        jLabel79 = new javax.swing.JLabel();
        jPanel17 = new javax.swing.JPanel();
        jLabel36 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        jTextField31 = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        botonActualizar = new javax.swing.JButton();
        miBarra02 = new javax.swing.JScrollPane();
        miTabla02 = new javax.swing.JTable();
        jButton18 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jPanel35 = new javax.swing.JPanel();
        listaClientes = new javax.swing.JComboBox();
        jButton1 = new javax.swing.JButton();
        jLabel87 = new javax.swing.JLabel();
        jLabel85 = new javax.swing.JLabel();
        jLabel86 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jPanel38 = new javax.swing.JPanel();
        jCheckBox3 = new javax.swing.JCheckBox();
        jCheckBox4 = new javax.swing.JCheckBox();
        jLabel124 = new javax.swing.JLabel();
        jTextField89 = new javax.swing.JTextField();
        jButton10 = new javax.swing.JButton();
        jTextField125 = new javax.swing.JTextField();
        jLabel171 = new javax.swing.JLabel();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jPanel39 = new javax.swing.JPanel();
        miBarra12 = new javax.swing.JScrollPane();
        miTabla12 = new javax.swing.JTable();
        jPanel40 = new javax.swing.JPanel();
        jPanel41 = new javax.swing.JPanel();
        jComboBox5 = new javax.swing.JComboBox();
        jComboBox6 = new javax.swing.JComboBox();
        jButton19 = new javax.swing.JButton();
        jScrollPane9 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel36 = new javax.swing.JPanel();
        jTabbedPane4 = new javax.swing.JTabbedPane();
        jPanel15 = new javax.swing.JPanel();
        miBarra05 = new javax.swing.JScrollPane();
        miTabla05 = new javax.swing.JTable();
        jLabel139 = new javax.swing.JLabel();
        jButton20 = new javax.swing.JButton();
        jTextField105 = new javax.swing.JTextField();
        jLabel143 = new javax.swing.JLabel();
        jPanel43 = new javax.swing.JPanel();
        jLabel73 = new javax.swing.JLabel();
        jTextField53 = new javax.swing.JTextField();
        jButton4 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jTextField54 = new javax.swing.JTextField();
        jLabel74 = new javax.swing.JLabel();
        jLabel75 = new javax.swing.JLabel();
        jTextField55 = new javax.swing.JTextField();
        jPanel14 = new javax.swing.JPanel();
        jPanel16 = new javax.swing.JPanel();
        jLabel67 = new javax.swing.JLabel();
        jLabel68 = new javax.swing.JLabel();
        jTextField48 = new javax.swing.JTextField();
        jTextField49 = new javax.swing.JTextField();
        jLabel70 = new javax.swing.JLabel();
        jTextField50 = new javax.swing.JTextField();
        jLabel71 = new javax.swing.JLabel();
        jLabel72 = new javax.swing.JLabel();
        jTextField52 = new javax.swing.JTextField();
        jButton7 = new javax.swing.JButton();
        listaTarifaActual = new javax.swing.JComboBox();
        jLabel125 = new javax.swing.JLabel();
        jTextField51 = new javax.swing.JTextField();
        jLabel126 = new javax.swing.JLabel();
        jTextField90 = new javax.swing.JTextField();
        jLabel127 = new javax.swing.JLabel();
        jTextField91 = new javax.swing.JTextField();
        jLabel128 = new javax.swing.JLabel();
        jTextField92 = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        listaClientesAdmin = new javax.swing.JComboBox();
        jButton6 = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTextArea4 = new javax.swing.JTextArea();
        jButton3 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jPanel37 = new javax.swing.JPanel();
        tipoMedida1 = new javax.swing.JComboBox();
        tipoSuministro1 = new javax.swing.JComboBox();
        jCheckBox2 = new javax.swing.JCheckBox();
        jLabel120 = new javax.swing.JLabel();
        jTextField86 = new javax.swing.JTextField();
        jLabel121 = new javax.swing.JLabel();
        jTextField87 = new javax.swing.JTextField();
        jLabel122 = new javax.swing.JLabel();
        jTextField88 = new javax.swing.JTextField();
        jLabel123 = new javax.swing.JLabel();
        jLabel119 = new javax.swing.JLabel();
        jPanel42 = new javax.swing.JPanel();
        jLabel129 = new javax.swing.JLabel();
        jTextField93 = new javax.swing.JTextField();
        jLabel130 = new javax.swing.JLabel();
        jLabel131 = new javax.swing.JLabel();
        jTextField94 = new javax.swing.JTextField();
        jLabel132 = new javax.swing.JLabel();
        jTextField95 = new javax.swing.JTextField();
        jLabel133 = new javax.swing.JLabel();
        jLabel134 = new javax.swing.JLabel();
        jLabel135 = new javax.swing.JLabel();
        jTextField96 = new javax.swing.JTextField();
        jLabel136 = new javax.swing.JLabel();
        jLabel137 = new javax.swing.JLabel();
        jTextField97 = new javax.swing.JTextField();
        jLabel138 = new javax.swing.JLabel();
        jTextField98 = new javax.swing.JTextField();
        jLabel140 = new javax.swing.JLabel();
        jTextField99 = new javax.swing.JTextField();
        jTextField100 = new javax.swing.JTextField();
        jTextField101 = new javax.swing.JTextField();
        jLabel141 = new javax.swing.JLabel();
        jTextField102 = new javax.swing.JTextField();
        jTextField103 = new javax.swing.JTextField();
        jPanel34 = new javax.swing.JPanel();
        jLabel115 = new javax.swing.JLabel();
        jLabel116 = new javax.swing.JLabel();
        jTextField83 = new javax.swing.JTextField();
        jTextField84 = new javax.swing.JTextField();
        jLabel142 = new javax.swing.JLabel();
        jTextField104 = new javax.swing.JTextField();
        jPanel51 = new javax.swing.JPanel();
        jLabel174 = new javax.swing.JLabel();
        jLabel175 = new javax.swing.JLabel();
        jLabel176 = new javax.swing.JLabel();
        jLabel177 = new javax.swing.JLabel();
        bdname = new javax.swing.JTextField();
        host = new javax.swing.JTextField();
        login = new javax.swing.JTextField();
        passw = new javax.swing.JTextField();
        jButton22 = new javax.swing.JButton();
        jButton23 = new javax.swing.JButton();
        miBarra2 = new javax.swing.JScrollPane();
        miTabla2e = new javax.swing.JTable();
        jScrollPane12 = new javax.swing.JScrollPane();
        logAcciones = new javax.swing.JTextArea();
        jLabel178 = new javax.swing.JLabel();
        tabla = new javax.swing.JTextField();
        jLabel179 = new javax.swing.JLabel();
        jTextField127 = new javax.swing.JTextField();
        jLabel180 = new javax.swing.JLabel();
        jTextField128 = new javax.swing.JTextField();
        jProgressBar1 = new javax.swing.JProgressBar();
        jComboBox10 = new javax.swing.JComboBox();
        jPanel52 = new javax.swing.JPanel();
        jPanel53 = new javax.swing.JPanel();
        jScrollPane14 = new javax.swing.JScrollPane();
        arbolSimulaciones = new javax.swing.JTree();
        jScrollPane15 = new javax.swing.JScrollPane();
        arbolPrecios = new javax.swing.JTree();
        jPanel54 = new javax.swing.JPanel();
        jTabbedPane9 = new javax.swing.JTabbedPane();
        miBarra14 = new javax.swing.JScrollPane();
        miTabla14 = new javax.swing.JTable();
        jPanel57 = new javax.swing.JPanel();
        miBarra15 = new javax.swing.JScrollPane();
        miTabla16 = new javax.swing.JTable();
        jPanel58 = new javax.swing.JPanel();
        miBarra16 = new javax.swing.JScrollPane();
        miTabla15 = new javax.swing.JTable();
        jPanel60 = new javax.swing.JPanel();
        jComboBox9 = new javax.swing.JComboBox();
        jLabel201 = new javax.swing.JLabel();
        jLabel202 = new javax.swing.JLabel();
        jLabel200 = new javax.swing.JLabel();
        jLabel220 = new javax.swing.JLabel();
        jPanel55 = new javax.swing.JPanel();
        miBarra13 = new javax.swing.JScrollPane();
        miTabla13 = new javax.swing.JTable();
        jTabbedPane10 = new javax.swing.JTabbedPane();
        jPanel56 = new javax.swing.JPanel();
        jLabel181 = new javax.swing.JLabel();
        jTextField129 = new javax.swing.JTextField();
        jLabel182 = new javax.swing.JLabel();
        jTextField130 = new javax.swing.JTextField();
        jLabel183 = new javax.swing.JLabel();
        jTextField131 = new javax.swing.JTextField();
        jButton21 = new javax.swing.JButton();
        jTextField134 = new javax.swing.JTextField();
        jTextField135 = new javax.swing.JTextField();
        jTextField136 = new javax.swing.JTextField();
        jTextField137 = new javax.swing.JTextField();
        jTextField138 = new javax.swing.JTextField();
        jTextField139 = new javax.swing.JTextField();
        jLabel187 = new javax.swing.JLabel();
        jLabel188 = new javax.swing.JLabel();
        jLabel189 = new javax.swing.JLabel();
        jLabel190 = new javax.swing.JLabel();
        jLabel191 = new javax.swing.JLabel();
        jLabel192 = new javax.swing.JLabel();
        jLabel194 = new javax.swing.JLabel();
        jLabel195 = new javax.swing.JLabel();
        jTextField147 = new javax.swing.JTextField();
        jLabel196 = new javax.swing.JLabel();
        jTextField148 = new javax.swing.JTextField();
        jTextField149 = new javax.swing.JTextField();
        jTextField150 = new javax.swing.JTextField();
        jTextField151 = new javax.swing.JTextField();
        jTextField152 = new javax.swing.JTextField();
        jTextField153 = new javax.swing.JTextField();
        jTextField154 = new javax.swing.JTextField();
        jLabel199 = new javax.swing.JLabel();
        jTextField185 = new javax.swing.JTextField();
        jPanel62 = new javax.swing.JPanel();
        jLabel186 = new javax.swing.JLabel();
        jTextField178 = new javax.swing.JTextField();
        jTextField172 = new javax.swing.JTextField();
        jTextField173 = new javax.swing.JTextField();
        jTextField174 = new javax.swing.JTextField();
        jTextField175 = new javax.swing.JTextField();
        jTextField176 = new javax.swing.JTextField();
        jTextField177 = new javax.swing.JTextField();
        jLabel185 = new javax.swing.JLabel();
        jTextField132 = new javax.swing.JTextField();
        jTextField155 = new javax.swing.JTextField();
        jTextField156 = new javax.swing.JTextField();
        jTextField157 = new javax.swing.JTextField();
        jTextField158 = new javax.swing.JTextField();
        jTextField159 = new javax.swing.JTextField();
        jTextField160 = new javax.swing.JTextField();
        jLabel184 = new javax.swing.JLabel();
        jTextField267 = new javax.swing.JTextField();
        jTextField268 = new javax.swing.JTextField();
        jTextField269 = new javax.swing.JTextField();
        jTextField270 = new javax.swing.JTextField();
        jTextField271 = new javax.swing.JTextField();
        jTextField272 = new javax.swing.JTextField();
        jPanel61 = new javax.swing.JPanel();
        jLabel197 = new javax.swing.JLabel();
        jTextField133 = new javax.swing.JTextField();
        jTextField167 = new javax.swing.JTextField();
        jTextField168 = new javax.swing.JTextField();
        jTextField169 = new javax.swing.JTextField();
        jTextField170 = new javax.swing.JTextField();
        jTextField171 = new javax.swing.JTextField();
        jTextField184 = new javax.swing.JTextField();
        jTextField183 = new javax.swing.JTextField();
        jTextField182 = new javax.swing.JTextField();
        jTextField181 = new javax.swing.JTextField();
        jTextField180 = new javax.swing.JTextField();
        jTextField179 = new javax.swing.JTextField();
        jLabel198 = new javax.swing.JLabel();
        jLabel193 = new javax.swing.JLabel();
        jTextField141 = new javax.swing.JTextField();
        jTextField142 = new javax.swing.JTextField();
        jTextField143 = new javax.swing.JTextField();
        jTextField144 = new javax.swing.JTextField();
        jTextField145 = new javax.swing.JTextField();
        jTextField146 = new javax.swing.JTextField();
        jCheckBox12 = new javax.swing.JCheckBox();
        jPanel59 = new javax.swing.JPanel();
        jPanel63 = new javax.swing.JPanel();
        jLabel203 = new javax.swing.JLabel();
        jLabel204 = new javax.swing.JLabel();
        jTextField161 = new javax.swing.JTextField();
        jLabel205 = new javax.swing.JLabel();
        jTextField162 = new javax.swing.JTextField();
        jLabel206 = new javax.swing.JLabel();
        jTextField186 = new javax.swing.JTextField();
        jPanel64 = new javax.swing.JPanel();
        jLabel207 = new javax.swing.JLabel();
        jLabel208 = new javax.swing.JLabel();
        jLabel209 = new javax.swing.JLabel();
        jTextField140 = new javax.swing.JTextField();
        jTextField163 = new javax.swing.JTextField();
        jTextField164 = new javax.swing.JTextField();
        jLabel210 = new javax.swing.JLabel();
        jLabel211 = new javax.swing.JLabel();
        jLabel212 = new javax.swing.JLabel();
        jTextField165 = new javax.swing.JTextField();
        jTextField166 = new javax.swing.JTextField();
        jTextField187 = new javax.swing.JTextField();
        jTextField188 = new javax.swing.JTextField();
        jTextField189 = new javax.swing.JTextField();
        jTextField190 = new javax.swing.JTextField();
        jPanel65 = new javax.swing.JPanel();
        jLabel213 = new javax.swing.JLabel();
        jLabel214 = new javax.swing.JLabel();
        jLabel215 = new javax.swing.JLabel();
        jTextField191 = new javax.swing.JTextField();
        jTextField192 = new javax.swing.JTextField();
        jTextField193 = new javax.swing.JTextField();
        jTextField194 = new javax.swing.JTextField();
        jTextField195 = new javax.swing.JTextField();
        jTextField196 = new javax.swing.JTextField();
        jTextField197 = new javax.swing.JTextField();
        jTextField198 = new javax.swing.JTextField();
        jTextField273 = new javax.swing.JTextField();
        jTextField274 = new javax.swing.JTextField();
        jLabel219 = new javax.swing.JLabel();
        jTextField208 = new javax.swing.JTextField();
        jTextField209 = new javax.swing.JTextField();
        jTextField210 = new javax.swing.JTextField();
        jTextField275 = new javax.swing.JTextField();
        jCheckBox8 = new javax.swing.JCheckBox();
        jButton24 = new javax.swing.JButton();
        jCheckBox11 = new javax.swing.JCheckBox();
        jPanel66 = new javax.swing.JPanel();
        jLabel216 = new javax.swing.JLabel();
        jLabel217 = new javax.swing.JLabel();
        jLabel218 = new javax.swing.JLabel();
        jTextField199 = new javax.swing.JTextField();
        jTextField200 = new javax.swing.JTextField();
        jTextField201 = new javax.swing.JTextField();
        jTextField202 = new javax.swing.JTextField();
        jTextField203 = new javax.swing.JTextField();
        jTextField204 = new javax.swing.JTextField();
        jTextField205 = new javax.swing.JTextField();
        jTextField206 = new javax.swing.JTextField();
        jTextField207 = new javax.swing.JTextField();
        jPanel67 = new javax.swing.JPanel();
        jPanel68 = new javax.swing.JPanel();
        jLabel221 = new javax.swing.JLabel();
        jLabel222 = new javax.swing.JLabel();
        jTextField211 = new javax.swing.JTextField();
        jLabel223 = new javax.swing.JLabel();
        jTextField212 = new javax.swing.JTextField();
        jLabel224 = new javax.swing.JLabel();
        jTextField213 = new javax.swing.JTextField();
        jPanel69 = new javax.swing.JPanel();
        jLabel225 = new javax.swing.JLabel();
        jLabel226 = new javax.swing.JLabel();
        jLabel227 = new javax.swing.JLabel();
        jTextField214 = new javax.swing.JTextField();
        jTextField215 = new javax.swing.JTextField();
        jTextField216 = new javax.swing.JTextField();
        jLabel228 = new javax.swing.JLabel();
        jLabel229 = new javax.swing.JLabel();
        jLabel230 = new javax.swing.JLabel();
        jTextField217 = new javax.swing.JTextField();
        jTextField218 = new javax.swing.JTextField();
        jTextField219 = new javax.swing.JTextField();
        jTextField220 = new javax.swing.JTextField();
        jTextField221 = new javax.swing.JTextField();
        jTextField222 = new javax.swing.JTextField();
        jButton25 = new javax.swing.JButton();
        jCheckBox10 = new javax.swing.JCheckBox();
        jPanel70 = new javax.swing.JPanel();
        jLabel231 = new javax.swing.JLabel();
        jLabel232 = new javax.swing.JLabel();
        jLabel233 = new javax.swing.JLabel();
        jTextField223 = new javax.swing.JTextField();
        jTextField224 = new javax.swing.JTextField();
        jTextField225 = new javax.swing.JTextField();
        jTextField226 = new javax.swing.JTextField();
        jTextField227 = new javax.swing.JTextField();
        jTextField228 = new javax.swing.JTextField();
        jTextField229 = new javax.swing.JTextField();
        jTextField230 = new javax.swing.JTextField();
        jLabel234 = new javax.swing.JLabel();
        jTextField231 = new javax.swing.JTextField();
        jTextField232 = new javax.swing.JTextField();
        jTextField233 = new javax.swing.JTextField();
        jTextField276 = new javax.swing.JTextField();
        jTextField277 = new javax.swing.JTextField();
        jTextField278 = new javax.swing.JTextField();
        jCheckBox9 = new javax.swing.JCheckBox();
        jPanel71 = new javax.swing.JPanel();
        jLabel235 = new javax.swing.JLabel();
        jLabel236 = new javax.swing.JLabel();
        jLabel237 = new javax.swing.JLabel();
        jTextField234 = new javax.swing.JTextField();
        jTextField235 = new javax.swing.JTextField();
        jTextField236 = new javax.swing.JTextField();
        jTextField237 = new javax.swing.JTextField();
        jTextField238 = new javax.swing.JTextField();
        jTextField239 = new javax.swing.JTextField();
        jTextField240 = new javax.swing.JTextField();
        jTextField241 = new javax.swing.JTextField();
        jTextField242 = new javax.swing.JTextField();
        jPanel73 = new javax.swing.JPanel();
        jPanelGrafica01 = new javax.swing.JPanel();
        jPanelGrafica02 = new javax.swing.JPanel();
        jPanelGrafica03 = new javax.swing.JPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("VORE-SERNOVEN");
        setPreferredSize(new java.awt.Dimension(1660, 1024));

        jPanel3.setBackground(new java.awt.Color(204, 204, 204));
        jPanel3.setMaximumSize(new java.awt.Dimension(1600, 800));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1074, Short.MAX_VALUE)
        );

        jPanel2.setBackground(new java.awt.Color(204, 204, 204));
        jPanel2.setMaximumSize(new java.awt.Dimension(240, 322));

        jScrollPane1.setViewportView(arbol);

        jTabbedPane1.setMaximumSize(new java.awt.Dimension(1500, 900));
        jTabbedPane1.setPreferredSize(new java.awt.Dimension(1500, 892));

        jPanel4.setPreferredSize(new java.awt.Dimension(1600, 864));

        jPanel8.setBackground(new java.awt.Color(204, 204, 204));
        jPanel8.setPreferredSize(new java.awt.Dimension(1400, 120));

        jLabel2.setText("NOMBRE ");

        jLabel3.setText("CUPS");

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jLabel4.setText("CIF");

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane2.setViewportView(jTextArea1);

        jLabel16.setText("DIRECCIÓN");

        jButton5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ventana/IconoBusquedaPequeño_16x16.png"))); // NOI18N
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jLabel81.setText("BLOQUE");

        jTextField59.setText("0");

        jCheckBox1.setText("BATERIA DE CONDENSADORES");

        jButton11.setText("MODIFICAR");
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });

        jTextField264.setText("0");

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(jLabel16)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField10, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 48, Short.MAX_VALUE)
                        .addComponent(jLabel81, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField59, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton11))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel8Layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(62, 62, 62))
                            .addGroup(jPanel8Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(18, 18, 18)
                                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel8Layout.createSequentialGroup()
                                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel8Layout.createSequentialGroup()
                                        .addComponent(jTextField1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jTextField58, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))))
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel8Layout.createSequentialGroup()
                                .addGap(4, 4, 4)
                                .addComponent(jTextField264, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(15, 15, 15)
                                .addComponent(jLabel4)
                                .addGap(18, 18, 18)
                                .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jCheckBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 327, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(47, Short.MAX_VALUE))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap(14, Short.MAX_VALUE)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4)
                            .addComponent(jTextField58, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField264, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel8Layout.createSequentialGroup()
                                .addComponent(jCheckBox1)
                                .addGap(14, 14, 14)
                                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel16)
                                    .addComponent(jTextField10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButton11)
                                    .addComponent(jLabel81)
                                    .addComponent(jTextField59, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButton5))
                                .addComponent(jLabel3)))))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        PDEntrada20A.setMaximumSize(new java.awt.Dimension(530, 370));

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel7.setText("DATOS DE ENTRADA FACTURA");

        jLabel14.setFont(new java.awt.Font("Tahoma", 0, 8)); // NOI18N
        jLabel14.setText("DIAS DE CÁLCULO");

        jTextField9.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jTextField9.setText(" ");

        jLabel80.setFont(new java.awt.Font("Tahoma", 0, 8)); // NOI18N
        jLabel80.setText("DIAS FACTURACIÓN OPT");

        jTextField60.setBackground(new java.awt.Color(204, 255, 204));
        jTextField60.setText("FACTURA TRAS EL CAMBIO");
        jTextField60.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField60ActionPerformed(evt);
            }
        });

        jPanel24.setBackground(new java.awt.Color(204, 204, 204));

        botonCalculo.setText("CALCULO PRELIMINAR");
        botonCalculo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonCalculoActionPerformed(evt);
            }
        });

        botonBorrarCampos.setText("BORRAR CAMPOS");
        botonBorrarCampos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonBorrarCamposActionPerformed(evt);
            }
        });

        botonDetalles.setText("DETALLES DE CÁLCULO");
        botonDetalles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonDetallesActionPerformed(evt);
            }
        });

        botonValidar.setText("VALIDAR");
        botonValidar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonValidarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel24Layout = new javax.swing.GroupLayout(jPanel24);
        jPanel24.setLayout(jPanel24Layout);
        jPanel24Layout.setHorizontalGroup(
            jPanel24Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel24Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel24Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(botonCalculo, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(botonBorrarCampos, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(botonDetalles, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(botonValidar, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel24Layout.setVerticalGroup(
            jPanel24Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel24Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(botonCalculo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(botonBorrarCampos)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(botonDetalles)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(botonValidar)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTextField65.setBackground(new java.awt.Color(255, 255, 204));
        jTextField65.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N

        jTextField66.setBackground(new java.awt.Color(255, 255, 204));
        jTextField66.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N

        jLabel92.setText("1");

        jLabel93.setText("2");

        jTextField68.setBackground(new java.awt.Color(255, 255, 204));
        jTextField68.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N

        jTextField67.setBackground(new java.awt.Color(255, 255, 204));
        jTextField67.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N

        jTextField69.setBackground(new java.awt.Color(255, 255, 204));
        jTextField69.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N

        jTextField70.setBackground(new java.awt.Color(255, 255, 204));
        jTextField70.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N

        jLabel94.setText("3");

        jLabel95.setText("4");

        jTextField72.setBackground(new java.awt.Color(255, 255, 204));
        jTextField72.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N

        jTextField71.setBackground(new java.awt.Color(255, 255, 204));
        jTextField71.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N

        jLabel90.setForeground(new java.awt.Color(153, 153, 153));
        jLabel90.setText("dd-mm-aaaa");

        jLabel91.setForeground(new java.awt.Color(153, 153, 153));
        jLabel91.setText("dd-mm-aaaa");

        javax.swing.GroupLayout jPanel25Layout = new javax.swing.GroupLayout(jPanel25);
        jPanel25.setLayout(jPanel25Layout);
        jPanel25Layout.setHorizontalGroup(
            jPanel25Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel25Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel25Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel25Layout.createSequentialGroup()
                        .addComponent(jTextField65, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField66, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel92))
                    .addGroup(jPanel25Layout.createSequentialGroup()
                        .addGroup(jPanel25Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTextField69)
                            .addComponent(jTextField67, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel25Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel25Layout.createSequentialGroup()
                                .addComponent(jTextField70)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel94))
                            .addGroup(jPanel25Layout.createSequentialGroup()
                                .addComponent(jTextField68, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel93))))
                    .addGroup(jPanel25Layout.createSequentialGroup()
                        .addComponent(jLabel90)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel91))
                    .addGroup(jPanel25Layout.createSequentialGroup()
                        .addComponent(jTextField71, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField72, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel95)))
                .addContainerGap(29, Short.MAX_VALUE))
        );
        jPanel25Layout.setVerticalGroup(
            jPanel25Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel25Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel25Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel90)
                    .addComponent(jLabel91))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel25Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField65, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField66, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel92))
                .addGap(10, 10, 10)
                .addGroup(jPanel25Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField67, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField68, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel93))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel25Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField69, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField70, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel94))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel25Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField71, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField72, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel95))
                .addGap(36, 36, 36))
        );

        jLabel105.setText("P1");

        jLabel106.setText("P2");

        jLabel107.setText("P3");

        jTextField77.setBackground(new java.awt.Color(204, 255, 204));

        jTextField78.setBackground(new java.awt.Color(204, 255, 204));

        jTextField79.setBackground(new java.awt.Color(204, 255, 204));

        jLabel108.setText("kW");

        jLabel109.setText("kW");

        jLabel110.setText("kW");

        jComboBox7.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Potencia de maxímetro", "Potencia facturada" }));
        jComboBox7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox7ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel27Layout = new javax.swing.GroupLayout(jPanel27);
        jPanel27.setLayout(jPanel27Layout);
        jPanel27Layout.setHorizontalGroup(
            jPanel27Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel27Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel27Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel27Layout.createSequentialGroup()
                        .addComponent(jLabel105)
                        .addGap(18, 18, 18)
                        .addComponent(jTextField77, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel27Layout.createSequentialGroup()
                        .addComponent(jLabel106)
                        .addGap(18, 18, 18)
                        .addComponent(jTextField78))
                    .addGroup(jPanel27Layout.createSequentialGroup()
                        .addComponent(jLabel107)
                        .addGap(18, 18, 18)
                        .addComponent(jTextField79)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel27Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel108)
                    .addComponent(jLabel109)
                    .addComponent(jLabel110))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel27Layout.createSequentialGroup()
                .addComponent(jComboBox7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel27Layout.setVerticalGroup(
            jPanel27Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel27Layout.createSequentialGroup()
                .addComponent(jComboBox7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addGroup(jPanel27Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel105)
                    .addComponent(jTextField77, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel108))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel27Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel106)
                    .addComponent(jTextField78, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel109))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel27Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel107)
                    .addComponent(jTextField79, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel110))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jPanel28.setBackground(new java.awt.Color(204, 204, 204));

        jLabel50.setText("AHORRO");

        jLabel51.setText("COSTE ACTUAL (E+P)");

        jLabel66.setText("COSTE SIMULADO");

        jLabel69.setText("AHORRO TOTAL");

        jLabel114.setText("BASE IMPONIBLE");

        javax.swing.GroupLayout jPanel28Layout = new javax.swing.GroupLayout(jPanel28);
        jPanel28.setLayout(jPanel28Layout);
        jPanel28Layout.setHorizontalGroup(
            jPanel28Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel28Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel28Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel28Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(jPanel28Layout.createSequentialGroup()
                            .addGroup(jPanel28Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jLabel66, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel51, javax.swing.GroupLayout.DEFAULT_SIZE, 108, Short.MAX_VALUE)
                                .addComponent(jLabel50, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                        .addGroup(jPanel28Layout.createSequentialGroup()
                            .addComponent(jLabel69, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGap(6, 6, 6)))
                    .addGroup(jPanel28Layout.createSequentialGroup()
                        .addComponent(jLabel114)
                        .addGap(30, 30, 30)))
                .addGroup(jPanel28Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextField82, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel28Layout.createSequentialGroup()
                        .addComponent(jTextField30, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextField47, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jTextField15, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField27, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 10, Short.MAX_VALUE))
        );
        jPanel28Layout.setVerticalGroup(
            jPanel28Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel28Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel28Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel50)
                    .addComponent(jTextField30, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField47, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel28Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel51)
                    .addComponent(jTextField15, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel28Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel66)
                    .addComponent(jTextField27, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel28Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel69)
                    .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel28Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel114)
                    .addComponent(jTextField82, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(31, Short.MAX_VALUE))
        );

        jTextField41.setEditable(false);

        jTextField46.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField46ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel29Layout = new javax.swing.GroupLayout(jPanel29);
        jPanel29.setLayout(jPanel29Layout);
        jPanel29Layout.setHorizontalGroup(
            jPanel29Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel29Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTextField44, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jTextField41, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jTextField42, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField43, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField46, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jTextField45, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(37, Short.MAX_VALUE))
        );
        jPanel29Layout.setVerticalGroup(
            jPanel29Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel29Layout.createSequentialGroup()
                .addGroup(jPanel29Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField44, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField41, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField42, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField43, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField46, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField45, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 11, Short.MAX_VALUE))
        );

        jPanel31.setBackground(new java.awt.Color(204, 204, 204));

        jLabel11.setText("FECHA CALCULO");

        jLabel12.setText("FECHA INICIO PERIODO ");

        jLabel13.setText("FECHA FIN PERIODO");

        jTextField6.setBackground(new java.awt.Color(204, 255, 204));
        jTextField6.setText("01-06-2015");
        jTextField6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField6ActionPerformed(evt);
            }
        });

        jTextField7.setBackground(new java.awt.Color(204, 255, 204));
        jTextField7.setText("24-03-2015");

        jTextField8.setBackground(new java.awt.Color(204, 255, 204));
        jTextField8.setText("24-04-2015");

        jButton14.setText("1");
        jButton14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton14ActionPerformed(evt);
            }
        });

        jButton15.setText("2");
        jButton15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton15ActionPerformed(evt);
            }
        });

        jButton16.setText("3");
        jButton16.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton16ActionPerformed(evt);
            }
        });

        jButton17.setText("4");
        jButton17.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton17ActionPerformed(evt);
            }
        });

        jLabel46.setForeground(new java.awt.Color(153, 153, 153));
        jLabel46.setText("dd-mm-aaaa");

        jLabel38.setForeground(new java.awt.Color(153, 153, 153));
        jLabel38.setText("dd-mm-aaaa");

        jLabel37.setForeground(new java.awt.Color(153, 153, 153));
        jLabel37.setText("dd-mm-aaaa");

        jLabel82.setText("ALQUILER");

        jTextField80.setBackground(new java.awt.Color(204, 255, 204));
        jTextField80.setText("0");

        jLabel111.setForeground(new java.awt.Color(153, 153, 153));
        jLabel111.setText("€");

        javax.swing.GroupLayout jPanel31Layout = new javax.swing.GroupLayout(jPanel31);
        jPanel31.setLayout(jPanel31Layout);
        jPanel31Layout.setHorizontalGroup(
            jPanel31Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel31Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel31Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel31Layout.createSequentialGroup()
                        .addComponent(jButton14)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton15)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton16)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton17))
                    .addGroup(jPanel31Layout.createSequentialGroup()
                        .addGroup(jPanel31Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel82, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel12, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel11, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel13, javax.swing.GroupLayout.Alignment.LEADING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel31Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel31Layout.createSequentialGroup()
                                .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel46))
                            .addGroup(jPanel31Layout.createSequentialGroup()
                                .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel38))
                            .addGroup(jPanel31Layout.createSequentialGroup()
                                .addGroup(jPanel31Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jTextField80, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jTextField8, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 84, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel31Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel37)
                                    .addComponent(jLabel111, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel31Layout.setVerticalGroup(
            jPanel31Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel31Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel31Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel46))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel31Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel38))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel31Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(jTextField8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel37))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel31Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel82)
                    .addComponent(jTextField80, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel111))
                .addGap(18, 18, 18)
                .addGroup(jPanel31Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton14, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton15, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton16, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton17, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        jPanel44.setBackground(new java.awt.Color(204, 204, 204));

        jLabel144.setFont(new java.awt.Font("Tahoma", 0, 9)); // NOI18N
        jLabel144.setText("POTENCIAS FACTURADAS kW");

        jLabel156.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel156.setText("ACTUAL");

        jTextField113.setText(" ");

        jLabel153.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel153.setText("SIMUL.");

        javax.swing.GroupLayout jPanel44Layout = new javax.swing.GroupLayout(jPanel44);
        jPanel44.setLayout(jPanel44Layout);
        jPanel44Layout.setHorizontalGroup(
            jPanel44Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel44Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel44Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(jPanel44Layout.createSequentialGroup()
                        .addComponent(jLabel156, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel153)
                        .addGap(31, 31, 31))
                    .addGroup(jPanel44Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel144)
                        .addGroup(jPanel44Layout.createSequentialGroup()
                            .addGroup(jPanel44Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jTextField108, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 62, Short.MAX_VALUE)
                                .addComponent(jTextField107, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jTextField106, javax.swing.GroupLayout.Alignment.LEADING))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(jPanel44Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jTextField113)
                                .addComponent(jTextField114)
                                .addComponent(jTextField115, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel44Layout.setVerticalGroup(
            jPanel44Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel44Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel144)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel44Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel156)
                    .addComponent(jLabel153))
                .addGap(18, 18, 18)
                .addGroup(jPanel44Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField106, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField113, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel44Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField107, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField114, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel44Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField108, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField115, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel45.setBackground(new java.awt.Color(204, 204, 255));

        jLabel145.setText("REACTIVA");

        jTextField109.setBackground(new java.awt.Color(204, 255, 204));
        jTextField109.setText("0");

        jLabel146.setText("P1");

        jTextField110.setBackground(new java.awt.Color(204, 255, 204));
        jTextField110.setText("0");

        jLabel147.setText("P2");

        jLabel148.setText("kVAr");

        javax.swing.GroupLayout jPanel45Layout = new javax.swing.GroupLayout(jPanel45);
        jPanel45.setLayout(jPanel45Layout);
        jPanel45Layout.setHorizontalGroup(
            jPanel45Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel45Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel145)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel45Layout.createSequentialGroup()
                .addGroup(jPanel45Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jTextField110, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 51, Short.MAX_VALUE)
                    .addComponent(jTextField109, javax.swing.GroupLayout.Alignment.LEADING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel45Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel45Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel146))
                    .addGroup(jPanel45Layout.createSequentialGroup()
                        .addComponent(jLabel147)
                        .addGap(0, 0, Short.MAX_VALUE))))
            .addGroup(jPanel45Layout.createSequentialGroup()
                .addComponent(jLabel148)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel45Layout.setVerticalGroup(
            jPanel45Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel45Layout.createSequentialGroup()
                .addComponent(jLabel145)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel45Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField109, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel146))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel45Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField110, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel147))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel148)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jPanel48.setBackground(new java.awt.Color(204, 204, 255));

        jLabel161.setText("REACt. SIM");

        jTextField121.setText("0");

        jLabel162.setText("P1");

        jTextField122.setText("0");

        jLabel163.setText("P2");

        jLabel164.setText("kVAr");

        jTextField123.setText("0");

        javax.swing.GroupLayout jPanel48Layout = new javax.swing.GroupLayout(jPanel48);
        jPanel48.setLayout(jPanel48Layout);
        jPanel48Layout.setHorizontalGroup(
            jPanel48Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel48Layout.createSequentialGroup()
                .addGroup(jPanel48Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel48Layout.createSequentialGroup()
                        .addGroup(jPanel48Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel48Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel161))
                            .addGroup(jPanel48Layout.createSequentialGroup()
                                .addGroup(jPanel48Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jTextField122, javax.swing.GroupLayout.DEFAULT_SIZE, 45, Short.MAX_VALUE)
                                    .addComponent(jTextField121))
                                .addGap(14, 14, 14)
                                .addGroup(jPanel48Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel162)
                                    .addComponent(jLabel163)))
                            .addComponent(jLabel164))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jTextField123))
                .addContainerGap())
        );
        jPanel48Layout.setVerticalGroup(
            jPanel48Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel48Layout.createSequentialGroup()
                .addComponent(jLabel161)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel48Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField121, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel162))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel48Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField122, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel163))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel164)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField123, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jLabel112.setText("BASE IMPONIBLE");

        jTextField81.setBackground(new java.awt.Color(204, 255, 204));
        jTextField81.setText("0");

        jLabel113.setText("€");

        jLabel117.setText("PENA. REACTIVA ");

        jTextField85.setBackground(new java.awt.Color(204, 255, 204));
        jTextField85.setText("0");

        jLabel118.setText("€");

        jTextField126.setBackground(new java.awt.Color(204, 255, 204));
        jTextField126.setText("0");

        jLabel172.setText("€");

        jLabel173.setText("BONIFIC. IE");

        javax.swing.GroupLayout jPanel49Layout = new javax.swing.GroupLayout(jPanel49);
        jPanel49.setLayout(jPanel49Layout);
        jPanel49Layout.setHorizontalGroup(
            jPanel49Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel49Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel49Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel49Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(jPanel49Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextField85, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel49Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jTextField81, javax.swing.GroupLayout.DEFAULT_SIZE, 73, Short.MAX_VALUE)
                                .addComponent(jLabel173)
                                .addComponent(jTextField126)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel49Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel49Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(jPanel49Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel113, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel118, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel49Layout.createSequentialGroup()
                                .addComponent(jLabel172)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(jPanel49Layout.createSequentialGroup()
                        .addGroup(jPanel49Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel117)
                            .addGroup(jPanel49Layout.createSequentialGroup()
                                .addGap(3, 3, 3)
                                .addComponent(jLabel112)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel49Layout.setVerticalGroup(
            jPanel49Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel49Layout.createSequentialGroup()
                .addComponent(jLabel112)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel49Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel113)
                    .addComponent(jTextField81))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel173)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel49Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField126, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel172))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel117)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel49Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel118)
                    .addComponent(jTextField85, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        jComboBox8.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "ENERGIA FACTURADA", "ENERGÍA SIMULADA" }));
        jComboBox8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox8ActionPerformed(evt);
            }
        });

        jLayeredPane1.setBackground(new java.awt.Color(255, 204, 255));

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel6.setText(" P1");

        jLabel21.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel21.setText(" P2");

        jLabel25.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel25.setText(" P3");

        jLabel100.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel100.setText(" DE PEAJE");

        energiaP1.setBackground(new java.awt.Color(204, 255, 204));
        energiaP1.setText(" ");

        energiaP2.setBackground(new java.awt.Color(204, 255, 204));

        energiaP3.setBackground(new java.awt.Color(204, 255, 204));

        jTextField75.setMinimumSize(new java.awt.Dimension(84, 20));

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 8)); // NOI18N
        jLabel8.setText("kWh");

        jLabel26.setFont(new java.awt.Font("Tahoma", 0, 8)); // NOI18N
        jLabel26.setText("kWh");

        jLabel27.setFont(new java.awt.Font("Tahoma", 0, 8)); // NOI18N
        jLabel27.setText("kWh");

        jLabel101.setFont(new java.awt.Font("Tahoma", 0, 8)); // NOI18N
        jLabel101.setText("kWh");

        javax.swing.GroupLayout jPanel26Layout = new javax.swing.GroupLayout(jPanel26);
        jPanel26.setLayout(jPanel26Layout);
        jPanel26Layout.setHorizontalGroup(
            jPanel26Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel26Layout.createSequentialGroup()
                .addGroup(jPanel26Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel26Layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(jLabel100, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jLabel25, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel26Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextField75, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(energiaP3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel26Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel101)
                    .addComponent(jLabel27))
                .addGap(62, 62, 62))
            .addGroup(jPanel26Layout.createSequentialGroup()
                .addGroup(jPanel26Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel21, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel26Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(energiaP1, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(energiaP2, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel26Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8)
                    .addComponent(jLabel26))
                .addGap(64, 64, 64))
        );
        jPanel26Layout.setVerticalGroup(
            jPanel26Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel26Layout.createSequentialGroup()
                .addGroup(jPanel26Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(energiaP1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel26Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel21)
                    .addComponent(energiaP2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel26))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel26Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel25, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(energiaP3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel27))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel26Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel26Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jTextField75, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel101))
                    .addComponent(jLabel100))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jPanel50.setBackground(new java.awt.Color(204, 204, 255));

        jLabel103.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel103.setText(" P1 sim.");

        jLabel104.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel104.setText(" P2 sim.");

        jLabel165.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel165.setText(" P3 sim.");

        jLabel166.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel166.setText(" DE PEAJE");

        energiaP1s.setBackground(new java.awt.Color(204, 255, 204));
        energiaP1s.setText(" ");

        energiaP2s.setBackground(new java.awt.Color(204, 255, 204));

        energiaP3s.setBackground(new java.awt.Color(204, 255, 204));

        jTextField124.setMinimumSize(new java.awt.Dimension(84, 20));

        jLabel167.setFont(new java.awt.Font("Tahoma", 0, 8)); // NOI18N
        jLabel167.setText("kWh");

        jLabel168.setFont(new java.awt.Font("Tahoma", 0, 8)); // NOI18N
        jLabel168.setText("kWh");

        jLabel169.setFont(new java.awt.Font("Tahoma", 0, 8)); // NOI18N
        jLabel169.setText("kWh");

        jLabel170.setFont(new java.awt.Font("Tahoma", 0, 8)); // NOI18N
        jLabel170.setText("kWh");

        javax.swing.GroupLayout jPanel50Layout = new javax.swing.GroupLayout(jPanel50);
        jPanel50.setLayout(jPanel50Layout);
        jPanel50Layout.setHorizontalGroup(
            jPanel50Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel50Layout.createSequentialGroup()
                .addGroup(jPanel50Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel50Layout.createSequentialGroup()
                        .addGroup(jPanel50Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel50Layout.createSequentialGroup()
                                .addGap(2, 2, 2)
                                .addComponent(jLabel166, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jLabel165, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel50Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel50Layout.createSequentialGroup()
                                .addComponent(jTextField124, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel170))
                            .addGroup(jPanel50Layout.createSequentialGroup()
                                .addComponent(energiaP3s, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel169))))
                    .addGroup(jPanel50Layout.createSequentialGroup()
                        .addGroup(jPanel50Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel104, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel103, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel50Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel50Layout.createSequentialGroup()
                                .addComponent(energiaP1s, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel167))
                            .addGroup(jPanel50Layout.createSequentialGroup()
                                .addComponent(energiaP2s, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel168)))))
                .addGap(72, 72, 72))
        );
        jPanel50Layout.setVerticalGroup(
            jPanel50Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel50Layout.createSequentialGroup()
                .addGap(1, 1, 1)
                .addGroup(jPanel50Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel103)
                    .addComponent(energiaP1s, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel167))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel50Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel104)
                    .addComponent(energiaP2s, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel168))
                .addGap(4, 4, 4)
                .addGroup(jPanel50Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel165, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(energiaP3s, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel169))
                .addGap(4, 4, 4)
                .addGroup(jPanel50Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel50Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jTextField124, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel170))
                    .addComponent(jLabel166))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLayeredPane1.setLayer(jPanel26, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(jPanel50, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jLayeredPane1Layout = new javax.swing.GroupLayout(jLayeredPane1);
        jLayeredPane1.setLayout(jLayeredPane1Layout);
        jLayeredPane1Layout.setHorizontalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel50, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel26, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jLayeredPane1Layout.setVerticalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addComponent(jPanel26, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jLayeredPane1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jPanel50, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout PDEntrada20ALayout = new javax.swing.GroupLayout(PDEntrada20A);
        PDEntrada20A.setLayout(PDEntrada20ALayout);
        PDEntrada20ALayout.setHorizontalGroup(
            PDEntrada20ALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PDEntrada20ALayout.createSequentialGroup()
                .addGroup(PDEntrada20ALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PDEntrada20ALayout.createSequentialGroup()
                        .addComponent(jComboBox8, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(46, 46, 46))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PDEntrada20ALayout.createSequentialGroup()
                        .addComponent(jLayeredPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)))
                .addComponent(jPanel27, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel45, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel48, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel49, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(PDEntrada20ALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PDEntrada20ALayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jTextField39, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel29, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addGroup(PDEntrada20ALayout.createSequentialGroup()
                .addGroup(PDEntrada20ALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PDEntrada20ALayout.createSequentialGroup()
                        .addGap(203, 203, 203)
                        .addComponent(jTextField60, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 266, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(PDEntrada20ALayout.createSequentialGroup()
                        .addComponent(jPanel31, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(PDEntrada20ALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(PDEntrada20ALayout.createSequentialGroup()
                                .addComponent(jTextField9, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(PDEntrada20ALayout.createSequentialGroup()
                                .addComponent(jTextField40, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel80)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel25, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(PDEntrada20ALayout.createSequentialGroup()
                        .addComponent(jPanel28, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel44, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel24, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        PDEntrada20ALayout.setVerticalGroup(
            PDEntrada20ALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PDEntrada20ALayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(PDEntrada20ALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PDEntrada20ALayout.createSequentialGroup()
                        .addGroup(PDEntrada20ALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(jTextField60, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(PDEntrada20ALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(PDEntrada20ALayout.createSequentialGroup()
                                .addGap(25, 25, 25)
                                .addGroup(PDEntrada20ALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jTextField9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel14))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(PDEntrada20ALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jTextField40, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel80)))
                            .addGroup(PDEntrada20ALayout.createSequentialGroup()
                                .addGap(1, 1, 1)
                                .addComponent(jPanel31, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(jPanel25, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(PDEntrada20ALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel45, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel48, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel49, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel27, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(PDEntrada20ALayout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addComponent(jPanel29, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField39, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(PDEntrada20ALayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jComboBox8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLayeredPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(PDEntrada20ALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel28, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel24, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel44, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        jPanel10.setBackground(new java.awt.Color(204, 204, 204));
        jPanel10.setMaximumSize(new java.awt.Dimension(581, 286));
        jPanel10.setPreferredSize(new java.awt.Dimension(581, 286));

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel10.setText("CONDICIONES DE CONTRATACIÓN DE SIMULACIÓN");

        jLabel49.setText("FECHA CAMBIO");

        jTextField29.setText("dd-mm-aaaa");

        jLabel55.setText("COMERCIALIZADORA");

        botonValidarSim.setText("VALIDAR");
        botonValidarSim.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonValidarSimActionPerformed(evt);
            }
        });

        jComboBox4.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Seleccionar....", "TARIFA 2.0 A", "TARIFA 2.0 ADH", "TARIFA 2.1 A", "TARIFA 2.1 ADH", "TARIFA 3.0 A", "TARIFA 3.1 A", "TARIFA 6.1 A", "TARIFA 2.0 DHA INDX", "TARIFA 2.1 DHA INDX", "TARIFA 3.0 A INDX", "TARIFA 2.0  INDX", "TARIFA 2.1  INDX", "TARIFA 3.1 A INDX" }));
        jComboBox4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jComboBox4MouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jComboBox4MousePressed(evt);
            }
        });
        jComboBox4.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
                jComboBox4PopupMenuWillBecomeVisible(evt);
            }
        });
        jComboBox4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel55, javax.swing.GroupLayout.DEFAULT_SIZE, 130, Short.MAX_VALUE)
                            .addComponent(jLabel49, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextField29, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel10Layout.createSequentialGroup()
                                .addComponent(jTextField34, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(26, 26, 26)
                                .addComponent(jComboBox4, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(botonValidarSim)
                        .addGap(40, 40, 40))))
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(botonValidarSim))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel55)
                    .addComponent(jTextField34, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField29, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel49))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jPanel30.setBackground(new java.awt.Color(204, 204, 204));

        jTextArea3.setBackground(new java.awt.Color(255, 255, 204));
        jTextArea3.setColumns(20);
        jTextArea3.setRows(5);
        jScrollPane4.setViewportView(jTextArea3);

        jLabel99.setText("€/kWh");

        jTextField74.setBackground(new java.awt.Color(204, 255, 204));
        jTextField74.setText("0");

        jLabel98.setText("PRECIO ENERGÍA DE PEAJE");

        jLabel45.setText("POTENCIA CONTRATADA");

        jLabel61.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel61.setText("P1");

        jTextField26.setText("0");
        jTextField26.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField26KeyTyped(evt);
            }
        });

        jLabel47.setText("kW");

        jLabel62.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel62.setText("P2");

        jTextField37.setText("0");
        jTextField37.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField37ActionPerformed(evt);
            }
        });
        jTextField37.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField37KeyTyped(evt);
            }
        });

        jLabel63.setText("kW");

        jLabel64.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel64.setText("P3");

        jTextField38.setText("0");
        jTextField38.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField38KeyTyped(evt);
            }
        });

        jLabel65.setText("kW");

        jLabel150.setText("Alquiler");

        jTextField112.setText("0");

        jLabel151.setText("€/dia");

        jCheckBox6.setText("Fact. Max");

        javax.swing.GroupLayout jPanel30Layout = new javax.swing.GroupLayout(jPanel30);
        jPanel30.setLayout(jPanel30Layout);
        jPanel30Layout.setHorizontalGroup(
            jPanel30Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel30Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel30Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 480, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel30Layout.createSequentialGroup()
                        .addGroup(jPanel30Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel30Layout.createSequentialGroup()
                                .addComponent(jLabel98)
                                .addGap(18, 18, 18)
                                .addComponent(jTextField74, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel99)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel150, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel30Layout.createSequentialGroup()
                                .addComponent(jLabel45)
                                .addGap(10, 10, 10)
                                .addComponent(jLabel61)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField26, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel47)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel62)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jTextField37, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel63)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel64)
                        .addGroup(jPanel30Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel30Layout.createSequentialGroup()
                                .addGap(34, 34, 34)
                                .addComponent(jTextField112, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel151))
                            .addGroup(jPanel30Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jTextField38, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel65)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jCheckBox6)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel30Layout.setVerticalGroup(
            jPanel30Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel30Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel30Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField26, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel47)
                    .addComponent(jLabel62)
                    .addComponent(jTextField37, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel63)
                    .addComponent(jLabel64)
                    .addComponent(jTextField38, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel65)
                    .addComponent(jCheckBox6)
                    .addComponent(jLabel45)
                    .addComponent(jLabel61))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                .addGroup(jPanel30Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel99)
                    .addComponent(jTextField74, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel98)
                    .addComponent(jLabel150)
                    .addComponent(jTextField112, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel151))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel32.setBackground(new java.awt.Color(204, 204, 204));

        jLabel31.setText("PRECIO €/kWh P1");

        jTextField20.setBackground(new java.awt.Color(255, 255, 204));
        jTextField20.setText("0");
        jTextField20.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField20KeyTyped(evt);
            }
        });

        jLabel32.setText("PRECIO €/kWh P2");

        jTextField21.setBackground(new java.awt.Color(255, 255, 204));
        jTextField21.setText("0");
        jTextField21.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField21KeyTyped(evt);
            }
        });

        jLabel33.setText("PRECIO €/kWh P3");

        jTextField22.setBackground(new java.awt.Color(255, 255, 204));
        jTextField22.setText("0");
        jTextField22.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField22ActionPerformed(evt);
            }
        });
        jTextField22.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField22KeyTyped(evt);
            }
        });

        javax.swing.GroupLayout jPanel32Layout = new javax.swing.GroupLayout(jPanel32);
        jPanel32.setLayout(jPanel32Layout);
        jPanel32Layout.setHorizontalGroup(
            jPanel32Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel32Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel32Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel32Layout.createSequentialGroup()
                        .addGroup(jPanel32Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel32, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                            .addComponent(jLabel33, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel32Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTextField21, javax.swing.GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE)
                            .addComponent(jTextField22)))
                    .addGroup(jPanel32Layout.createSequentialGroup()
                        .addComponent(jLabel31, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextField20, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel32Layout.setVerticalGroup(
            jPanel32Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel32Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel32Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel31)
                    .addComponent(jTextField20, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel32Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel32, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField21, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel32Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel33)
                    .addComponent(jTextField22, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel33.setBackground(new java.awt.Color(204, 204, 204));

        jLabel39.setText("PRECIO KW/DIA P1");

        jTextField23.setBackground(new java.awt.Color(255, 255, 204));
        jTextField23.setText("0");
        jTextField23.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField23KeyTyped(evt);
            }
        });

        jLabel40.setText("PRECIO KW/DIA P2");

        jLabel41.setText("PRECIO KW/DIA P3");

        jTextField24.setBackground(new java.awt.Color(255, 255, 204));
        jTextField24.setText("0");
        jTextField24.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField24ActionPerformed(evt);
            }
        });
        jTextField24.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField24KeyTyped(evt);
            }
        });

        jTextField25.setBackground(new java.awt.Color(255, 255, 204));
        jTextField25.setText("0");
        jTextField25.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField25KeyTyped(evt);
            }
        });

        jLabel42.setText("€");

        jLabel43.setText("€");

        jLabel44.setText("€");

        javax.swing.GroupLayout jPanel33Layout = new javax.swing.GroupLayout(jPanel33);
        jPanel33.setLayout(jPanel33Layout);
        jPanel33Layout.setHorizontalGroup(
            jPanel33Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel33Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel33Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabel41, javax.swing.GroupLayout.DEFAULT_SIZE, 110, Short.MAX_VALUE)
                    .addComponent(jLabel40, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel39, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel33Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel33Layout.createSequentialGroup()
                        .addComponent(jTextField23, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel42))
                    .addGroup(jPanel33Layout.createSequentialGroup()
                        .addComponent(jTextField24, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel43))
                    .addGroup(jPanel33Layout.createSequentialGroup()
                        .addComponent(jTextField25, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel44)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel33Layout.setVerticalGroup(
            jPanel33Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel33Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel33Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel39)
                    .addComponent(jTextField23, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel42))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel33Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel40)
                    .addComponent(jTextField24, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel43))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel33Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel33Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jTextField25, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel44))
                    .addComponent(jLabel41))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane7.setBackground(new java.awt.Color(204, 204, 204));

        tipoMedida.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "MEDIDA DIRECTA", "MEDIDA INDIRECTA" }));
        tipoMedida.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tipoMedidaActionPerformed(evt);
            }
        });

        tipoSuministro.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "CON CT", "SIN CT" }));
        tipoSuministro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tipoSuministroActionPerformed(evt);
            }
        });

        jLabel83.setText("INTENSIDAD DE TRAFOS");

        jTextField4.setText("50");

        jLabel5.setText("/");

        jTextField62.setText("5");

        jLabel88.setText("Máximo");

        jTextField61.setText("0");

        jLabel84.setText("A");

        javax.swing.GroupLayout jPanel46Layout = new javax.swing.GroupLayout(jPanel46);
        jPanel46.setLayout(jPanel46Layout);
        jPanel46Layout.setHorizontalGroup(
            jPanel46Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel46Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel46Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel46Layout.createSequentialGroup()
                        .addComponent(tipoMedida, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)
                        .addComponent(tipoSuministro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel83)
                    .addGroup(jPanel46Layout.createSequentialGroup()
                        .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 9, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField62, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel88)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField61, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel84)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel46Layout.setVerticalGroup(
            jPanel46Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel46Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(jPanel46Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tipoMedida, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tipoSuministro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel83)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel46Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField61, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel84)
                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(jTextField62, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel88))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane7.addTab("TRAFOS", jPanel46);

        jLabel154.setText("Desde");

        jTextField116.setText("01-01-2000");

        jLabel155.setText("hasta");

        jTextField117.setText("01-01-2001");

        jLabel157.setText("Cos fi medio");

        jLabel158.setText("Descripcion:");

        jLabel159.setText("Punta");

        jLabel160.setText("Llano");

        javax.swing.GroupLayout jPanel47Layout = new javax.swing.GroupLayout(jPanel47);
        jPanel47.setLayout(jPanel47Layout);
        jPanel47Layout.setHorizontalGroup(
            jPanel47Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel47Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel47Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel47Layout.createSequentialGroup()
                        .addGroup(jPanel47Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel157)
                            .addComponent(jLabel154))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel47Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel47Layout.createSequentialGroup()
                                .addComponent(jTextField116, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel155)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jTextField117, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel47Layout.createSequentialGroup()
                                .addComponent(jTextField118, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel159)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jTextField120, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel160))))
                    .addGroup(jPanel47Layout.createSequentialGroup()
                        .addComponent(jLabel158)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField119, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(44, Short.MAX_VALUE))
        );
        jPanel47Layout.setVerticalGroup(
            jPanel47Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel47Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel47Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel154)
                    .addComponent(jTextField116, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel155)
                    .addComponent(jTextField117, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel47Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel157)
                    .addComponent(jTextField118, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel159)
                    .addComponent(jTextField120, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel160))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel47Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel158)
                    .addComponent(jTextField119, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane7.addTab("BATERIA DE CONDENSADORES", jPanel47);

        miBarra01.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        miBarra01.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        miBarra01.setAutoscrolls(true);

        miTabla01.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        miBarra01.setViewportView(miTabla01);

        jTabbedPane8.addTab("HISTORICO DE AHORRO", miBarra01);

        jScrollPane13.setViewportView(jTextPane1);

        jTabbedPane8.addTab(" NOTAS Y OBSERVACIONES", jScrollPane13);

        PCContrato.setBackground(new java.awt.Color(204, 204, 255));

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel9.setText("CONDICIONES DE CONTRATACIÓN ACTUALES");

        jLabel17.setText("FECHA FIN CONTRATO");

        jLabel18.setText("PRECIO  €/kWh P1");

        jTextField12.setBackground(new java.awt.Color(204, 255, 204));
        jTextField12.setText("0");
        jTextField12.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                jTextField12InputMethodTextChanged(evt);
            }
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
        });
        jTextField12.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField12KeyTyped(evt);
            }
        });

        jLabel19.setText("PRECIO €/ kWh P2");

        jTextField13.setBackground(new java.awt.Color(204, 255, 204));
        jTextField13.setText("0");
        jTextField13.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField13KeyTyped(evt);
            }
        });

        jLabel20.setText("PRECIO €/kWh P3");

        jTextField14.setBackground(new java.awt.Color(204, 255, 204));
        jTextField14.setText("0");
        jTextField14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField14ActionPerformed(evt);
            }
        });
        jTextField14.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField14KeyTyped(evt);
            }
        });

        jLabel22.setText("PRECIO KW/DIA P1");

        jLabel23.setText("PRECIO KW/DIA P2");

        jLabel24.setText("PRECIO KW/DIA P3");

        jTextField16.setBackground(new java.awt.Color(204, 255, 204));
        jTextField16.setText("0");
        jTextField16.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField16KeyTyped(evt);
            }
        });

        jTextField17.setBackground(new java.awt.Color(204, 255, 204));
        jTextField17.setText("0");
        jTextField17.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField17KeyTyped(evt);
            }
        });

        jTextField18.setBackground(new java.awt.Color(204, 255, 204));
        jTextField18.setText("0");
        jTextField18.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField18ActionPerformed(evt);
            }
        });
        jTextField18.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField18KeyTyped(evt);
            }
        });

        jLabel28.setText("€");

        jLabel29.setText("€");

        jLabel30.setText("€");

        jLabel34.setText("POTENCIA CONTRATADA");

        jTextField19.setBackground(new java.awt.Color(204, 255, 204));
        jTextField19.setText("0");
        jTextField19.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField19KeyTyped(evt);
            }
        });

        jLabel35.setText("kW");

        jLabel48.setText("FECHA CAMBIO");

        jLabel54.setText("COMERCIALIZADORA");

        jLabel56.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel56.setText("P1");

        jLabel57.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel57.setText("P2");

        jTextField35.setBackground(new java.awt.Color(204, 255, 204));
        jTextField35.setText("0");
        jTextField35.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField35KeyTyped(evt);
            }
        });

        jLabel58.setText("kW");

        jLabel59.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel59.setText("P3");

        jTextField36.setBackground(new java.awt.Color(204, 255, 204));
        jTextField36.setText("0");
        jTextField36.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField36KeyTyped(evt);
            }
        });

        jLabel60.setText("kW");

        jTextArea2.setBackground(new java.awt.Color(255, 255, 204));
        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jScrollPane3.setViewportView(jTextArea2);

        botonValidarCAct.setText("VALIDAR");
        botonValidarCAct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonValidarCActActionPerformed(evt);
            }
        });

        jComboBox3.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Seleccionar....", "TARIFA 2.0 A", "TARIFA 2.0 ADH", "TARIFA 2.1 A", "TARIFA 2.1 ADH", "TARIFA 3.0 A", "TARIFA 3.1 A", "TARIFA 6.1 A", "TARIFA 2.0 DHA INDX", "TARIFA 2.1 DHA INDX", "TARIFA 3.0 A INDX", "TARIFA 2.0  INDX", "TARIFA 2.1  INDX", "TARIFA 3.1 A INDX", "TARIFA 6.1 A INDX" }));
        jComboBox3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jComboBox3MouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jComboBox3MousePressed(evt);
            }
        });
        jComboBox3.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
                jComboBox3PopupMenuWillBecomeVisible(evt);
            }
        });
        jComboBox3.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox3ItemStateChanged(evt);
            }
        });
        jComboBox3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox3ActionPerformed(evt);
            }
        });
        jComboBox3.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jComboBox3FocusGained(evt);
            }
        });
        jComboBox3.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jComboBox3PropertyChange(evt);
            }
        });
        jComboBox3.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jComboBox3KeyTyped(evt);
            }
        });

        jLabel96.setText("PRECIO ENERGÍA DE PEAJE");

        jTextField73.setBackground(new java.awt.Color(204, 255, 204));
        jTextField73.setText("0");

        jLabel97.setText("€/kWh");

        jLabel149.setText("Alquiler");

        jTextField111.setText("0");

        jLabel152.setText("€/dia");

        jCheckBox5.setText("Fact. Max.");

        javax.swing.GroupLayout PCContratoLayout = new javax.swing.GroupLayout(PCContrato);
        PCContrato.setLayout(PCContratoLayout);
        PCContratoLayout.setHorizontalGroup(
            PCContratoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PCContratoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PCContratoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel9)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 480, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(PCContratoLayout.createSequentialGroup()
                        .addGroup(PCContratoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(PCContratoLayout.createSequentialGroup()
                                .addComponent(jLabel34)
                                .addGap(24, 24, 24)
                                .addComponent(jLabel56)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jTextField19, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel35)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel57)
                                .addGap(6, 6, 6)
                                .addComponent(jTextField35, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel58))
                            .addGroup(PCContratoLayout.createSequentialGroup()
                                .addComponent(jLabel96)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField73, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel97)
                                .addGap(48, 48, 48)
                                .addComponent(jLabel149)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(PCContratoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(PCContratoLayout.createSequentialGroup()
                                .addComponent(jTextField111, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel152))
                            .addGroup(PCContratoLayout.createSequentialGroup()
                                .addComponent(jLabel59)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField36, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel60)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jCheckBox5))))
                    .addGroup(PCContratoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(botonValidarCAct)
                        .addGroup(PCContratoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(PCContratoLayout.createSequentialGroup()
                                .addComponent(jLabel54, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jTextField33, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, PCContratoLayout.createSequentialGroup()
                                .addGroup(PCContratoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, PCContratoLayout.createSequentialGroup()
                                        .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jTextField14, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel24)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jTextField18, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, PCContratoLayout.createSequentialGroup()
                                        .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jTextField13, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel23)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jTextField17, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, PCContratoLayout.createSequentialGroup()
                                        .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jTextField12, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel22)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jTextField16, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, PCContratoLayout.createSequentialGroup()
                                        .addComponent(jLabel17)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jTextField11, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel48, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jTextField28, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(PCContratoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel29)
                                    .addComponent(jLabel28)
                                    .addComponent(jLabel30))))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        PCContratoLayout.setVerticalGroup(
            PCContratoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PCContratoLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(PCContratoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(botonValidarCAct))
                .addGap(4, 4, 4)
                .addGroup(PCContratoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel54)
                    .addComponent(jTextField33, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(PCContratoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17)
                    .addComponent(jTextField11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel48)
                    .addComponent(jTextField28, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(PCContratoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel18)
                    .addComponent(jTextField12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel22)
                    .addComponent(jTextField16, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel28))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(PCContratoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel19)
                    .addComponent(jTextField13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel23)
                    .addComponent(jTextField17, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel29))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(PCContratoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel20)
                    .addComponent(jTextField14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel24)
                    .addComponent(jTextField18, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel30))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(PCContratoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel34)
                    .addComponent(jTextField19, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel35)
                    .addComponent(jLabel56)
                    .addComponent(jLabel57)
                    .addComponent(jTextField35, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel58)
                    .addComponent(jLabel59)
                    .addComponent(jTextField36, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel60)
                    .addComponent(jCheckBox5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(PCContratoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel96)
                    .addComponent(jTextField73, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel97)
                    .addComponent(jLabel149)
                    .addComponent(jTextField111, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel152))
                .addGap(6, 6, 6)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23))
        );

        jTabbedPane11.addTab("2.X Y 3.X", PCContrato);

        jLabel238.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel238.setText("CONDICIONES DE CONTRATACIÓN ACTUALES");

        botonValidarCAct1.setText("VALIDAR");
        botonValidarCAct1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonValidarCAct1ActionPerformed(evt);
            }
        });

        jComboBox11.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jComboBox11.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Seleccionar....", "TARIFA 2.0 A", "TARIFA 2.0 ADH", "TARIFA 2.1 A", "TARIFA 2.1 ADH", "TARIFA 3.0 A", "TARIFA 3.1 A", "TARIFA 6.1 A", "TARIFA 2.0 DHA INDX", "TARIFA 2.1 DHA INDX", "TARIFA 3.0 A INDX", "TARIFA 2.0  INDX", "TARIFA 2.1  INDX", "TARIFA 3.1 A INDX", "TARIFA 6.1 A INDX" }));
        jComboBox11.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jComboBox11MouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jComboBox11MousePressed(evt);
            }
        });
        jComboBox11.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
                jComboBox11PopupMenuWillBecomeVisible(evt);
            }
        });
        jComboBox11.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox11ItemStateChanged(evt);
            }
        });
        jComboBox11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox11ActionPerformed(evt);
            }
        });
        jComboBox11.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jComboBox11FocusGained(evt);
            }
        });
        jComboBox11.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jComboBox11PropertyChange(evt);
            }
        });
        jComboBox11.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jComboBox11KeyTyped(evt);
            }
        });

        jTextField243.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N

        jLabel239.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel239.setText("COMERCIALIZADORA");

        jLabel240.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel240.setText("FECHA FIN CONTRATO");

        jTextField244.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N

        jLabel241.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel241.setText("FECHA CAMBIO");

        jTextField245.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N

        jLabel242.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel242.setText("PRECIO  €/kWh");

        jTextField246.setBackground(new java.awt.Color(204, 255, 204));
        jTextField246.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jTextField246.setText("0");
        jTextField246.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                jTextField246InputMethodTextChanged(evt);
            }
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
        });
        jTextField246.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField246KeyTyped(evt);
            }
        });

        jTextField247.setBackground(new java.awt.Color(204, 255, 204));
        jTextField247.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jTextField247.setText("0");
        jTextField247.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField247KeyTyped(evt);
            }
        });

        jLabel244.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel244.setText("POT. C. kW");

        jTextField248.setBackground(new java.awt.Color(204, 255, 204));
        jTextField248.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jTextField248.setText("0");
        jTextField248.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField248ActionPerformed(evt);
            }
        });
        jTextField248.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField248KeyTyped(evt);
            }
        });

        jLabel245.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel245.setText("POT.  €/kW·dia");

        jTextField249.setBackground(new java.awt.Color(204, 255, 204));
        jTextField249.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jTextField249.setText("0");
        jTextField249.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                jTextField249InputMethodTextChanged(evt);
            }
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
        });
        jTextField249.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField249KeyTyped(evt);
            }
        });

        jTextField250.setBackground(new java.awt.Color(204, 255, 204));
        jTextField250.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jTextField250.setText("0");
        jTextField250.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField250KeyTyped(evt);
            }
        });

        jTextField251.setBackground(new java.awt.Color(204, 255, 204));
        jTextField251.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jTextField251.setText("0");
        jTextField251.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField251ActionPerformed(evt);
            }
        });
        jTextField251.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField251KeyTyped(evt);
            }
        });

        jLabel248.setText(" P1");

        jLabel249.setText("P2");

        jLabel250.setText("P3");

        jLabel251.setText(" P4");

        jLabel252.setText("P5");

        jLabel253.setText("P6");

        jTextField252.setBackground(new java.awt.Color(204, 255, 204));
        jTextField252.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jTextField252.setText("0");
        jTextField252.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                jTextField252InputMethodTextChanged(evt);
            }
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
        });
        jTextField252.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField252KeyTyped(evt);
            }
        });

        jTextField253.setBackground(new java.awt.Color(204, 255, 204));
        jTextField253.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jTextField253.setText("0");
        jTextField253.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField253KeyTyped(evt);
            }
        });

        jTextField254.setBackground(new java.awt.Color(204, 255, 204));
        jTextField254.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jTextField254.setText("0");
        jTextField254.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField254ActionPerformed(evt);
            }
        });
        jTextField254.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField254KeyTyped(evt);
            }
        });

        jTextField255.setBackground(new java.awt.Color(204, 255, 204));
        jTextField255.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jTextField255.setText("0");
        jTextField255.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                jTextField255InputMethodTextChanged(evt);
            }
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
        });
        jTextField255.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField255KeyTyped(evt);
            }
        });

        jTextField256.setBackground(new java.awt.Color(204, 255, 204));
        jTextField256.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jTextField256.setText("0");
        jTextField256.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField256KeyTyped(evt);
            }
        });

        jTextField257.setBackground(new java.awt.Color(204, 255, 204));
        jTextField257.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jTextField257.setText("0");
        jTextField257.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField257ActionPerformed(evt);
            }
        });
        jTextField257.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField257KeyTyped(evt);
            }
        });

        jTextField258.setBackground(new java.awt.Color(204, 255, 204));
        jTextField258.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jTextField258.setText("0");
        jTextField258.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                jTextField258InputMethodTextChanged(evt);
            }
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
        });
        jTextField258.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField258KeyTyped(evt);
            }
        });

        jTextField259.setBackground(new java.awt.Color(204, 255, 204));
        jTextField259.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jTextField259.setText("0");
        jTextField259.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField259KeyTyped(evt);
            }
        });

        jTextField260.setBackground(new java.awt.Color(204, 255, 204));
        jTextField260.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jTextField260.setText("0");
        jTextField260.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField260ActionPerformed(evt);
            }
        });
        jTextField260.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField260KeyTyped(evt);
            }
        });

        jTextField261.setBackground(new java.awt.Color(204, 255, 204));
        jTextField261.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jTextField261.setText("0");
        jTextField261.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                jTextField261InputMethodTextChanged(evt);
            }
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
        });
        jTextField261.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField261KeyTyped(evt);
            }
        });

        jTextField262.setBackground(new java.awt.Color(204, 255, 204));
        jTextField262.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jTextField262.setText("0");
        jTextField262.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField262KeyTyped(evt);
            }
        });

        jTextField263.setBackground(new java.awt.Color(204, 255, 204));
        jTextField263.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jTextField263.setText("0");
        jTextField263.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField263ActionPerformed(evt);
            }
        });
        jTextField263.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField263KeyTyped(evt);
            }
        });

        jLabel243.setText("PRECIO ENERGÍA DE PEAJE");

        jTextField265.setBackground(new java.awt.Color(204, 255, 204));
        jTextField265.setText("0");

        jLabel246.setText("€/kWh");

        jLabel247.setText("Alquiler");

        jTextField266.setText("0");

        jLabel254.setText("€/dia");

        jCheckBox7.setText("Fact. Max.");

        jTextArea5.setBackground(new java.awt.Color(255, 255, 204));
        jTextArea5.setColumns(20);
        jTextArea5.setRows(5);
        jScrollPane16.setViewportView(jTextArea5);

        javax.swing.GroupLayout jPanel72Layout = new javax.swing.GroupLayout(jPanel72);
        jPanel72.setLayout(jPanel72Layout);
        jPanel72Layout.setHorizontalGroup(
            jPanel72Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel72Layout.createSequentialGroup()
                .addGroup(jPanel72Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel72Layout.createSequentialGroup()
                        .addGap(0, 10, Short.MAX_VALUE)
                        .addComponent(jLabel242, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextField246, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel72Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(jPanel72Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel240)
                            .addGroup(jPanel72Layout.createSequentialGroup()
                                .addComponent(jLabel248, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(8, 8, 8)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel72Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel72Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel243)
                            .addGroup(jPanel72Layout.createSequentialGroup()
                                .addGroup(jPanel72Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jLabel245, javax.swing.GroupLayout.DEFAULT_SIZE, 75, Short.MAX_VALUE)
                                    .addComponent(jLabel244, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel72Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jTextField249, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTextField258, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel72Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel72Layout.createSequentialGroup()
                        .addComponent(jTextField244, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel241, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextField245, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel72Layout.createSequentialGroup()
                        .addGroup(jPanel72Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel72Layout.createSequentialGroup()
                                .addGroup(jPanel72Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel72Layout.createSequentialGroup()
                                        .addGroup(jPanel72Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel72Layout.createSequentialGroup()
                                                .addComponent(jTextField247, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jTextField248, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jTextField252, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jTextField253, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel72Layout.createSequentialGroup()
                                                .addComponent(jLabel249, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(jLabel250, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(jLabel251, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(jLabel252, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                                    .addGroup(jPanel72Layout.createSequentialGroup()
                                        .addComponent(jTextField250, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jTextField251, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jTextField255, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jTextField256, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(4, 4, 4)))
                                .addGroup(jPanel72Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jTextField257, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel253, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTextField254, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel72Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel72Layout.createSequentialGroup()
                                    .addComponent(jTextField265, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jLabel246)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jLabel247)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jTextField266, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jLabel254)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jCheckBox7))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel72Layout.createSequentialGroup()
                                    .addComponent(jTextField259, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jTextField260, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jTextField261, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jTextField262, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jTextField263, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addContainerGap())))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel72Layout.createSequentialGroup()
                .addGap(0, 106, Short.MAX_VALUE)
                .addGroup(jPanel72Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(botonValidarCAct1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel72Layout.createSequentialGroup()
                        .addComponent(jLabel239, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextField243, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(17, 17, 17)
                        .addComponent(jComboBox11, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE))))
            .addGroup(jPanel72Layout.createSequentialGroup()
                .addGroup(jPanel72Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel72Layout.createSequentialGroup()
                        .addComponent(jLabel238)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel72Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane16)))
                .addContainerGap())
        );
        jPanel72Layout.setVerticalGroup(
            jPanel72Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel72Layout.createSequentialGroup()
                .addGroup(jPanel72Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel238)
                    .addComponent(botonValidarCAct1))
                .addGap(4, 4, 4)
                .addGroup(jPanel72Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel239)
                    .addComponent(jTextField243, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel72Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel72Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel240)
                        .addComponent(jTextField244, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel72Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel241)
                        .addComponent(jTextField245, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel72Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel248)
                    .addGroup(jPanel72Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel253)
                        .addComponent(jLabel252)
                        .addComponent(jLabel251)
                        .addComponent(jLabel250)
                        .addComponent(jLabel249)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel72Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField246, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField247, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField248, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField252, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField253, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField254, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel242))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel72Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel244, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField249, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField250, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField251, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField255, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField256, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField257, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel72Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel245)
                    .addComponent(jTextField258, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField259, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField260, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField261, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField262, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField263, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel72Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel243)
                    .addComponent(jTextField265, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel247)
                    .addComponent(jLabel246)
                    .addComponent(jTextField266, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel254)
                    .addComponent(jCheckBox7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 16, Short.MAX_VALUE)
                .addComponent(jScrollPane16, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jTabbedPane11.addTab("6.X", jPanel72);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, 939, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 361, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(93, Short.MAX_VALUE))
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jPanel32, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel33, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, 568, Short.MAX_VALUE)
                    .addComponent(jPanel30, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTabbedPane11, javax.swing.GroupLayout.DEFAULT_SIZE, 568, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTabbedPane8, javax.swing.GroupLayout.DEFAULT_SIZE, 672, Short.MAX_VALUE)
                    .addComponent(PDEntrada20A, javax.swing.GroupLayout.PREFERRED_SIZE, 672, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(157, 157, 157))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(459, 459, 459)
                .addComponent(jPanel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(2, 2, 2)
                .addComponent(jTabbedPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addComponent(jTabbedPane11, javax.swing.GroupLayout.PREFERRED_SIZE, 306, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel33, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanel32, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(PDEntrada20A, javax.swing.GroupLayout.PREFERRED_SIZE, 492, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel30, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTabbedPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(13, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("ENTRADA", jPanel4);

        miBarra03.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        miBarra03.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        miBarra03.setAutoscrolls(true);

        miTabla03.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        miBarra03.setViewportView(miTabla03);

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addComponent(miBarra03, javax.swing.GroupLayout.PREFERRED_SIZE, 1334, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addComponent(miBarra03, javax.swing.GroupLayout.PREFERRED_SIZE, 714, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 66, Short.MAX_VALUE))
        );

        jTabbedPane3.addTab("RESUMEN", jPanel12);

        miBarra04.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        miTabla04.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        miBarra04.setViewportView(miTabla04);

        javax.swing.GroupLayout jPanel13Layout = new javax.swing.GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addComponent(miBarra04, javax.swing.GroupLayout.PREFERRED_SIZE, 1334, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 19, Short.MAX_VALUE))
        );
        jPanel13Layout.setVerticalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addComponent(miBarra04, javax.swing.GroupLayout.PREFERRED_SIZE, 714, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 66, Short.MAX_VALUE))
        );

        jTabbedPane3.addTab("DETALLES", jPanel13);

        jLabel52.setText("FECHA DE CÁLCULO");

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "ULTIMO CÁLCULO", "SELECCIONAR FECHA" }));
        jComboBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox2ActionPerformed(evt);
            }
        });

        botonActualizaConsultaAnexo.setText("ACTUALIZAR CONSULTA");
        botonActualizaConsultaAnexo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonActualizaConsultaAnexoActionPerformed(evt);
            }
        });

        jLabel53.setForeground(new java.awt.Color(153, 153, 153));
        jLabel53.setText("dd-mm-aaaa");

        botonGenerarExel.setText("GENERAR EXCEL ANEXOS");
        botonGenerarExel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonGenerarExelActionPerformed(evt);
            }
        });

        jButton12.setText("GENERAR INFORME AHORROS");
        jButton12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton12ActionPerformed(evt);
            }
        });

        jLabel89.setText("Ahorro total");

        jTextField76.setText("0");

        jLabel102.setText("reg.");

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jLabel52, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextField32, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel53)
                        .addGap(35, 35, 35)
                        .addComponent(botonActualizaConsultaAnexo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextField63, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel89)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextField64, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextField76, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel102)
                        .addGap(18, 18, 18)
                        .addComponent(botonGenerarExel, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton12, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jTabbedPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 1358, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel52)
                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(botonActualizaConsultaAnexo)
                    .addComponent(jTextField32, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel53)
                    .addComponent(botonGenerarExel)
                    .addComponent(jButton12)
                    .addComponent(jTextField63, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel89)
                    .addComponent(jTextField64, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField76, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel102))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 808, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jTabbedPane1.addTab("ANEXO", jPanel7);

        jPanel18.setBackground(new java.awt.Color(204, 204, 204));

        jScrollPane8.setViewportView(arbol02);

        javax.swing.GroupLayout jPanel18Layout = new javax.swing.GroupLayout(jPanel18);
        jPanel18.setLayout(jPanel18Layout);
        jPanel18Layout.setHorizontalGroup(
            jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane8)
        );
        jPanel18Layout.setVerticalGroup(
            jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane8, javax.swing.GroupLayout.DEFAULT_SIZE, 430, Short.MAX_VALUE)
        );

        jPanel19.setBackground(new java.awt.Color(204, 204, 204));

        tablaC01.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane10.setViewportView(tablaC01);

        tablaC02.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane11.setViewportView(tablaC02);

        jLabel76.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel76.setText("CONDICIONES ACTUALES");

        jLabel77.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel77.setText("CONDICIONES DE SIMULACIÓN");

        javax.swing.GroupLayout jPanel19Layout = new javax.swing.GroupLayout(jPanel19);
        jPanel19.setLayout(jPanel19Layout);
        jPanel19Layout.setHorizontalGroup(
            jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel19Layout.createSequentialGroup()
                .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 495, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane11))
            .addGroup(jPanel19Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel76, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField56, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(170, 170, 170)
                .addComponent(jLabel77, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jTextField57, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel19Layout.setVerticalGroup(
            jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel19Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel76)
                    .addComponent(jTextField56, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel77)
                    .addComponent(jTextField57, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane11, javax.swing.GroupLayout.DEFAULT_SIZE, 376, Short.MAX_VALUE)
                    .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
        );

        jPanel20.setBackground(new java.awt.Color(153, 153, 153));

        jButton9.setText("GENERAR FACTURA SIMULADA");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jButton13.setText("ANULAR LINEA AHORRO");
        jButton13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton13ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel20Layout = new javax.swing.GroupLayout(jPanel20);
        jPanel20.setLayout(jPanel20Layout);
        jPanel20Layout.setHorizontalGroup(
            jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel20Layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton13, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(53, Short.MAX_VALUE))
        );
        jPanel20Layout.setVerticalGroup(
            jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel20Layout.createSequentialGroup()
                .addGap(63, 63, 63)
                .addComponent(jButton9)
                .addGap(105, 105, 105)
                .addComponent(jButton13)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel21.setBackground(new java.awt.Color(204, 204, 204));

        javax.swing.GroupLayout jPanel21Layout = new javax.swing.GroupLayout(jPanel21);
        jPanel21.setLayout(jPanel21Layout);
        jPanel21Layout.setHorizontalGroup(
            jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1051, Short.MAX_VALUE)
        );
        jPanel21Layout.setVerticalGroup(
            jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jPanel22.setBackground(new java.awt.Color(204, 204, 204));

        tablaC03.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane6.setViewportView(tablaC03);

        jLabel78.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel78.setText("FACTURA BASE DE CÁLCULO");

        javax.swing.GroupLayout jPanel22Layout = new javax.swing.GroupLayout(jPanel22);
        jPanel22.setLayout(jPanel22Layout);
        jPanel22Layout.setHorizontalGroup(
            jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 495, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel22Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel78, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(153, 153, 153))
        );
        jPanel22Layout.setVerticalGroup(
            jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel22Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel78)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 299, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(58, 58, 58))
        );

        jPanel23.setBackground(new java.awt.Color(204, 204, 204));

        tablaC04.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane7.setViewportView(tablaC04);

        jLabel79.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel79.setText("CÁLCULOS");

        javax.swing.GroupLayout jPanel23Layout = new javax.swing.GroupLayout(jPanel23);
        jPanel23.setLayout(jPanel23Layout);
        jPanel23Layout.setHorizontalGroup(
            jPanel23Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane7)
            .addGroup(jPanel23Layout.createSequentialGroup()
                .addGap(235, 235, 235)
                .addComponent(jLabel79, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel23Layout.setVerticalGroup(
            jPanel23Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel23Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel79)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 299, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(59, 59, 59))
        );

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jPanel20, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel18, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel19, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel21, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addComponent(jPanel22, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel23, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel18, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel19, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel20, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel22, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel23, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel21, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jTabbedPane5.addTab("CAMBIOS Y FACTURAS", jPanel9);

        jLabel36.setText("FECHA DE CÁLCULO");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "ULTIMO CÁLCULO", "SELECCIONAR", " " }));

        jLabel15.setForeground(new java.awt.Color(153, 153, 153));
        jLabel15.setText("dd-mm-aaaa");

        botonActualizar.setText("ACTUALIZAR");
        botonActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonActualizarActionPerformed(evt);
            }
        });

        miBarra02.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        miBarra02.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        miTabla02.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        miBarra02.setViewportView(miTabla02);

        jButton18.setText("GENERAL EXCEL");
        jButton18.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton18ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel17Layout = new javax.swing.GroupLayout(jPanel17);
        jPanel17.setLayout(jPanel17Layout);
        jPanel17Layout.setHorizontalGroup(
            jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel17Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel36)
                .addGap(18, 18, 18)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jTextField31, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel15)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(botonActualizar)
                .addGap(18, 18, 18)
                .addComponent(jButton18, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(604, Short.MAX_VALUE))
            .addGroup(jPanel17Layout.createSequentialGroup()
                .addComponent(miBarra02, javax.swing.GroupLayout.PREFERRED_SIZE, 1332, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel17Layout.setVerticalGroup(
            jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel17Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel36)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField31, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15)
                    .addComponent(botonActualizar)
                    .addComponent(jButton18))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(miBarra02, javax.swing.GroupLayout.PREFERRED_SIZE, 718, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(67, Short.MAX_VALUE))
        );

        jTabbedPane5.addTab("LISTA AHORROS", jPanel17);

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addComponent(jTabbedPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 1344, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane5)
        );

        jTabbedPane1.addTab("HISTORICO", jPanel6);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ventana/logo.JPG"))); // NOI18N

        listaClientes.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "SELECCIONAR CLIENTE" }));
        listaClientes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listaClientesActionPerformed(evt);
            }
        });

        jButton1.setText("CARGAR DATOS CLIENTE");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel35Layout = new javax.swing.GroupLayout(jPanel35);
        jPanel35.setLayout(jPanel35Layout);
        jPanel35Layout.setHorizontalGroup(
            jPanel35Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel35Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel35Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(listaClientes, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel35Layout.setVerticalGroup(
            jPanel35Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel35Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(listaClientes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addGap(0, 11, Short.MAX_VALUE))
        );

        jLabel87.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel87.setText("Verificación y Optimización de Resultados Energéticos");

        jLabel85.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel85.setText("V.O.R.E.");

        jLabel86.setText("V 1.9991");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jPanel35, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING))
                        .addComponent(jLabel87, javax.swing.GroupLayout.Alignment.TRAILING))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel85, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel86, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 24, Short.MAX_VALUE))
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1413, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(jPanel35, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(1, 1, 1)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 587, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel87, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel85, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel86)))
                    .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 821, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 42, Short.MAX_VALUE))
        );

        jTabbedPane6.addTab("INFORMES DE AHORRO", jPanel2);

        jPanel38.setBackground(new java.awt.Color(204, 204, 255));

        jCheckBox3.setText("SERVICIOS DE EMAIL ACTIVADO");

        jCheckBox4.setText("SERVICIO DE SMS ACTIVADO");

        jLabel124.setText("ULTIMA REVISIÓN DE ALERTAS :");

        jTextField89.setText("12/12/2015 04:34");

        jButton10.setText("REFRESCAR");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        jTextField125.setText("0");

        jLabel171.setText("Alertas visualizadas");

        javax.swing.GroupLayout jPanel38Layout = new javax.swing.GroupLayout(jPanel38);
        jPanel38.setLayout(jPanel38Layout);
        jPanel38Layout.setHorizontalGroup(
            jPanel38Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel38Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jCheckBox3)
                .addGap(18, 18, 18)
                .addComponent(jCheckBox4)
                .addGap(18, 18, 18)
                .addComponent(jLabel124, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField89, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addComponent(jButton10)
                .addGap(43, 43, 43)
                .addComponent(jTextField125, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel171)
                .addContainerGap(474, Short.MAX_VALUE))
        );
        jPanel38Layout.setVerticalGroup(
            jPanel38Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel38Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel38Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBox3)
                    .addComponent(jCheckBox4)
                    .addComponent(jLabel124)
                    .addComponent(jTextField89, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton10)
                    .addComponent(jTextField125, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel171))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        miTabla12.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        miBarra12.setViewportView(miTabla12);

        javax.swing.GroupLayout jPanel39Layout = new javax.swing.GroupLayout(jPanel39);
        jPanel39.setLayout(jPanel39Layout);
        jPanel39Layout.setHorizontalGroup(
            jPanel39Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel39Layout.createSequentialGroup()
                .addComponent(miBarra12, javax.swing.GroupLayout.DEFAULT_SIZE, 1643, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel39Layout.setVerticalGroup(
            jPanel39Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel39Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(miBarra12, javax.swing.GroupLayout.PREFERRED_SIZE, 599, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(23, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("ALERTAS ACTUALES", jPanel39);

        jPanel41.setBackground(new java.awt.Color(204, 204, 204));

        jComboBox5.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "SELECCIONAR CLIENTE" }));

        jComboBox6.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "SELECCIONAR CUPS" }));

        jButton19.setText("ACTUALIZAR LISTA");

        javax.swing.GroupLayout jPanel41Layout = new javax.swing.GroupLayout(jPanel41);
        jPanel41.setLayout(jPanel41Layout);
        jPanel41Layout.setHorizontalGroup(
            jPanel41Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel41Layout.createSequentialGroup()
                .addComponent(jComboBox5, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jComboBox6, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton19, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 1041, Short.MAX_VALUE))
        );
        jPanel41Layout.setVerticalGroup(
            jPanel41Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel41Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel41Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton19))
                .addContainerGap(23, Short.MAX_VALUE))
        );

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane9.setViewportView(jTable1);

        javax.swing.GroupLayout jPanel40Layout = new javax.swing.GroupLayout(jPanel40);
        jPanel40.setLayout(jPanel40Layout);
        jPanel40Layout.setHorizontalGroup(
            jPanel40Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel40Layout.createSequentialGroup()
                .addGroup(jPanel40Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel41, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane9))
                .addContainerGap())
        );
        jPanel40Layout.setVerticalGroup(
            jPanel40Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel40Layout.createSequentialGroup()
                .addComponent(jPanel41, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 361, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 209, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("EDITAR ALERTAS", jPanel40);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane2)
                .addContainerGap())
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(jPanel38, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(jPanel38, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 661, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 151, Short.MAX_VALUE))
        );

        jTabbedPane6.addTab("ALERTAS DE SERVICIO", jPanel5);

        miTabla05.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        miBarra05.setViewportView(miTabla05);

        jLabel139.setText("LISTA DE CLIENTES EN BASE DE DATOS");

        jButton20.setText("ACTUALIZAR LISTA");
        jButton20.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton20ActionPerformed(evt);
            }
        });

        jLabel143.setText("CLIENTES EN BASE DE DATOS");

        jPanel43.setBackground(new java.awt.Color(204, 204, 255));

        jLabel73.setText("NOMBRE DE CLIENTE");

        jTextField53.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField53ActionPerformed(evt);
            }
        });

        jButton4.setText("INSERTAR ");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton8.setText(" BORRAR DATOS");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jLabel74.setText("ALIAS CLIENTE");

        jLabel75.setText("FECHA DE ALTA ");

        javax.swing.GroupLayout jPanel43Layout = new javax.swing.GroupLayout(jPanel43);
        jPanel43.setLayout(jPanel43Layout);
        jPanel43Layout.setHorizontalGroup(
            jPanel43Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel43Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel43Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel73)
                    .addComponent(jLabel74)
                    .addComponent(jLabel75))
                .addGap(28, 28, 28)
                .addGroup(jPanel43Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextField55, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel43Layout.createSequentialGroup()
                        .addGroup(jPanel43Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTextField53)
                            .addComponent(jTextField54, javax.swing.GroupLayout.PREFERRED_SIZE, 333, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(145, 145, 145)
                        .addGroup(jPanel43Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(267, Short.MAX_VALUE))
        );
        jPanel43Layout.setVerticalGroup(
            jPanel43Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel43Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel43Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel73)
                    .addComponent(jTextField53, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton4))
                .addGap(18, 18, 18)
                .addGroup(jPanel43Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel74)
                    .addComponent(jTextField54, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel43Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel75)
                    .addComponent(jTextField55, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel15Layout = new javax.swing.GroupLayout(jPanel15);
        jPanel15.setLayout(jPanel15Layout);
        jPanel15Layout.setHorizontalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel15Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel15Layout.createSequentialGroup()
                        .addComponent(jLabel139, javax.swing.GroupLayout.PREFERRED_SIZE, 269, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton20, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(65, 65, 65)
                        .addComponent(jTextField105, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel143))
                    .addComponent(miBarra05)
                    .addComponent(jPanel43, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(653, Short.MAX_VALUE))
        );
        jPanel15Layout.setVerticalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel15Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel139)
                    .addComponent(jButton20)
                    .addComponent(jTextField105, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel143))
                .addGap(18, 18, 18)
                .addComponent(miBarra05, javax.swing.GroupLayout.PREFERRED_SIZE, 342, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel43, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(191, Short.MAX_VALUE))
        );

        jTabbedPane4.addTab("NUEVO CLIENTE", jPanel15);

        jPanel16.setBackground(new java.awt.Color(204, 204, 204));

        jLabel67.setText("NOMBRE ");

        jLabel68.setText("CUPS");

        jTextField48.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField48ActionPerformed(evt);
            }
        });

        jLabel70.setText("CIF");

        jLabel71.setText("T. ACTUAL");

        jLabel72.setText("DIRECCIÓN");

        jButton7.setText("BUSCAR");

        listaTarifaActual.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Seleccionar....", "TARIFA 2.0 A", "TARIFA 2.0 ADH", "TARIFA 2.1 A", "TARIFA 2.1 ADH", "TARIFA 3.0 A", "TARIFA 3.1 A", "TARIFA 6.1 A", "TARIFA 2.0 DHA INDX", "TARIFA 2.1 DHA INDX", "TARIFA 3.0 A INDX" }));

        jLabel125.setText("COD. POSTAL");

        jLabel126.setText("LOCALIDAD");

        jLabel127.setText("PROVINCIA");

        jLabel128.setText("BLOQUE");

        javax.swing.GroupLayout jPanel16Layout = new javax.swing.GroupLayout(jPanel16);
        jPanel16.setLayout(jPanel16Layout);
        jPanel16Layout.setHorizontalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel16Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel16Layout.createSequentialGroup()
                        .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel67)
                            .addComponent(jLabel68)
                            .addComponent(jLabel72))
                        .addGap(40, 40, 40)
                        .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel16Layout.createSequentialGroup()
                                .addComponent(jTextField48, javax.swing.GroupLayout.PREFERRED_SIZE, 367, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(31, 31, 31)
                                .addComponent(jLabel70))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel16Layout.createSequentialGroup()
                                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel16Layout.createSequentialGroup()
                                        .addComponent(jTextField49, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jButton7))
                                    .addComponent(jTextField52, javax.swing.GroupLayout.PREFERRED_SIZE, 367, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel125)
                                    .addComponent(jLabel71, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel127, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(jPanel16Layout.createSequentialGroup()
                        .addComponent(jLabel126, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextField90, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(262, 262, 262)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextField51, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField91, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel16Layout.createSequentialGroup()
                        .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTextField50, javax.swing.GroupLayout.DEFAULT_SIZE, 139, Short.MAX_VALUE)
                            .addComponent(listaTarifaActual, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addComponent(jLabel128)
                        .addGap(18, 18, 18)
                        .addComponent(jTextField92, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(20, 20, 20))
        );
        jPanel16Layout.setVerticalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel16Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel67)
                    .addComponent(jTextField48, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel70)
                    .addComponent(jTextField50, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel128)
                    .addComponent(jTextField92, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel71)
                        .addComponent(jButton7)
                        .addComponent(listaTarifaActual, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel68)
                    .addComponent(jTextField49, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(2, 2, 2)
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel72)
                    .addComponent(jTextField52, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel125)
                    .addComponent(jTextField51, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel126)
                    .addComponent(jTextField90, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel127)
                    .addComponent(jTextField91, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(76, 76, 76))
        );

        jPanel1.setBackground(new java.awt.Color(204, 204, 204));

        listaClientesAdmin.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "SELECCIONAR CLIENTE" }));

        jButton6.setText("Actualizar lista de clientes");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(listaClientesAdmin, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34)
                .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(23, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(listaClientesAdmin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton6))
                .addContainerGap())
        );

        jTextArea4.setColumns(20);
        jTextArea4.setRows(5);
        jScrollPane5.setViewportView(jTextArea4);

        jButton3.setText("BORRAR DATOS");

        jButton2.setText("INSERTAR");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jPanel37.setBackground(new java.awt.Color(204, 204, 255));

        tipoMedida1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "MEDIDA DIRECTA", "MEDIDA INDIRECTA" }));
        tipoMedida1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tipoMedida1ActionPerformed(evt);
            }
        });

        tipoSuministro1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "CON CT", "SIN CT" }));
        tipoSuministro1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tipoSuministro1ActionPerformed(evt);
            }
        });

        jCheckBox2.setText("BATERIA DE CONDENSADORES");

        jLabel120.setText("INTENSIDAD DE TRAFOS");

        jTextField86.setText("50");

        jLabel121.setText("/");

        jTextField87.setText("5");

        jLabel122.setText("Máximo");

        jTextField88.setText("0");

        jLabel123.setText("A");

        javax.swing.GroupLayout jPanel37Layout = new javax.swing.GroupLayout(jPanel37);
        jPanel37.setLayout(jPanel37Layout);
        jPanel37Layout.setHorizontalGroup(
            jPanel37Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel37Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanel37Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel37Layout.createSequentialGroup()
                        .addComponent(jCheckBox2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel37Layout.createSequentialGroup()
                        .addGroup(jPanel37Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel37Layout.createSequentialGroup()
                                .addComponent(jLabel120)
                                .addGap(18, 18, 18)
                                .addComponent(jTextField86, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel121, javax.swing.GroupLayout.PREFERRED_SIZE, 9, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField87, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 74, Short.MAX_VALUE)
                                .addComponent(jLabel122)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField88, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel123))
                            .addGroup(jPanel37Layout.createSequentialGroup()
                                .addComponent(tipoMedida1, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(tipoSuministro1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(32, 32, 32))))
        );
        jPanel37Layout.setVerticalGroup(
            jPanel37Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel37Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel37Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tipoMedida1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tipoSuministro1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel37Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel37Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jTextField88, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel123)
                        .addComponent(jLabel122))
                    .addGroup(jPanel37Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel121)
                        .addComponent(jTextField87, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel37Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel120)
                        .addComponent(jTextField86, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jCheckBox2)
                .addGap(17, 17, 17))
        );

        jLabel119.setText("NOTAS Y OBSERVACIONES");

        jPanel42.setBackground(new java.awt.Color(204, 204, 204));

        jLabel129.setText("FECHA DE INICIO SERVICIO SAEP ");

        jTextField93.setBackground(new java.awt.Color(204, 255, 204));
        jTextField93.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextField93FocusLost(evt);
            }
        });

        jLabel130.setForeground(new java.awt.Color(153, 153, 153));
        jLabel130.setText("dd-mm-aaaa");

        jLabel131.setText("FECHA DE CAMBIO DE COMERCIALIZADORA ELEC.");

        jTextField94.setBackground(new java.awt.Color(204, 255, 204));
        jTextField94.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextField94FocusLost(evt);
            }
        });

        jLabel132.setText("FECHA ÚLTIMO  CAMBIO DE POTENCIA");

        jTextField95.setBackground(new java.awt.Color(204, 255, 204));
        jTextField95.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextField95FocusLost(evt);
            }
        });

        jLabel133.setForeground(new java.awt.Color(153, 153, 153));
        jLabel133.setText("dd-mm-aaaa");

        jLabel134.setForeground(new java.awt.Color(153, 153, 153));
        jLabel134.setText("dd-mm-aaaa");

        jLabel135.setText("FECHA DE CAMBIO DE COMERCIALIZADORA GAS");

        jTextField96.setBackground(new java.awt.Color(204, 255, 204));
        jTextField96.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextField96FocusLost(evt);
            }
        });

        jLabel136.setForeground(new java.awt.Color(153, 153, 153));
        jLabel136.setText("dd-mm-aaaa");

        jLabel137.setText(" INSTALACIÓN DE BATERIA DE CONDENSADORES");

        jTextField97.setBackground(new java.awt.Color(204, 255, 204));
        jTextField97.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextField97FocusLost(evt);
            }
        });

        jLabel138.setForeground(new java.awt.Color(153, 153, 153));
        jLabel138.setText("dd-mm-aaaa");

        jTextField98.setBackground(new java.awt.Color(204, 255, 204));
        jTextField98.setText("30");

        jLabel140.setText("CANTIDAD DE DIAS  AVISO PREVIO");

        jTextField99.setBackground(new java.awt.Color(255, 255, 204));

        jTextField100.setBackground(new java.awt.Color(255, 255, 204));

        jTextField101.setBackground(new java.awt.Color(255, 255, 204));

        jLabel141.setText("Fechas aviso");

        jTextField102.setBackground(new java.awt.Color(255, 255, 204));

        jTextField103.setBackground(new java.awt.Color(255, 255, 204));

        javax.swing.GroupLayout jPanel42Layout = new javax.swing.GroupLayout(jPanel42);
        jPanel42.setLayout(jPanel42Layout);
        jPanel42Layout.setHorizontalGroup(
            jPanel42Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel42Layout.createSequentialGroup()
                .addGroup(jPanel42Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel137, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel131, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel42Layout.createSequentialGroup()
                        .addGroup(jPanel42Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel135, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel132, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel129, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel140, javax.swing.GroupLayout.PREFERRED_SIZE, 266, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel42Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel42Layout.createSequentialGroup()
                        .addGroup(jPanel42Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTextField96)
                            .addComponent(jTextField93)
                            .addComponent(jTextField94)
                            .addComponent(jTextField95)
                            .addComponent(jTextField97, javax.swing.GroupLayout.DEFAULT_SIZE, 75, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel42Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel42Layout.createSequentialGroup()
                                .addComponent(jLabel134)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField101))
                            .addGroup(jPanel42Layout.createSequentialGroup()
                                .addComponent(jLabel133)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField100))
                            .addGroup(jPanel42Layout.createSequentialGroup()
                                .addComponent(jLabel136)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField102))
                            .addGroup(jPanel42Layout.createSequentialGroup()
                                .addComponent(jLabel138)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField103))
                            .addGroup(jPanel42Layout.createSequentialGroup()
                                .addComponent(jLabel130)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel42Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel141, javax.swing.GroupLayout.DEFAULT_SIZE, 81, Short.MAX_VALUE)
                                    .addComponent(jTextField99)))))
                    .addComponent(jTextField98, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel42Layout.setVerticalGroup(
            jPanel42Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel42Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel42Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField98, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel140)
                    .addComponent(jLabel141))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel42Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel129)
                    .addComponent(jTextField93, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel130)
                    .addComponent(jTextField99, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel42Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel131)
                    .addComponent(jTextField94, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel133)
                    .addComponent(jTextField100, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel42Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel42Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jTextField95, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel132))
                    .addGroup(jPanel42Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel134)
                        .addComponent(jTextField101, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel42Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel135)
                    .addComponent(jTextField96, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel136)
                    .addComponent(jTextField102, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel42Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel137)
                    .addComponent(jTextField97, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel138)
                    .addComponent(jTextField103, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel14Layout = new javax.swing.GroupLayout(jPanel14);
        jPanel14.setLayout(jPanel14Layout);
        jPanel14Layout.setHorizontalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel16, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel14Layout.createSequentialGroup()
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 715, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 800, Short.MAX_VALUE)
                        .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton3)
                            .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(27, 27, 27))
                    .addGroup(jPanel14Layout.createSequentialGroup()
                        .addComponent(jLabel119)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addComponent(jPanel37, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel42, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel14Layout.setVerticalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel16, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel14Layout.createSequentialGroup()
                        .addComponent(jPanel37, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel119))
                    .addComponent(jPanel42, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel14Layout.createSequentialGroup()
                        .addComponent(jButton2)
                        .addGap(28, 28, 28)
                        .addComponent(jButton3))
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(47, 47, 47))
        );

        jTabbedPane4.addTab("NUEVO PUNTO", jPanel14);

        jLabel115.setText("IMPUESTO ELÉCTRICO");

        jLabel116.setText("IVA");

        jTextField83.setText("1.051127");

        jTextField84.setText("1.21");

        jLabel142.setText("DURACIÓN DIAS SERVICIOS");

        jTextField104.setText("365");

        javax.swing.GroupLayout jPanel34Layout = new javax.swing.GroupLayout(jPanel34);
        jPanel34.setLayout(jPanel34Layout);
        jPanel34Layout.setHorizontalGroup(
            jPanel34Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel34Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(jPanel34Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel34Layout.createSequentialGroup()
                        .addComponent(jLabel142)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField104))
                    .addGroup(jPanel34Layout.createSequentialGroup()
                        .addGroup(jPanel34Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel116, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel115, javax.swing.GroupLayout.DEFAULT_SIZE, 124, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel34Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTextField83)
                            .addComponent(jTextField84))))
                .addContainerGap(1439, Short.MAX_VALUE))
        );
        jPanel34Layout.setVerticalGroup(
            jPanel34Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel34Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(jPanel34Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel115)
                    .addComponent(jTextField83, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel34Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel116)
                    .addComponent(jTextField84, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel34Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel142)
                    .addComponent(jTextField104, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(586, Short.MAX_VALUE))
        );

        jTabbedPane4.addTab("CONSTANTES", jPanel34);

        jLabel174.setText("NOMBRE BASE DE DATOS:");

        jLabel175.setText("HOST:");

        jLabel176.setText("LOGIN:");

        jLabel177.setText("PASSWORD:");

        bdname.setText("saepdb");

        host.setText("jdbc:mysql://192.168.1.111/");

        login.setText("admin02");

        passw.setText("admin02");

        jButton22.setText("ABRIR EXEL");
        jButton22.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton22ActionPerformed(evt);
            }
        });

        jButton23.setText("INSERTAR BD");
        jButton23.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton23ActionPerformed(evt);
            }
        });

        miTabla2e.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        miBarra2.setViewportView(miTabla2e);

        logAcciones.setColumns(20);
        logAcciones.setRows(5);
        jScrollPane12.setViewportView(logAcciones);

        jLabel178.setText("TABLA:");

        tabla.setBackground(new java.awt.Color(204, 255, 204));

        jLabel179.setText("FILAS A INSERTAR");

        jTextField127.setText("0");

        jLabel180.setText("COLUMNAS A INSERTAR");

        jTextField128.setText("0");

        jComboBox10.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Seleccionar tabla...", "DATOS  PRECIO ENERGIA MERCADO OMIE", "DATOS DE CONSUMO ENERGÍA HORARIA", "DATOS DE POTENCIA CUARTO-HORARIA" }));
        jComboBox10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox10ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel51Layout = new javax.swing.GroupLayout(jPanel51);
        jPanel51.setLayout(jPanel51Layout);
        jPanel51Layout.setHorizontalGroup(
            jPanel51Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel51Layout.createSequentialGroup()
                .addGroup(jPanel51Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(miBarra2)
                    .addGroup(jPanel51Layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addGroup(jPanel51Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel174)
                            .addGroup(jPanel51Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel178)
                                .addComponent(jLabel176))
                            .addComponent(jLabel179)
                            .addComponent(jLabel180))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel51Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel51Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jTextField128, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 58, Short.MAX_VALUE)
                                .addComponent(jTextField127, javax.swing.GroupLayout.Alignment.LEADING))
                            .addGroup(jPanel51Layout.createSequentialGroup()
                                .addGroup(jPanel51Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(bdname, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(login, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(49, 49, 49)
                                .addGroup(jPanel51Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel177)
                                    .addComponent(jLabel175)))
                            .addComponent(jComboBox10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel51Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel51Layout.createSequentialGroup()
                                .addGroup(jPanel51Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(host, javax.swing.GroupLayout.DEFAULT_SIZE, 183, Short.MAX_VALUE)
                                    .addComponent(passw))
                                .addGap(50, 50, 50)
                                .addGroup(jPanel51Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jButton23, javax.swing.GroupLayout.DEFAULT_SIZE, 127, Short.MAX_VALUE)
                                    .addComponent(jButton22, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addComponent(tabla, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel51Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane12, javax.swing.GroupLayout.PREFERRED_SIZE, 703, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 703, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 95, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel51Layout.setVerticalGroup(
            jPanel51Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel51Layout.createSequentialGroup()
                .addGroup(jPanel51Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel51Layout.createSequentialGroup()
                        .addGroup(jPanel51Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel51Layout.createSequentialGroup()
                                .addGap(24, 24, 24)
                                .addGroup(jPanel51Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel174)
                                    .addComponent(bdname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel51Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel51Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel175)
                                    .addComponent(host, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel51Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel51Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(jPanel51Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(login, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel176)))
                            .addComponent(passw, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel177))
                        .addGroup(jPanel51Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel51Layout.createSequentialGroup()
                                .addGap(5, 5, 5)
                                .addGroup(jPanel51Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel178)
                                    .addComponent(jComboBox10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel51Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel179)
                                    .addComponent(jTextField127, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel51Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(tabla, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel51Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel51Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel51Layout.createSequentialGroup()
                                .addComponent(jButton22)
                                .addGap(76, 76, 76))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel51Layout.createSequentialGroup()
                                .addComponent(jScrollPane12, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))))
                .addGroup(jPanel51Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel51Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel180)
                        .addComponent(jTextField128, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton23)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(miBarra2, javax.swing.GroupLayout.DEFAULT_SIZE, 526, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane4.addTab("ENTRADA DE DATOS", jPanel51);

        javax.swing.GroupLayout jPanel36Layout = new javax.swing.GroupLayout(jPanel36);
        jPanel36.setLayout(jPanel36Layout);
        jPanel36Layout.setHorizontalGroup(
            jPanel36Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel36Layout.createSequentialGroup()
                .addComponent(jTabbedPane4)
                .addContainerGap())
        );
        jPanel36Layout.setVerticalGroup(
            jPanel36Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel36Layout.createSequentialGroup()
                .addComponent(jTabbedPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 736, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 127, Short.MAX_VALUE))
        );

        jTabbedPane6.addTab("ADMINISTRACION", jPanel36);

        jScrollPane14.setViewportView(arbolSimulaciones);

        jScrollPane15.setViewportView(arbolPrecios);

        javax.swing.GroupLayout jPanel53Layout = new javax.swing.GroupLayout(jPanel53);
        jPanel53.setLayout(jPanel53Layout);
        jPanel53Layout.setHorizontalGroup(
            jPanel53Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane14, javax.swing.GroupLayout.DEFAULT_SIZE, 292, Short.MAX_VALUE)
            .addComponent(jScrollPane15)
        );
        jPanel53Layout.setVerticalGroup(
            jPanel53Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel53Layout.createSequentialGroup()
                .addComponent(jScrollPane14, javax.swing.GroupLayout.PREFERRED_SIZE, 443, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane15))
        );

        jPanel54.setBackground(new java.awt.Color(204, 204, 255));

        miBarra14.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        miBarra14.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        miTabla14.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        miBarra14.setViewportView(miTabla14);

        jTabbedPane9.addTab("MERCADO OMIE (€/MWh)", miBarra14);

        miBarra15.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        miBarra15.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        miTabla16.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        miBarra15.setViewportView(miTabla16);

        javax.swing.GroupLayout jPanel57Layout = new javax.swing.GroupLayout(jPanel57);
        jPanel57.setLayout(jPanel57Layout);
        jPanel57Layout.setHorizontalGroup(
            jPanel57Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel57Layout.createSequentialGroup()
                .addComponent(miBarra15, javax.swing.GroupLayout.PREFERRED_SIZE, 1345, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel57Layout.setVerticalGroup(
            jPanel57Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(miBarra15, javax.swing.GroupLayout.DEFAULT_SIZE, 416, Short.MAX_VALUE)
        );

        jTabbedPane9.addTab("ENERGIA CONSUMIDA (kWh)", jPanel57);

        miBarra16.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        miTabla15.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        miBarra16.setViewportView(miTabla15);

        jComboBox9.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "CALENDARIO ENERGÉTICO P6.1 ", "CALENDARIO ENERGÉTICO P3.0", "CALENDARIO ENERGÉTICO P3.1" }));
        jComboBox9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox9ActionPerformed(evt);
            }
        });

        jLabel201.setText(" ");

        jLabel202.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ventana/CalendarioP6.JPG"))); // NOI18N
        jLabel202.setText(".");

        jLabel200.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ventana/CalendarioP3.JPG"))); // NOI18N
        jLabel200.setText(".");

        jLabel220.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ventana/CalendarioP30.JPG"))); // NOI18N
        jLabel220.setText(".");

        javax.swing.GroupLayout jPanel60Layout = new javax.swing.GroupLayout(jPanel60);
        jPanel60.setLayout(jPanel60Layout);
        jPanel60Layout.setHorizontalGroup(
            jPanel60Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel60Layout.createSequentialGroup()
                .addGroup(jPanel60Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel60Layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addGroup(jPanel60Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel60Layout.createSequentialGroup()
                                .addGap(61, 61, 61)
                                .addComponent(jLabel201))
                            .addComponent(jComboBox9, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel60Layout.createSequentialGroup()
                        .addGroup(jPanel60Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel60Layout.createSequentialGroup()
                                .addGap(34, 34, 34)
                                .addComponent(jLabel200)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel60Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel220, javax.swing.GroupLayout.PREFERRED_SIZE, 646, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(31, 31, 31)))
                        .addComponent(jLabel202, javax.swing.GroupLayout.PREFERRED_SIZE, 709, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel60Layout.setVerticalGroup(
            jPanel60Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel60Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jComboBox9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel60Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel202, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel60Layout.createSequentialGroup()
                        .addComponent(jLabel220, javax.swing.GroupLayout.PREFERRED_SIZE, 379, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel200)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel201)
                .addGap(365, 365, 365))
        );

        javax.swing.GroupLayout jPanel58Layout = new javax.swing.GroupLayout(jPanel58);
        jPanel58.setLayout(jPanel58Layout);
        jPanel58Layout.setHorizontalGroup(
            jPanel58Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel58Layout.createSequentialGroup()
                .addComponent(miBarra16, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel60, javax.swing.GroupLayout.PREFERRED_SIZE, 951, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel58Layout.setVerticalGroup(
            jPanel58Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(miBarra16, javax.swing.GroupLayout.DEFAULT_SIZE, 416, Short.MAX_VALUE)
            .addComponent(jPanel60, javax.swing.GroupLayout.PREFERRED_SIZE, 416, Short.MAX_VALUE)
        );

        jTabbedPane9.addTab("POTENCIA DE MÁXIMETRO (kW)", jPanel58);

        javax.swing.GroupLayout jPanel54Layout = new javax.swing.GroupLayout(jPanel54);
        jPanel54.setLayout(jPanel54Layout);
        jPanel54Layout.setHorizontalGroup(
            jPanel54Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel54Layout.createSequentialGroup()
                .addComponent(jTabbedPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel54Layout.setVerticalGroup(
            jPanel54Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel54Layout.createSequentialGroup()
                .addComponent(jTabbedPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 444, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        miTabla13.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        miBarra13.setViewportView(miTabla13);

        javax.swing.GroupLayout jPanel55Layout = new javax.swing.GroupLayout(jPanel55);
        jPanel55.setLayout(jPanel55Layout);
        jPanel55Layout.setHorizontalGroup(
            jPanel55Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(miBarra13, javax.swing.GroupLayout.PREFERRED_SIZE, 385, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        jPanel55Layout.setVerticalGroup(
            jPanel55Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(miBarra13, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );

        jLabel181.setText("COSTE POTENCIA (sin I.E.)");

        jTextField129.setBackground(new java.awt.Color(204, 204, 255));
        jTextField129.setText("0");

        jLabel182.setText("COSTE ENERGÍA  (sin I.E.)");

        jTextField130.setBackground(new java.awt.Color(204, 204, 255));
        jTextField130.setText("0");

        jLabel183.setText("TOTAL ESTIMADO (con I.E.)");

        jTextField131.setBackground(new java.awt.Color(204, 204, 255));
        jTextField131.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jTextField131.setText("0");
        jTextField131.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField131ActionPerformed(evt);
            }
        });

        jButton21.setText("RECALCULAR");
        jButton21.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton21ActionPerformed(evt);
            }
        });

        jTextField134.setText("0");

        jTextField135.setText("0");

        jTextField136.setText("0");
        jTextField136.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField136ActionPerformed(evt);
            }
        });

        jTextField137.setText("0");

        jTextField138.setText("0");

        jTextField139.setText("0");

        jLabel187.setText("P1");

        jLabel188.setText("P2");

        jLabel189.setText("P3");

        jLabel190.setText("P4");

        jLabel191.setText("P5");

        jLabel192.setText("P6");

        jLabel194.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel194.setText("RESUMEN");

        jLabel195.setText("DESDE");

        jTextField147.setBackground(new java.awt.Color(255, 255, 204));

        jLabel196.setText("HASTA");

        jTextField148.setBackground(new java.awt.Color(255, 255, 204));
        jTextField148.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField148ActionPerformed(evt);
            }
        });

        jTextField149.setText("0");

        jTextField150.setText("0");

        jTextField151.setText("0");

        jTextField152.setText("0");

        jTextField153.setText("0");

        jTextField154.setText("0");
        jTextField154.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField154ActionPerformed(evt);
            }
        });

        jLabel199.setText("DIAS:");

        jTextField185.setText("0");

        jLabel186.setText("ENERGÍA CONSUMIDA kWh");

        jTextField178.setBackground(new java.awt.Color(204, 204, 255));
        jTextField178.setText("0");

        jTextField172.setText("0");

        jTextField173.setText("0");

        jTextField174.setText("0");

        jTextField175.setText("0");

        jTextField176.setText("0");

        jTextField177.setText("0");

        jLabel185.setText("SOBREPASAMIENTOS POTENCIA");

        jTextField132.setBackground(new java.awt.Color(204, 204, 255));
        jTextField132.setText("0");

        jTextField155.setText("0");

        jTextField156.setText("0");
        jTextField156.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField156ActionPerformed(evt);
            }
        });

        jTextField157.setText("0");

        jTextField158.setText("0");

        jTextField159.setText("0");

        jTextField160.setText("0");

        jLabel184.setText("PRECIO ENERGÍA OMIE X PERIODO €/kWh");

        jTextField267.setText("0");

        jTextField268.setText("0");

        jTextField269.setText("0");

        jTextField270.setText("0");

        jTextField271.setText("0");

        jTextField272.setText("0");

        javax.swing.GroupLayout jPanel62Layout = new javax.swing.GroupLayout(jPanel62);
        jPanel62.setLayout(jPanel62Layout);
        jPanel62Layout.setHorizontalGroup(
            jPanel62Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel62Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel62Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel184, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel62Layout.createSequentialGroup()
                        .addGroup(jPanel62Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel186, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel185, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 167, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel62Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextField132, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                            .addComponent(jTextField178))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel62Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTextField172, javax.swing.GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE)
                    .addComponent(jTextField155)
                    .addComponent(jTextField267))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel62Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTextField156, javax.swing.GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE)
                    .addComponent(jTextField173)
                    .addComponent(jTextField268))
                .addGap(6, 6, 6)
                .addGroup(jPanel62Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTextField174)
                    .addComponent(jTextField157, javax.swing.GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE)
                    .addComponent(jTextField269))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel62Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTextField158, javax.swing.GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE)
                    .addComponent(jTextField175)
                    .addComponent(jTextField270))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel62Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTextField176, javax.swing.GroupLayout.DEFAULT_SIZE, 83, Short.MAX_VALUE)
                    .addComponent(jTextField159, javax.swing.GroupLayout.DEFAULT_SIZE, 83, Short.MAX_VALUE)
                    .addComponent(jTextField271))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel62Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTextField177)
                    .addComponent(jTextField160, javax.swing.GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE)
                    .addComponent(jTextField272))
                .addGap(30, 30, 30))
        );
        jPanel62Layout.setVerticalGroup(
            jPanel62Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel62Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel62Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel184)
                    .addComponent(jTextField267, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField268, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField269, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField270, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField271, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField272, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                .addGroup(jPanel62Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField172, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField173, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField174, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField175, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField176, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField177, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel186)
                    .addComponent(jTextField178, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel62Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel185)
                    .addComponent(jTextField132, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField155, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField156, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField157, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField158, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField159, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField160, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jLabel197.setText("POTENCIAS CONTRATADAS POR PERIODO");

        jTextField133.setBackground(new java.awt.Color(255, 255, 204));
        jTextField133.setText("0");

        jTextField167.setBackground(new java.awt.Color(255, 255, 204));
        jTextField167.setText("0");
        jTextField167.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField167ActionPerformed(evt);
            }
        });

        jTextField168.setBackground(new java.awt.Color(255, 255, 204));
        jTextField168.setText("0");
        jTextField168.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField168ActionPerformed(evt);
            }
        });

        jTextField169.setBackground(new java.awt.Color(255, 255, 204));
        jTextField169.setText("0");

        jTextField170.setBackground(new java.awt.Color(255, 255, 204));
        jTextField170.setText("0");

        jTextField171.setBackground(new java.awt.Color(255, 255, 204));
        jTextField171.setText("0");
        jTextField171.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField171ActionPerformed(evt);
            }
        });

        jTextField184.setBackground(new java.awt.Color(255, 255, 204));
        jTextField184.setText("0");

        jTextField183.setBackground(new java.awt.Color(255, 255, 204));
        jTextField183.setText("0");

        jTextField182.setBackground(new java.awt.Color(255, 255, 204));
        jTextField182.setText("0");

        jTextField181.setBackground(new java.awt.Color(255, 255, 204));
        jTextField181.setText("0");

        jTextField180.setBackground(new java.awt.Color(255, 255, 204));
        jTextField180.setText("0");

        jTextField179.setBackground(new java.awt.Color(255, 255, 204));
        jTextField179.setText("0");

        jLabel198.setText("TARIFA DE POTENCIA €/kW · DIA");

        jLabel193.setText("OTROS COSTES TERMINO ENERGIA €/kW");

        jTextField141.setBackground(new java.awt.Color(255, 255, 204));
        jTextField141.setText("0.04826557");

        jTextField142.setBackground(new java.awt.Color(255, 255, 204));
        jTextField142.setText("0.04147509");

        jTextField143.setBackground(new java.awt.Color(255, 255, 204));
        jTextField143.setText("0");

        jTextField144.setBackground(new java.awt.Color(255, 255, 204));
        jTextField144.setText("0");

        jTextField145.setBackground(new java.awt.Color(255, 255, 204));
        jTextField145.setText("0");

        jTextField146.setBackground(new java.awt.Color(255, 255, 204));
        jTextField146.setText("0.02370256");
        jTextField146.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField146ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel61Layout = new javax.swing.GroupLayout(jPanel61);
        jPanel61.setLayout(jPanel61Layout);
        jPanel61Layout.setHorizontalGroup(
            jPanel61Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel61Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanel61Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel198, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel197, javax.swing.GroupLayout.DEFAULT_SIZE, 281, Short.MAX_VALUE)
                    .addComponent(jLabel193, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel61Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTextField141, javax.swing.GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE)
                    .addComponent(jTextField133)
                    .addComponent(jTextField179))
                .addGap(6, 6, 6)
                .addGroup(jPanel61Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTextField142)
                    .addComponent(jTextField167)
                    .addComponent(jTextField180, javax.swing.GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE))
                .addGap(6, 6, 6)
                .addGroup(jPanel61Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTextField143)
                    .addComponent(jTextField168)
                    .addComponent(jTextField181, javax.swing.GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel61Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel61Layout.createSequentialGroup()
                        .addGroup(jPanel61Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTextField169)
                            .addComponent(jTextField182, javax.swing.GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel61Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTextField183, javax.swing.GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE)
                            .addComponent(jTextField170)))
                    .addGroup(jPanel61Layout.createSequentialGroup()
                        .addComponent(jTextField144, javax.swing.GroupLayout.DEFAULT_SIZE, 79, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField145, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel61Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTextField171)
                    .addComponent(jTextField184)
                    .addComponent(jTextField146, javax.swing.GroupLayout.DEFAULT_SIZE, 85, Short.MAX_VALUE))
                .addGap(31, 31, 31))
        );
        jPanel61Layout.setVerticalGroup(
            jPanel61Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel61Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel61Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel197)
                    .addComponent(jTextField133, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField167, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField168, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField169, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField170, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField171, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel61Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel198)
                    .addComponent(jTextField180, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField181, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField182, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField183, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField184, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField179, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel61Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel61Layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(jLabel193))
                    .addGroup(jPanel61Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jTextField142, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jTextField143, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jTextField144, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jTextField145, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jTextField146, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jTextField141, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        jCheckBox12.setText("SIMULAR CAMBIO A 3.1");

        javax.swing.GroupLayout jPanel56Layout = new javax.swing.GroupLayout(jPanel56);
        jPanel56.setLayout(jPanel56Layout);
        jPanel56Layout.setHorizontalGroup(
            jPanel56Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel56Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel56Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabel194, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel183, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 167, Short.MAX_VALUE)
                    .addComponent(jLabel182, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel181, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel56Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel195, javax.swing.GroupLayout.DEFAULT_SIZE, 104, Short.MAX_VALUE)
                    .addComponent(jTextField129)
                    .addComponent(jTextField130)
                    .addComponent(jTextField131))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel56Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel56Layout.createSequentialGroup()
                        .addGroup(jPanel56Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel56Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jTextField147, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(8, 8, 8))
                            .addGroup(jPanel56Layout.createSequentialGroup()
                                .addGroup(jPanel56Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jTextField149, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jTextField134, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel56Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jTextField150)
                                    .addComponent(jTextField135))))
                        .addGroup(jPanel56Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel56Layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(jTextField151, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel56Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jTextField152, javax.swing.GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE)
                                    .addComponent(jTextField137, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel56Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jTextField153, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTextField138, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel56Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jTextField139, javax.swing.GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE)
                                    .addComponent(jTextField154)))
                            .addGroup(jPanel56Layout.createSequentialGroup()
                                .addGap(22, 22, 22)
                                .addGroup(jPanel56Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel56Layout.createSequentialGroup()
                                        .addGap(10, 10, 10)
                                        .addComponent(jLabel189, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel56Layout.createSequentialGroup()
                                        .addComponent(jLabel196)
                                        .addGap(12, 12, 12)
                                        .addComponent(jTextField148, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(38, 38, 38)
                                        .addComponent(jLabel199)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jTextField185, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel56Layout.createSequentialGroup()
                        .addGap(177, 177, 177)
                        .addComponent(jTextField136)
                        .addGap(261, 261, 261))
                    .addGroup(jPanel56Layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(jLabel187, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(65, 65, 65)
                        .addComponent(jLabel188, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel56Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel56Layout.createSequentialGroup()
                                .addGap(140, 140, 140)
                                .addComponent(jLabel190, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(61, 61, 61)
                                .addComponent(jLabel191, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(jPanel56Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel192, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(29, 29, 29))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel56Layout.createSequentialGroup()
                        .addComponent(jCheckBox12, javax.swing.GroupLayout.PREFERRED_SIZE, 268, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton21, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(136, 136, 136))
            .addGroup(jPanel56Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel56Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel62, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel61, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(95, Short.MAX_VALUE))
        );
        jPanel56Layout.setVerticalGroup(
            jPanel56Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel56Layout.createSequentialGroup()
                .addGroup(jPanel56Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel56Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel194)
                        .addComponent(jLabel195))
                    .addGroup(jPanel56Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jTextField147, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel196)
                        .addComponent(jTextField148, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel199)
                        .addComponent(jTextField185, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel56Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel56Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel190)
                        .addComponent(jLabel189)
                        .addComponent(jLabel191)
                        .addComponent(jLabel192)
                        .addComponent(jLabel188))
                    .addComponent(jLabel187))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel56Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField129, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel181)
                    .addComponent(jTextField134, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField135, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField136, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField137, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField138, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField139, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel56Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField130, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel182)
                    .addComponent(jTextField149, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField150, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField151, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField152, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField153, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField154, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel56Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField131, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel183)
                    .addComponent(jButton21)
                    .addComponent(jCheckBox12))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel62, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel61, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(59, Short.MAX_VALUE))
        );

        jTabbedPane10.addTab("TARIFAS 6.1 P", jPanel56);

        jPanel63.setBackground(new java.awt.Color(255, 255, 255));

        jLabel203.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel203.setText("RESUMEN");

        jLabel204.setText("DESDE");

        jTextField161.setBackground(new java.awt.Color(255, 255, 204));

        jLabel205.setText("HASTA");

        jTextField162.setBackground(new java.awt.Color(255, 255, 204));

        jLabel206.setText("DIAS:");

        jTextField186.setText("0");

        javax.swing.GroupLayout jPanel63Layout = new javax.swing.GroupLayout(jPanel63);
        jPanel63.setLayout(jPanel63Layout);
        jPanel63Layout.setHorizontalGroup(
            jPanel63Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel63Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel203, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel204, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(25, 25, 25)
                .addComponent(jTextField161)
                .addGap(22, 22, 22)
                .addComponent(jLabel205)
                .addGap(12, 12, 12)
                .addComponent(jTextField162, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38)
                .addComponent(jLabel206)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField186, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(182, 182, 182))
        );
        jPanel63Layout.setVerticalGroup(
            jPanel63Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel63Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel63Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel63Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel203)
                        .addComponent(jLabel204))
                    .addGroup(jPanel63Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jTextField161, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel205)
                        .addComponent(jTextField162, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel206)
                        .addComponent(jTextField186, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel207.setText("COSTE POTENCIA (sin I.E.)");

        jLabel208.setText("COSTE ENERGÍA  (sin I.E.)");

        jLabel209.setText("TOTAL ESTIMADO (con I.E.)");

        jTextField140.setBackground(new java.awt.Color(204, 204, 255));
        jTextField140.setText("0");

        jTextField163.setBackground(new java.awt.Color(204, 204, 255));
        jTextField163.setText("0");

        jTextField164.setBackground(new java.awt.Color(204, 204, 255));
        jTextField164.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jTextField164.setText("0");
        jTextField164.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField164ActionPerformed(evt);
            }
        });

        jLabel210.setText("P1");

        jLabel211.setText("P2");

        jLabel212.setText("P3");

        jTextField165.setText("0");
        jTextField165.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField165ActionPerformed(evt);
            }
        });

        jTextField166.setText("0");

        jTextField187.setText("0");

        jTextField188.setText("0");

        jTextField189.setText("0");

        jTextField190.setText("0");

        jLabel213.setText("PRECIO ENERGÍA OMIE X PERIODO €/kWh");

        jLabel214.setText("ENERGÍA CONSUMIDA kWh");

        jLabel215.setText("MAXIMETROS kW");

        jTextField191.setBackground(new java.awt.Color(204, 204, 255));
        jTextField191.setText("0");

        jTextField192.setBackground(new java.awt.Color(204, 204, 255));
        jTextField192.setText("0");

        jTextField193.setText("0");

        jTextField194.setText("0");
        jTextField194.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField194ActionPerformed(evt);
            }
        });

        jTextField195.setText("0");

        jTextField196.setText("0");

        jTextField197.setText("0");
        jTextField197.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField197ActionPerformed(evt);
            }
        });

        jTextField198.setText("0");

        jTextField273.setText("0");

        jTextField274.setText("0");

        jLabel219.setText("POTENCIA FACTURADA kW");

        jTextField208.setText("0");

        jTextField209.setText("0");

        jTextField210.setText("0");

        jTextField275.setText("0");

        jCheckBox8.setText("Bloquear datos maxímetro");

        javax.swing.GroupLayout jPanel65Layout = new javax.swing.GroupLayout(jPanel65);
        jPanel65.setLayout(jPanel65Layout);
        jPanel65Layout.setHorizontalGroup(
            jPanel65Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel65Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel65Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel65Layout.createSequentialGroup()
                        .addComponent(jLabel219, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(235, 235, 235))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel65Layout.createSequentialGroup()
                        .addGroup(jPanel65Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel213, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel65Layout.createSequentialGroup()
                                .addGroup(jPanel65Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jLabel214, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel215, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel65Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jTextField192)
                                    .addComponent(jTextField191))))
                        .addGap(29, 29, 29)
                        .addGroup(jPanel65Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jTextField193, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE)
                            .addComponent(jTextField198, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE)
                            .addComponent(jTextField208, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE)
                            .addComponent(jTextField273, javax.swing.GroupLayout.Alignment.LEADING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(jPanel65Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTextField194, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE)
                    .addComponent(jTextField197, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE)
                    .addComponent(jTextField209)
                    .addComponent(jTextField274))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel65Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTextField196, javax.swing.GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE)
                    .addComponent(jTextField195, javax.swing.GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE)
                    .addComponent(jTextField210)
                    .addComponent(jTextField275))
                .addGap(33, 33, 33)
                .addComponent(jCheckBox8, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(205, 205, 205))
        );
        jPanel65Layout.setVerticalGroup(
            jPanel65Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel65Layout.createSequentialGroup()
                .addGroup(jPanel65Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel65Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel213))
                    .addGroup(jPanel65Layout.createSequentialGroup()
                        .addGroup(jPanel65Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField273, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField274, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField275, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel65Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField193, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField194, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField195, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel214)
                    .addComponent(jTextField191, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel65Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel215)
                    .addComponent(jTextField192, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField198, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField197, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField196, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBox8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel65Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel219)
                    .addComponent(jTextField208, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField209, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField210, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        jButton24.setText("RECALCULAR");
        jButton24.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton24ActionPerformed(evt);
            }
        });

        jCheckBox11.setText("FORZAR CÁLCULO A 3.0");

        javax.swing.GroupLayout jPanel64Layout = new javax.swing.GroupLayout(jPanel64);
        jPanel64.setLayout(jPanel64Layout);
        jPanel64Layout.setHorizontalGroup(
            jPanel64Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel64Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel64Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabel209, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel208, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel207, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel64Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTextField140)
                    .addComponent(jTextField163)
                    .addComponent(jTextField164, javax.swing.GroupLayout.DEFAULT_SIZE, 90, Short.MAX_VALUE))
                .addGroup(jPanel64Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel64Layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addGroup(jPanel64Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel64Layout.createSequentialGroup()
                                .addGap(27, 27, 27)
                                .addComponent(jLabel210, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(65, 65, 65)
                                .addComponent(jLabel211, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(51, 51, 51)
                                .addComponent(jLabel212, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel64Layout.createSequentialGroup()
                                .addGroup(jPanel64Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPanel64Layout.createSequentialGroup()
                                        .addComponent(jTextField187, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jTextField166, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel64Layout.createSequentialGroup()
                                        .addComponent(jTextField188, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jTextField189, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel64Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jTextField165, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTextField190, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(18, 18, 18)
                        .addComponent(jCheckBox11, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel64Layout.createSequentialGroup()
                        .addGap(294, 294, 294)
                        .addComponent(jButton24, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(159, Short.MAX_VALUE))
            .addComponent(jPanel65, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel64Layout.setVerticalGroup(
            jPanel64Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel64Layout.createSequentialGroup()
                .addGroup(jPanel64Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel212)
                    .addComponent(jLabel211)
                    .addComponent(jLabel210))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel64Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField140, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel207)
                    .addComponent(jTextField187, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField166, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField165, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBox11))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel64Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField163, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel208)
                    .addComponent(jTextField188, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField189, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField190, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel64Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField164, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel209)
                    .addComponent(jButton24))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel65, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel216.setText("POTENCIAS CONTRATADAS POR PERIODO");

        jLabel217.setText("TARIFA DE POTENCIA €/kW · DIA");

        jLabel218.setText("OTROS COSTES TERMINO ENERGIA €/kW");

        jTextField199.setBackground(new java.awt.Color(255, 255, 204));
        jTextField199.setText("0");

        jTextField200.setBackground(new java.awt.Color(255, 255, 204));
        jTextField200.setText("0");
        jTextField200.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField200ActionPerformed(evt);
            }
        });

        jTextField201.setBackground(new java.awt.Color(255, 255, 204));
        jTextField201.setText("0");
        jTextField201.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField201ActionPerformed(evt);
            }
        });

        jTextField202.setBackground(new java.awt.Color(255, 255, 204));
        jTextField202.setText("0");

        jTextField203.setBackground(new java.awt.Color(255, 255, 204));
        jTextField203.setText("0");

        jTextField204.setBackground(new java.awt.Color(255, 255, 204));
        jTextField204.setText("0");

        jTextField205.setBackground(new java.awt.Color(255, 255, 204));
        jTextField205.setText("0.04516574");
        jTextField205.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField205ActionPerformed(evt);
            }
        });

        jTextField206.setBackground(new java.awt.Color(255, 255, 204));
        jTextField206.setText("0.02970797");
        jTextField206.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField206ActionPerformed(evt);
            }
        });

        jTextField207.setBackground(new java.awt.Color(255, 255, 204));
        jTextField207.setText("0.01514801");

        javax.swing.GroupLayout jPanel66Layout = new javax.swing.GroupLayout(jPanel66);
        jPanel66.setLayout(jPanel66Layout);
        jPanel66Layout.setHorizontalGroup(
            jPanel66Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel66Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel66Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel217, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel216, javax.swing.GroupLayout.DEFAULT_SIZE, 287, Short.MAX_VALUE)
                    .addComponent(jLabel218, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel66Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTextField205)
                    .addComponent(jTextField199)
                    .addComponent(jTextField204, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(jPanel66Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTextField206)
                    .addComponent(jTextField200)
                    .addComponent(jTextField203, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(jPanel66Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTextField207)
                    .addComponent(jTextField201)
                    .addComponent(jTextField202, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(407, 407, 407))
        );
        jPanel66Layout.setVerticalGroup(
            jPanel66Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel66Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel66Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel216)
                    .addComponent(jTextField199, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField200, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField201, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel66Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel217)
                    .addComponent(jTextField203, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField202, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField204, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel66Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel66Layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(jLabel218))
                    .addGroup(jPanel66Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jTextField206, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jTextField207, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jTextField205, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel59Layout = new javax.swing.GroupLayout(jPanel59);
        jPanel59.setLayout(jPanel59Layout);
        jPanel59Layout.setHorizontalGroup(
            jPanel59Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel63, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel64, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel66, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel59Layout.setVerticalGroup(
            jPanel59Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel59Layout.createSequentialGroup()
                .addComponent(jPanel63, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel64, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel66, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(16, 16, 16))
        );

        jTabbedPane10.addTab("TARIFAS 3.0 A", jPanel59);

        jPanel68.setBackground(new java.awt.Color(255, 255, 255));

        jLabel221.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel221.setText("RESUMEN");

        jLabel222.setText("DESDE");

        jTextField211.setBackground(new java.awt.Color(255, 255, 204));

        jLabel223.setText("HASTA");

        jTextField212.setBackground(new java.awt.Color(255, 255, 204));

        jLabel224.setText("DIAS:");

        jTextField213.setText("0");

        javax.swing.GroupLayout jPanel68Layout = new javax.swing.GroupLayout(jPanel68);
        jPanel68.setLayout(jPanel68Layout);
        jPanel68Layout.setHorizontalGroup(
            jPanel68Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel68Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel221, javax.swing.GroupLayout.DEFAULT_SIZE, 156, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel222, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE)
                .addGap(25, 25, 25)
                .addComponent(jTextField211, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(62, 62, 62)
                .addComponent(jLabel223)
                .addGap(12, 12, 12)
                .addComponent(jTextField212, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38)
                .addComponent(jLabel224)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField213, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(182, 182, 182))
        );
        jPanel68Layout.setVerticalGroup(
            jPanel68Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel68Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel68Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel68Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel221)
                        .addComponent(jLabel222))
                    .addGroup(jPanel68Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jTextField211, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel223)
                        .addComponent(jTextField212, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel224)
                        .addComponent(jTextField213, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel225.setText("COSTE POTENCIA (sin I.E.)");

        jLabel226.setText("COSTE ENERGÍA  (sin I.E.)");

        jLabel227.setText("TOTAL ESTIMADO (con I.E.)");

        jTextField214.setBackground(new java.awt.Color(204, 204, 255));
        jTextField214.setText("0");

        jTextField215.setBackground(new java.awt.Color(204, 204, 255));
        jTextField215.setText("0");

        jTextField216.setBackground(new java.awt.Color(204, 204, 255));
        jTextField216.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jTextField216.setText("0");
        jTextField216.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField216ActionPerformed(evt);
            }
        });

        jLabel228.setText("P1");

        jLabel229.setText("P2");

        jLabel230.setText("P3");

        jTextField217.setText("0");
        jTextField217.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField217ActionPerformed(evt);
            }
        });

        jTextField218.setText("0");

        jTextField219.setText("0");

        jTextField220.setText("0");

        jTextField221.setText("0");

        jTextField222.setText("0");

        jButton25.setText("RECALCULAR");
        jButton25.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton25ActionPerformed(evt);
            }
        });

        jCheckBox10.setText("SIMULAR CAMBIO A 6.1 A");

        javax.swing.GroupLayout jPanel69Layout = new javax.swing.GroupLayout(jPanel69);
        jPanel69.setLayout(jPanel69Layout);
        jPanel69Layout.setHorizontalGroup(
            jPanel69Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel69Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel69Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabel227, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel226, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel225, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel69Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTextField214)
                    .addComponent(jTextField215)
                    .addComponent(jTextField216, javax.swing.GroupLayout.DEFAULT_SIZE, 90, Short.MAX_VALUE))
                .addGroup(jPanel69Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel69Layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addGroup(jPanel69Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel69Layout.createSequentialGroup()
                                .addGap(27, 27, 27)
                                .addComponent(jLabel228, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(65, 65, 65)
                                .addComponent(jLabel229, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(51, 51, 51)
                                .addComponent(jLabel230, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel69Layout.createSequentialGroup()
                                .addGroup(jPanel69Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPanel69Layout.createSequentialGroup()
                                        .addComponent(jTextField220, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jTextField221, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel69Layout.createSequentialGroup()
                                        .addComponent(jTextField219, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jTextField218, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel69Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jTextField217, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTextField222, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(18, 18, 18)
                        .addComponent(jCheckBox10, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel69Layout.createSequentialGroup()
                        .addGap(294, 294, 294)
                        .addComponent(jButton25, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(165, Short.MAX_VALUE))
        );
        jPanel69Layout.setVerticalGroup(
            jPanel69Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel69Layout.createSequentialGroup()
                .addGroup(jPanel69Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel230)
                    .addComponent(jLabel229)
                    .addComponent(jLabel228))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel69Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField214, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel225)
                    .addComponent(jTextField219, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField218, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField217, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBox10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel69Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField215, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel226)
                    .addComponent(jTextField220, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField221, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField222, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel69Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField216, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel227)
                    .addComponent(jButton25)))
        );

        jLabel231.setText("PRECIO ENERGÍA OMIE X PERIODO €/kWh");

        jLabel232.setText("ENERGÍA CONSUMIDA kWh");

        jLabel233.setText("MAXIMETROS kW");

        jTextField223.setBackground(new java.awt.Color(204, 204, 255));
        jTextField223.setText("0");

        jTextField224.setBackground(new java.awt.Color(204, 204, 255));
        jTextField224.setText("0");

        jTextField225.setText("0");

        jTextField226.setText("0");
        jTextField226.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField226ActionPerformed(evt);
            }
        });

        jTextField227.setText("0");

        jTextField228.setText("0");

        jTextField229.setText("0");
        jTextField229.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField229ActionPerformed(evt);
            }
        });

        jTextField230.setText("0");

        jLabel234.setText("POTENCIA FACTURADA kW");

        jTextField231.setText("0");

        jTextField232.setText("0");

        jTextField233.setText("0");

        jTextField276.setText("0");

        jTextField277.setText("0");
        jTextField277.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField277ActionPerformed(evt);
            }
        });

        jTextField278.setText("0");

        jCheckBox9.setText("Bloquear datos maximetro");

        javax.swing.GroupLayout jPanel70Layout = new javax.swing.GroupLayout(jPanel70);
        jPanel70.setLayout(jPanel70Layout);
        jPanel70Layout.setHorizontalGroup(
            jPanel70Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel70Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel70Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel70Layout.createSequentialGroup()
                        .addComponent(jLabel234, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(238, 238, 238))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel70Layout.createSequentialGroup()
                        .addGroup(jPanel70Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel70Layout.createSequentialGroup()
                                .addGroup(jPanel70Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jLabel232, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel233, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel70Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jTextField224)
                                    .addComponent(jTextField223))
                                .addGap(29, 29, 29))
                            .addGroup(jPanel70Layout.createSequentialGroup()
                                .addComponent(jLabel231, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGroup(jPanel70Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jTextField225, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField230, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField231, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField276, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(jPanel70Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTextField226, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE)
                    .addComponent(jTextField229, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE)
                    .addComponent(jTextField232)
                    .addComponent(jTextField277))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel70Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTextField228, javax.swing.GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE)
                    .addComponent(jTextField227, javax.swing.GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE)
                    .addComponent(jTextField233)
                    .addComponent(jTextField278))
                .addGap(18, 18, 18)
                .addComponent(jCheckBox9, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(220, 220, 220))
        );
        jPanel70Layout.setVerticalGroup(
            jPanel70Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel70Layout.createSequentialGroup()
                .addContainerGap(47, Short.MAX_VALUE)
                .addGroup(jPanel70Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel231)
                    .addComponent(jTextField276, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField277, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField278, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel70Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField225, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField226, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField227, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel232)
                    .addComponent(jTextField223, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel70Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel233)
                    .addComponent(jTextField224, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField230, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField229, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField228, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBox9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel70Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel234)
                    .addComponent(jTextField231, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField232, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField233, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        jLabel235.setText("POTENCIAS CONTRATADAS POR PERIODO");

        jLabel236.setText("TARIFA DE POTENCIA €/kW · DIA");

        jLabel237.setText("OTROS COSTES TERMINO ENERGIA €/kW");

        jTextField234.setBackground(new java.awt.Color(255, 255, 204));
        jTextField234.setText("0");

        jTextField235.setBackground(new java.awt.Color(255, 255, 204));
        jTextField235.setText("0");
        jTextField235.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField235ActionPerformed(evt);
            }
        });

        jTextField236.setBackground(new java.awt.Color(255, 255, 204));
        jTextField236.setText("0");
        jTextField236.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField236ActionPerformed(evt);
            }
        });

        jTextField237.setBackground(new java.awt.Color(255, 255, 204));
        jTextField237.setText("0");

        jTextField238.setBackground(new java.awt.Color(255, 255, 204));
        jTextField238.setText("0");

        jTextField239.setBackground(new java.awt.Color(255, 255, 204));
        jTextField239.setText("0");

        jTextField240.setBackground(new java.awt.Color(255, 255, 204));
        jTextField240.setText("0.0354996");
        jTextField240.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField240ActionPerformed(evt);
            }
        });

        jTextField241.setBackground(new java.awt.Color(255, 255, 204));
        jTextField241.setText("0.02762264");

        jTextField242.setBackground(new java.awt.Color(255, 255, 204));
        jTextField242.setText("0.046294");

        javax.swing.GroupLayout jPanel71Layout = new javax.swing.GroupLayout(jPanel71);
        jPanel71.setLayout(jPanel71Layout);
        jPanel71Layout.setHorizontalGroup(
            jPanel71Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel71Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel71Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel236, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel235, javax.swing.GroupLayout.DEFAULT_SIZE, 290, Short.MAX_VALUE)
                    .addComponent(jLabel237, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel71Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTextField240)
                    .addComponent(jTextField234)
                    .addComponent(jTextField239, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(jPanel71Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTextField241)
                    .addComponent(jTextField235)
                    .addComponent(jTextField238, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(jPanel71Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTextField242)
                    .addComponent(jTextField236)
                    .addComponent(jTextField237, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(407, 407, 407))
        );
        jPanel71Layout.setVerticalGroup(
            jPanel71Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel71Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel71Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel235)
                    .addComponent(jTextField234, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField235, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField236, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel71Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel236)
                    .addComponent(jTextField238, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField237, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField239, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel71Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel71Layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(jLabel237))
                    .addGroup(jPanel71Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jTextField241, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jTextField242, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jTextField240, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel67Layout = new javax.swing.GroupLayout(jPanel67);
        jPanel67.setLayout(jPanel67Layout);
        jPanel67Layout.setHorizontalGroup(
            jPanel67Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel68, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel67Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel67Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel69, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel70, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel71, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel67Layout.setVerticalGroup(
            jPanel67Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel67Layout.createSequentialGroup()
                .addComponent(jPanel68, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel69, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel70, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(3, 3, 3)
                .addComponent(jPanel71, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jTabbedPane10.addTab("TARIFAS 3.1 A", jPanel67);

        javax.swing.GroupLayout jPanel52Layout = new javax.swing.GroupLayout(jPanel52);
        jPanel52.setLayout(jPanel52Layout);
        jPanel52Layout.setHorizontalGroup(
            jPanel52Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel52Layout.createSequentialGroup()
                .addComponent(jPanel53, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel52Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel54, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel52Layout.createSequentialGroup()
                        .addComponent(jPanel55, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTabbedPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 965, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel52Layout.setVerticalGroup(
            jPanel52Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel53, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel52Layout.createSequentialGroup()
                .addComponent(jPanel54, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel52Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel55, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTabbedPane10)))
        );

        jTabbedPane6.addTab("SIMULACION FACTURAS", jPanel52);

        jPanelGrafica01.setBackground(new java.awt.Color(204, 204, 255));

        javax.swing.GroupLayout jPanelGrafica01Layout = new javax.swing.GroupLayout(jPanelGrafica01);
        jPanelGrafica01.setLayout(jPanelGrafica01Layout);
        jPanelGrafica01Layout.setHorizontalGroup(
            jPanelGrafica01Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 435, Short.MAX_VALUE)
        );
        jPanelGrafica01Layout.setVerticalGroup(
            jPanelGrafica01Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jPanelGrafica02.setBackground(new java.awt.Color(204, 204, 255));

        javax.swing.GroupLayout jPanelGrafica02Layout = new javax.swing.GroupLayout(jPanelGrafica02);
        jPanelGrafica02.setLayout(jPanelGrafica02Layout);
        jPanelGrafica02Layout.setHorizontalGroup(
            jPanelGrafica02Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanelGrafica02Layout.setVerticalGroup(
            jPanelGrafica02Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 250, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanelGrafica03Layout = new javax.swing.GroupLayout(jPanelGrafica03);
        jPanelGrafica03.setLayout(jPanelGrafica03Layout);
        jPanelGrafica03Layout.setHorizontalGroup(
            jPanelGrafica03Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 597, Short.MAX_VALUE)
        );
        jPanelGrafica03Layout.setVerticalGroup(
            jPanelGrafica03Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 271, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel73Layout = new javax.swing.GroupLayout(jPanel73);
        jPanel73.setLayout(jPanel73Layout);
        jPanel73Layout.setHorizontalGroup(
            jPanel73Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel73Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel73Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanelGrafica01, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanelGrafica02, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanelGrafica03, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(630, Short.MAX_VALUE))
        );
        jPanel73Layout.setVerticalGroup(
            jPanel73Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel73Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel73Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanelGrafica03, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanelGrafica01, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jPanelGrafica02, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(313, Short.MAX_VALUE))
        );

        jTabbedPane6.addTab("SEGUIMIENTO DE AHORROS", jPanel73);

        jMenu1.setText("Conectar BD");
        jMenu1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu1ActionPerformed(evt);
            }
        });

        jMenuItem1.setText("Conectar con la Base de Datos saepdb");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Info");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jTabbedPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 1683, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2300, 2300, 2300)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(83, 83, 83)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 891, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenu1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu1ActionPerformed
        // ................................................................................
        // Conectamos con la base de datos
        conectarBD();
        
        
    }//GEN-LAST:event_jMenu1ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        conectarBD();
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jButton23ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton23ActionPerformed
        // iniciaBarra();
        insertarDatosEnTabla2();
    }//GEN-LAST:event_jButton23ActionPerformed

    private void jButton22ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton22ActionPerformed
        try {
            leerArchivoExel();
            mostrarDatosEnTabla();
        } catch (IOException ex) {
            Logger.getLogger(FramePrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton22ActionPerformed

    private void jTextField97FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextField97FocusLost
        String sFecha,sFechaPrc;
        Date fechaPrc;
        int dias ;
        sFecha = jTextField97.getText(); sFecha.trim();
        dias = Integer.valueOf(jTextField98.getText());

        sFechaPrc = sumarRestarDiasFecha(sFecha, this.duracionServicioDias-dias);

        jTextField103.setText(sFechaPrc);
    }//GEN-LAST:event_jTextField97FocusLost

    private void jTextField96FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextField96FocusLost
        String sFecha,sFechaPrc;
        Date fechaPrc;
        int dias ;
        sFecha = jTextField96.getText(); sFecha.trim();
        dias = Integer.valueOf(jTextField98.getText());

        sFechaPrc = sumarRestarDiasFecha(sFecha, this.duracionServicioDias-dias);

        jTextField102.setText(sFechaPrc);
    }//GEN-LAST:event_jTextField96FocusLost

    private void jTextField95FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextField95FocusLost
        String sFecha,sFechaPrc;
        Date fechaPrc;
        int dias ;
        sFecha = jTextField95.getText(); sFecha.trim();
        dias = Integer.valueOf(jTextField98.getText());

        sFechaPrc = sumarRestarDiasFecha(sFecha, this.duracionServicioDias-dias);

        jTextField101.setText(sFechaPrc);
    }//GEN-LAST:event_jTextField95FocusLost

    private void jTextField94FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextField94FocusLost
        String sFecha,sFechaPrc;
        Date fechaPrc;
        int dias ;
        sFecha = jTextField94.getText(); sFecha.trim();
        dias = Integer.valueOf(jTextField98.getText());

        sFechaPrc = sumarRestarDiasFecha(sFecha, this.duracionServicioDias-dias);

        jTextField100.setText(sFechaPrc);
    }//GEN-LAST:event_jTextField94FocusLost

    private void jTextField93FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextField93FocusLost
        String sFecha,sFechaPrc;
        Date fechaPrc;
        int dias ;
        sFecha = jTextField93.getText(); sFecha.trim();
        dias = Integer.valueOf(jTextField98.getText());

        sFechaPrc = sumarRestarDiasFecha(sFecha, this.duracionServicioDias-dias);

        jTextField99.setText(sFechaPrc);
    }//GEN-LAST:event_jTextField93FocusLost

    private void tipoSuministro1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tipoSuministro1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tipoSuministro1ActionPerformed

    private void tipoMedida1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tipoMedida1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tipoMedida1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        insertarNuevoPuntoSuministro();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        int i ;
        saepDao misaepDao1 = new saepDao();

        misaepDao1.consultaClientes();
        this.clientes = misaepDao1.clientes ;
        this.nClientes = misaepDao1.nClientes;

        System.out.println("Tengo "+this.nClientes+" que ACTUALIZAR...");

        listaClientesAdmin.removeAllItems();
        listaClientesAdmin.addItem("SELECCIONAR CLIENTE");
        for (i=0; i<this.nClientes; i++) {

            listaClientesAdmin.addItem(this.clientes[i][1]);
            System.out.println("Estoy añadiendo el cliente ="+this.clientes[i][1]);
        }
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jTextField48ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField48ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField48ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        jTextField53.setText("");
        jTextField54.setText("");
        jTextField55.setText("");
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        insertarCliente();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jTextField53ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField53ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField53ActionPerformed

    private void jButton20ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton20ActionPerformed
        saepDao misaepDao1 = new saepDao();
        misaepDao1.consultaClientes();
        this.clientes = misaepDao1.clientes ;
        this.nClientes = misaepDao1.nClientes;
        actualizarListaClientesAdministracion();
    }//GEN-LAST:event_jButton20ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        actualizarTablaAlertasServicio();
    }//GEN-LAST:event_jButton10ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            cargarDatosCliente();
        } catch (SQLException ex) {
            Logger.getLogger(FramePrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
        modificarArbolNuevos() ;
        actualizarTablaAnexoResumenAhorro(this.id_cliente_actual);
        try {
            actualizarTablaAnexoDetalleAhorro(this.id_cliente_actual);
        } catch (SQLException ex) {
            Logger.getLogger(FramePrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
        actualizarFechaUltimoCalculo(this.id_cliente_actual);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void listaClientesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listaClientesActionPerformed
        int ind = 0;
        ind = listaClientes.getSelectedIndex();                            // id Cliente
        if (ind>0 )      this.id_cliente_general = Integer.parseInt(this.clientes[ind-1][0]);
        System.out.println("He seleccionado cliente id="+this.id_cliente_general);
    }//GEN-LAST:event_listaClientesActionPerformed

    private void jButton18ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton18ActionPerformed
        generarExcelHistoricoCalculos();
    }//GEN-LAST:event_jButton18ActionPerformed

    private void botonActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonActualizarActionPerformed
        actualizarTablaHistoricoAhorroCliente(this.id_cliente_actual) ;
    }//GEN-LAST:event_botonActualizarActionPerformed

    private void jButton13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton13ActionPerformed
        anularLineaAhorro();
    }//GEN-LAST:event_jButton13ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed

        // ........................................................

        this.misDatos.idTipo = this.id_tipo_Sim;

        // ........................................................

        new miJDialogInformeSimple(this, true,misDatos).setVisible(true);
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jButton12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton12ActionPerformed

        int ahorro = 1000 ;

        new miJDialogGenerarInforme(this, true, ahorro).setVisible(true);
    }//GEN-LAST:event_jButton12ActionPerformed

    private void botonGenerarExelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonGenerarExelActionPerformed
        GenerarExelAnexoResumen();
        GenerarExelAnexoResumenDetalle();
    }//GEN-LAST:event_botonGenerarExelActionPerformed

    private void botonActualizaConsultaAnexoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonActualizaConsultaAnexoActionPerformed

        actualizarTablaAnexoResumenAhorro(this.id_cliente_actual);

        try {
            actualizarTablaAnexoDetalleAhorro(this.id_cliente_actual);
        } catch (SQLException ex) {
            Logger.getLogger(FramePrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_botonActualizaConsultaAnexoActionPerformed

    private void jComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox2ActionPerformed
        String str;
        str = jComboBox2.getSelectedItem().toString()  ;
        System.out.println("Acabo de capturar el comboBox TIPO DE FILTRO !!! Selecciono="+str);

        if (str.equals("ULTIMO CÁLCULO"))            { this.filtrobusca = 0 ; jTextField32.setVisible(false); jLabel53.setVisible(false);}
        if (str.equals("SELECCIONAR FECHA"))         { this.filtrobusca = 1 ; jTextField32.setVisible(true); jLabel53.setVisible(true);}
    }//GEN-LAST:event_jComboBox2ActionPerformed

    private void tipoSuministroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tipoSuministroActionPerformed
        // .................................... Marcar filtro de tipo de medida
        String str;
        str = tipoMedida.getSelectedItem().toString()  ;
        //  System.out.println("Acabo de capturar tipo de suministro Selecciono="+str);

        this.fCT = 0 ;
        if (str.equals("CON CT"))                   this.fCT = 1;
        if (str.equals("SIN CT"))                   this.fCT = 2 ;
    }//GEN-LAST:event_tipoSuministroActionPerformed

    private void tipoMedidaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tipoMedidaActionPerformed
        // .................................... Marcar filtro de tipo de medida
        String str;
        str = tipoMedida.getSelectedItem().toString()  ;
        // System.out.println("Acabo de capturar el tipo de medida!!! Selecciono="+str);

        this.ftipoMedida = 0 ;
        if (str.equals("MEDIDA DIRECTA"))            this.ftipoMedida = 1;
        if (str.equals("MEDIDA INDIRECTA"))          this.ftipoMedida = 2 ;
    }//GEN-LAST:event_tipoMedidaActionPerformed

    private void jTextField25KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField25KeyTyped
        botonValidarSim.setVisible(true);
    }//GEN-LAST:event_jTextField25KeyTyped

    private void jTextField24KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField24KeyTyped
        botonValidarSim.setVisible(true);
    }//GEN-LAST:event_jTextField24KeyTyped

    private void jTextField24ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField24ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField24ActionPerformed

    private void jTextField23KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField23KeyTyped
        botonValidarSim.setVisible(true);
    }//GEN-LAST:event_jTextField23KeyTyped

    private void jTextField22KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField22KeyTyped
        botonValidarSim.setVisible(true);
    }//GEN-LAST:event_jTextField22KeyTyped

    private void jTextField22ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField22ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField22ActionPerformed

    private void jTextField21KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField21KeyTyped
        botonValidarSim.setVisible(true);
    }//GEN-LAST:event_jTextField21KeyTyped

    private void jTextField20KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField20KeyTyped

        botonValidarSim.setVisible(true);
    }//GEN-LAST:event_jTextField20KeyTyped

    private void jTextField38KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField38KeyTyped
        botonValidarSim.setVisible(true);
    }//GEN-LAST:event_jTextField38KeyTyped

    private void jTextField37KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField37KeyTyped
        botonValidarSim.setVisible(true);
    }//GEN-LAST:event_jTextField37KeyTyped

    private void jTextField37ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField37ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField37ActionPerformed

    private void jTextField26KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField26KeyTyped
        botonValidarSim.setVisible(true);
    }//GEN-LAST:event_jTextField26KeyTyped

    private void jComboBox4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox4ActionPerformed
        this.id_tipo_Sim_Anterior = Integer.parseInt(this.listaContratosPuntos[this.indGen][3]);
        this.id_tipo_Sim= jComboBox4.getSelectedIndex();
        if (this.id_tipo_Sim_Anterior != this.id_tipo_Sim ){
            System.out.println("He modificado, ahora this.id_tipo_Sim="+this.id_tipo_Sim+" y el anterior era="+this.id_tipo_Sim_Anterior);
            this.listaContratosPuntos[this.indGen][3] =String.valueOf(this.id_tipo_Sim);
            actualizarFormularios(this.indGen);
        }
    }//GEN-LAST:event_jComboBox4ActionPerformed

    private void jComboBox4PopupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_jComboBox4PopupMenuWillBecomeVisible
        botonValidarSim.setVisible(true);
        this.id_tipo_Sim= jComboBox4.getSelectedIndex();
    }//GEN-LAST:event_jComboBox4PopupMenuWillBecomeVisible

    private void jComboBox4MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jComboBox4MousePressed

    }//GEN-LAST:event_jComboBox4MousePressed

    private void jComboBox4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jComboBox4MouseClicked

    }//GEN-LAST:event_jComboBox4MouseClicked

    private void botonValidarSimActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonValidarSimActionPerformed
        ValidarCondicionesSimuladas();
    }//GEN-LAST:event_botonValidarSimActionPerformed

    private void jComboBox3KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jComboBox3KeyTyped

    }//GEN-LAST:event_jComboBox3KeyTyped

    private void jComboBox3PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jComboBox3PropertyChange

    }//GEN-LAST:event_jComboBox3PropertyChange

    private void jComboBox3FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jComboBox3FocusGained

    }//GEN-LAST:event_jComboBox3FocusGained

    private void jComboBox3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox3ActionPerformed
        this.id_tipo_Actual_Anterior = Integer.parseInt(this.listaContratosPuntosAct[this.indGen][3]);
        this.id_tipo_Actual= jComboBox3.getSelectedIndex();
        if (this.id_tipo_Actual_Anterior != this.id_tipo_Actual ) {
            System.out.println("He modificado, ahora this.id_tipo_Actual="+this.id_tipo_Actual+" y el anterior era="+this.id_tipo_Actual_Anterior);
            this.listaContratosPuntosAct[this.indGen][3] = String.valueOf(this.id_tipo_Actual);
            actualizarFormularios(this.indGen);
        }
    }//GEN-LAST:event_jComboBox3ActionPerformed

    private void jComboBox3ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox3ItemStateChanged
        // botonValidarCAct.setVisible(true);
    }//GEN-LAST:event_jComboBox3ItemStateChanged

    private void jComboBox3PopupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_jComboBox3PopupMenuWillBecomeVisible
        botonValidarCAct.setVisible(true);
    }//GEN-LAST:event_jComboBox3PopupMenuWillBecomeVisible

    private void jComboBox3MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jComboBox3MousePressed

    }//GEN-LAST:event_jComboBox3MousePressed

    private void jComboBox3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jComboBox3MouseClicked

    }//GEN-LAST:event_jComboBox3MouseClicked

    private void botonValidarCActActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonValidarCActActionPerformed
        System.out.println("condiciones actuales cambian a :"+this.tipo_Act );
        ValidarCondicionesActuales();
    }//GEN-LAST:event_botonValidarCActActionPerformed

    private void jTextField36KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField36KeyTyped
        botonValidarCAct.setVisible(true);
    }//GEN-LAST:event_jTextField36KeyTyped

    private void jTextField35KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField35KeyTyped
        botonValidarCAct.setVisible(true);
    }//GEN-LAST:event_jTextField35KeyTyped

    private void jTextField19KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField19KeyTyped
        botonValidarCAct.setVisible(true);
    }//GEN-LAST:event_jTextField19KeyTyped

    private void jTextField18KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField18KeyTyped
        botonValidarCAct.setVisible(true);
    }//GEN-LAST:event_jTextField18KeyTyped

    private void jTextField18ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField18ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField18ActionPerformed

    private void jTextField17KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField17KeyTyped
        botonValidarCAct.setVisible(true);
    }//GEN-LAST:event_jTextField17KeyTyped

    private void jTextField16KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField16KeyTyped
        botonValidarCAct.setVisible(true);
    }//GEN-LAST:event_jTextField16KeyTyped

    private void jTextField14KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField14KeyTyped
        botonValidarCAct.setVisible(true);
    }//GEN-LAST:event_jTextField14KeyTyped

    private void jTextField14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField14ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField14ActionPerformed

    private void jTextField13KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField13KeyTyped
        botonValidarCAct.setVisible(true);
    }//GEN-LAST:event_jTextField13KeyTyped

// ........................... DETECTA CAMBIOS EN CONDICIONES DE FACTURACION ACTUALES
    private void jTextField12KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField12KeyTyped
        botonValidarCAct.setVisible(true);
    }//GEN-LAST:event_jTextField12KeyTyped

    private void jTextField12InputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_jTextField12InputMethodTextChanged
        botonValidarCAct.setVisible(true);
    }//GEN-LAST:event_jTextField12InputMethodTextChanged

    private void jComboBox8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox8ActionPerformed
        // .................................... Marcar filtro de tipo de medida
        String str;
        str = jComboBox8.getSelectedItem().toString()  ;
        str = str.trim();
        //  System.out.println("Acabo de capturar tipo de suministro Selecciono="+str);

        this.fPotenciaFacturada = 0 ;
        if (str.equals("ENERGIA FACTURADA"))             {      this.fEnergiaSimulada   = 0;   this.jPanel26.setVisible(true); this.jPanel50.setVisible(false); }
        if (str.equals("ENERGÍA SIMULADA"))              {      this.fEnergiaSimulada   = 1 ;  this.jPanel26.setVisible(false); this.jPanel50.setVisible(true); }

        System.out.println("Capturo evento cambio ComboBox, fEnergiaSimulada="+fEnergiaSimulada);
    }//GEN-LAST:event_jComboBox8ActionPerformed

    private void jButton17ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton17ActionPerformed
        jTextField7.setText(jTextField71.getText());
        jTextField8.setText(jTextField72.getText());
    }//GEN-LAST:event_jButton17ActionPerformed

    private void jButton16ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton16ActionPerformed
        jTextField7.setText(jTextField69.getText());
        jTextField8.setText(jTextField70.getText());
    }//GEN-LAST:event_jButton16ActionPerformed

    private void jButton15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton15ActionPerformed
        jTextField7.setText(jTextField67.getText());
        jTextField8.setText(jTextField68.getText());
    }//GEN-LAST:event_jButton15ActionPerformed

    private void jButton14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton14ActionPerformed
        jTextField7.setText(jTextField65.getText());
        jTextField8.setText(jTextField66.getText());
    }//GEN-LAST:event_jButton14ActionPerformed

    private void jTextField6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField6ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField6ActionPerformed

    private void jTextField46ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField46ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField46ActionPerformed

    private void jComboBox7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox7ActionPerformed
        // .................................... Marcar filtro de tipo de medida
        String str;
        str = jComboBox7.getSelectedItem().toString()  ;
        str = str.trim();
        //  System.out.println("Acabo de capturar tipo de suministro Selecciono="+str);

        this.fPotenciaFacturada = 0 ;
        if (str.equals("Potencia de maxímetro"))                   this.fPotenciaFacturada = 0;
        if (str.equals("Potencia facturada"))                      this.fPotenciaFacturada = 1 ;

        System.out.println("Capturo evento cambio ComboBox, fPotenciaFacturada="+fPotenciaFacturada);
    }//GEN-LAST:event_jComboBox7ActionPerformed

    private void botonValidarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonValidarActionPerformed
        insertarFilaAhorro();
        actualizarTablaHistoricoPuntos(this.id_punto_actual) ;
    }//GEN-LAST:event_botonValidarActionPerformed

    private void botonDetallesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonDetallesActionPerformed

        new miJDialogDetallesCalculos(this, true).setVisible(true);
    }//GEN-LAST:event_botonDetallesActionPerformed

    private void botonBorrarCamposActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonBorrarCamposActionPerformed
        jTextField30.setText("");
        jTextField47.setText("");
        jTextField15.setText("");
        jTextField27.setText("");
        jTextField5.setText("");

        energiaP1.setText("0");
        energiaP2.setText("0");
        energiaP3.setText("0");
    }//GEN-LAST:event_botonBorrarCamposActionPerformed

    private void botonCalculoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonCalculoActionPerformed
        calculoPreliminarPunto();
    }//GEN-LAST:event_botonCalculoActionPerformed

    private void jTextField60ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField60ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField60ActionPerformed

    // ----------------------------------------------------------------------------------------------------
    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
        int resp=JOptionPane.showConfirmDialog(null,"¿ACTUALIZAR LOS DATOS DEL PUNTO DE SUMINISTRO ?");

        if (JOptionPane.OK_OPTION == resp){
            modificarDatosPuntoSuministro();
        }
    }//GEN-LAST:event_jButton11ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        buscarCUPSe();
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jTextField131ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField131ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField131ActionPerformed

    private void jTextField136ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField136ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField136ActionPerformed

    private void jButton21ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton21ActionPerformed
        recalcularSimulacionFacturaP6();
    }//GEN-LAST:event_jButton21ActionPerformed

    private void jTextField154ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField154ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField154ActionPerformed

    private void jTextField156ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField156ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField156ActionPerformed

    private void jTextField168ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField168ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField168ActionPerformed

    private void jTextField146ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField146ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField146ActionPerformed

    private void jTextField167ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField167ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField167ActionPerformed

    private void jComboBox9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox9ActionPerformed
         // .................................... Marcar filtro de tipo de medida
        String str;
        str = jComboBox9.getSelectedItem().toString()  ;
        str = str.trim();
        
        this.fPotenciaFacturada = 0 ;
        if (str.equals("CALENDARIO ENERGÉTICO P6.1"))             {   this.jLabel220.setVisible(false);  this.jLabel200.setVisible(false); this.jLabel202.setVisible(true); }
        if (str.equals("CALENDARIO ENERGÉTICO P3.0"))             {   this.jLabel220.setVisible(true);    this.jLabel202.setVisible(false); this.jLabel200.setVisible(false); }
        if (str.equals("CALENDARIO ENERGÉTICO P3.1"))             {   this.jLabel220.setVisible(false);    this.jLabel202.setVisible(false); this.jLabel200.setVisible(true); }

    }//GEN-LAST:event_jComboBox9ActionPerformed

    private void jTextField164ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField164ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField164ActionPerformed

    private void jTextField165ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField165ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField165ActionPerformed

    private void jTextField197ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField197ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField197ActionPerformed

    private void jTextField200ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField200ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField200ActionPerformed

    private void jTextField201ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField201ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField201ActionPerformed

    private void jTextField194ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField194ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField194ActionPerformed

    private void jButton24ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton24ActionPerformed
        recalcularSimulacionFacturaP3();
    }//GEN-LAST:event_jButton24ActionPerformed

    private void jTextField216ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField216ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField216ActionPerformed

    private void jTextField217ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField217ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField217ActionPerformed

    private void jTextField226ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField226ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField226ActionPerformed

    private void jTextField229ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField229ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField229ActionPerformed

    private void jButton25ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton25ActionPerformed
        recalcularSimulacionFacturaP31();
    }//GEN-LAST:event_jButton25ActionPerformed

    private void jTextField235ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField235ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField235ActionPerformed

    private void jTextField236ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField236ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField236ActionPerformed

    private void jComboBox10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox10ActionPerformed
       // ....................................... seleccionamos una tabla para insertar datos en ella.
        String str;
        str = jComboBox10.getSelectedItem().toString()  ;
        str = str.trim();
        
        this.fPotenciaFacturada = 0 ;
        if (str.equals("DATOS  PRECIO ENERGIA MERCADO OMIE"))           {   tabla.setText("t_datos_mercado_omie"); }
        if (str.equals("DATOS DE CONSUMO ENERGÍA HORARIA"))             {   tabla.setText("t_datos_consumos_hr"); }
        if (str.equals("DATOS DE POTENCIA CUARTO-HORARIA"))             {   tabla.setText("t_datos_potencia_6PQ"); }

    }//GEN-LAST:event_jComboBox10ActionPerformed

    private void botonValidarCAct1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonValidarCAct1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_botonValidarCAct1ActionPerformed

    private void jComboBox11MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jComboBox11MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox11MouseClicked

    private void jComboBox11MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jComboBox11MousePressed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox11MousePressed

    private void jComboBox11PopupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_jComboBox11PopupMenuWillBecomeVisible
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox11PopupMenuWillBecomeVisible

    private void jComboBox11ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox11ItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox11ItemStateChanged

    private void jComboBox11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox11ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox11ActionPerformed

    private void jComboBox11FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jComboBox11FocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox11FocusGained

    private void jComboBox11PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jComboBox11PropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox11PropertyChange

    private void jComboBox11KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jComboBox11KeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox11KeyTyped

    private void jTextField246InputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_jTextField246InputMethodTextChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField246InputMethodTextChanged

    private void jTextField246KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField246KeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField246KeyTyped

    private void jTextField247KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField247KeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField247KeyTyped

    private void jTextField248ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField248ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField248ActionPerformed

    private void jTextField248KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField248KeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField248KeyTyped

    private void jTextField249InputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_jTextField249InputMethodTextChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField249InputMethodTextChanged

    private void jTextField249KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField249KeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField249KeyTyped

    private void jTextField250KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField250KeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField250KeyTyped

    private void jTextField251ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField251ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField251ActionPerformed

    private void jTextField251KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField251KeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField251KeyTyped

    private void jTextField252InputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_jTextField252InputMethodTextChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField252InputMethodTextChanged

    private void jTextField252KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField252KeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField252KeyTyped

    private void jTextField253KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField253KeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField253KeyTyped

    private void jTextField254ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField254ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField254ActionPerformed

    private void jTextField254KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField254KeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField254KeyTyped

    private void jTextField255InputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_jTextField255InputMethodTextChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField255InputMethodTextChanged

    private void jTextField255KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField255KeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField255KeyTyped

    private void jTextField256KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField256KeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField256KeyTyped

    private void jTextField257ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField257ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField257ActionPerformed

    private void jTextField257KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField257KeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField257KeyTyped

    private void jTextField258InputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_jTextField258InputMethodTextChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField258InputMethodTextChanged

    private void jTextField258KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField258KeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField258KeyTyped

    private void jTextField259KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField259KeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField259KeyTyped

    private void jTextField260ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField260ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField260ActionPerformed

    private void jTextField260KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField260KeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField260KeyTyped

    private void jTextField261InputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_jTextField261InputMethodTextChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField261InputMethodTextChanged

    private void jTextField261KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField261KeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField261KeyTyped

    private void jTextField262KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField262KeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField262KeyTyped

    private void jTextField263ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField263ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField263ActionPerformed

    private void jTextField263KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField263KeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField263KeyTyped

    private void jTextField171ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField171ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField171ActionPerformed

    private void jTextField206ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField206ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField206ActionPerformed

    private void jTextField240ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField240ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField240ActionPerformed

    private void jTextField148ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField148ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField148ActionPerformed

    private void jTextField277ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField277ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField277ActionPerformed

    private void jTextField205ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField205ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField205ActionPerformed

 





    


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel PCContrato;
    private javax.swing.JPanel PDEntrada20A;
    private javax.swing.JTree arbol;
    private javax.swing.JTree arbol02;
    private javax.swing.JTree arbolPrecios;
    private javax.swing.JTree arbolSimulaciones;
    private javax.swing.JTextField bdname;
    private javax.swing.JButton botonActualizaConsultaAnexo;
    private javax.swing.JButton botonActualizar;
    private javax.swing.JButton botonBorrarCampos;
    private javax.swing.JButton botonCalculo;
    private javax.swing.JButton botonDetalles;
    private javax.swing.JButton botonGenerarExel;
    private javax.swing.JButton botonValidar;
    private javax.swing.JButton botonValidarCAct;
    private javax.swing.JButton botonValidarCAct1;
    private javax.swing.JButton botonValidarSim;
    private javax.swing.JTextField energiaP1;
    private javax.swing.JTextField energiaP1s;
    private javax.swing.JTextField energiaP2;
    private javax.swing.JTextField energiaP2s;
    private javax.swing.JTextField energiaP3;
    private javax.swing.JTextField energiaP3s;
    private javax.swing.JTextField host;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton13;
    private javax.swing.JButton jButton14;
    private javax.swing.JButton jButton15;
    private javax.swing.JButton jButton16;
    private javax.swing.JButton jButton17;
    private javax.swing.JButton jButton18;
    private javax.swing.JButton jButton19;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton20;
    private javax.swing.JButton jButton21;
    private javax.swing.JButton jButton22;
    private javax.swing.JButton jButton23;
    private javax.swing.JButton jButton24;
    private javax.swing.JButton jButton25;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox10;
    private javax.swing.JCheckBox jCheckBox11;
    private javax.swing.JCheckBox jCheckBox12;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JCheckBox jCheckBox3;
    private javax.swing.JCheckBox jCheckBox4;
    private javax.swing.JCheckBox jCheckBox5;
    private javax.swing.JCheckBox jCheckBox6;
    private javax.swing.JCheckBox jCheckBox7;
    private javax.swing.JCheckBox jCheckBox8;
    private javax.swing.JCheckBox jCheckBox9;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JComboBox jComboBox10;
    private javax.swing.JComboBox jComboBox11;
    private javax.swing.JComboBox jComboBox2;
    private javax.swing.JComboBox jComboBox3;
    private javax.swing.JComboBox jComboBox4;
    private javax.swing.JComboBox jComboBox5;
    private javax.swing.JComboBox jComboBox6;
    private javax.swing.JComboBox jComboBox7;
    private javax.swing.JComboBox jComboBox8;
    private javax.swing.JComboBox jComboBox9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel100;
    private javax.swing.JLabel jLabel101;
    private javax.swing.JLabel jLabel102;
    private javax.swing.JLabel jLabel103;
    private javax.swing.JLabel jLabel104;
    private javax.swing.JLabel jLabel105;
    private javax.swing.JLabel jLabel106;
    private javax.swing.JLabel jLabel107;
    private javax.swing.JLabel jLabel108;
    private javax.swing.JLabel jLabel109;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel110;
    private javax.swing.JLabel jLabel111;
    private javax.swing.JLabel jLabel112;
    private javax.swing.JLabel jLabel113;
    private javax.swing.JLabel jLabel114;
    private javax.swing.JLabel jLabel115;
    private javax.swing.JLabel jLabel116;
    private javax.swing.JLabel jLabel117;
    private javax.swing.JLabel jLabel118;
    private javax.swing.JLabel jLabel119;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel120;
    private javax.swing.JLabel jLabel121;
    private javax.swing.JLabel jLabel122;
    private javax.swing.JLabel jLabel123;
    private javax.swing.JLabel jLabel124;
    private javax.swing.JLabel jLabel125;
    private javax.swing.JLabel jLabel126;
    private javax.swing.JLabel jLabel127;
    private javax.swing.JLabel jLabel128;
    private javax.swing.JLabel jLabel129;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel130;
    private javax.swing.JLabel jLabel131;
    private javax.swing.JLabel jLabel132;
    private javax.swing.JLabel jLabel133;
    private javax.swing.JLabel jLabel134;
    private javax.swing.JLabel jLabel135;
    private javax.swing.JLabel jLabel136;
    private javax.swing.JLabel jLabel137;
    private javax.swing.JLabel jLabel138;
    private javax.swing.JLabel jLabel139;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel140;
    private javax.swing.JLabel jLabel141;
    private javax.swing.JLabel jLabel142;
    private javax.swing.JLabel jLabel143;
    private javax.swing.JLabel jLabel144;
    private javax.swing.JLabel jLabel145;
    private javax.swing.JLabel jLabel146;
    private javax.swing.JLabel jLabel147;
    private javax.swing.JLabel jLabel148;
    private javax.swing.JLabel jLabel149;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel150;
    private javax.swing.JLabel jLabel151;
    private javax.swing.JLabel jLabel152;
    private javax.swing.JLabel jLabel153;
    private javax.swing.JLabel jLabel154;
    private javax.swing.JLabel jLabel155;
    private javax.swing.JLabel jLabel156;
    private javax.swing.JLabel jLabel157;
    private javax.swing.JLabel jLabel158;
    private javax.swing.JLabel jLabel159;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel160;
    private javax.swing.JLabel jLabel161;
    private javax.swing.JLabel jLabel162;
    private javax.swing.JLabel jLabel163;
    private javax.swing.JLabel jLabel164;
    private javax.swing.JLabel jLabel165;
    private javax.swing.JLabel jLabel166;
    private javax.swing.JLabel jLabel167;
    private javax.swing.JLabel jLabel168;
    private javax.swing.JLabel jLabel169;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel170;
    private javax.swing.JLabel jLabel171;
    private javax.swing.JLabel jLabel172;
    private javax.swing.JLabel jLabel173;
    private javax.swing.JLabel jLabel174;
    private javax.swing.JLabel jLabel175;
    private javax.swing.JLabel jLabel176;
    private javax.swing.JLabel jLabel177;
    private javax.swing.JLabel jLabel178;
    private javax.swing.JLabel jLabel179;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel180;
    private javax.swing.JLabel jLabel181;
    private javax.swing.JLabel jLabel182;
    private javax.swing.JLabel jLabel183;
    private javax.swing.JLabel jLabel184;
    private javax.swing.JLabel jLabel185;
    private javax.swing.JLabel jLabel186;
    private javax.swing.JLabel jLabel187;
    private javax.swing.JLabel jLabel188;
    private javax.swing.JLabel jLabel189;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel190;
    private javax.swing.JLabel jLabel191;
    private javax.swing.JLabel jLabel192;
    private javax.swing.JLabel jLabel193;
    private javax.swing.JLabel jLabel194;
    private javax.swing.JLabel jLabel195;
    private javax.swing.JLabel jLabel196;
    private javax.swing.JLabel jLabel197;
    private javax.swing.JLabel jLabel198;
    private javax.swing.JLabel jLabel199;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel200;
    private javax.swing.JLabel jLabel201;
    private javax.swing.JLabel jLabel202;
    private javax.swing.JLabel jLabel203;
    private javax.swing.JLabel jLabel204;
    private javax.swing.JLabel jLabel205;
    private javax.swing.JLabel jLabel206;
    private javax.swing.JLabel jLabel207;
    private javax.swing.JLabel jLabel208;
    private javax.swing.JLabel jLabel209;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel210;
    private javax.swing.JLabel jLabel211;
    private javax.swing.JLabel jLabel212;
    private javax.swing.JLabel jLabel213;
    private javax.swing.JLabel jLabel214;
    private javax.swing.JLabel jLabel215;
    private javax.swing.JLabel jLabel216;
    private javax.swing.JLabel jLabel217;
    private javax.swing.JLabel jLabel218;
    private javax.swing.JLabel jLabel219;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel220;
    private javax.swing.JLabel jLabel221;
    private javax.swing.JLabel jLabel222;
    private javax.swing.JLabel jLabel223;
    private javax.swing.JLabel jLabel224;
    private javax.swing.JLabel jLabel225;
    private javax.swing.JLabel jLabel226;
    private javax.swing.JLabel jLabel227;
    private javax.swing.JLabel jLabel228;
    private javax.swing.JLabel jLabel229;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel230;
    private javax.swing.JLabel jLabel231;
    private javax.swing.JLabel jLabel232;
    private javax.swing.JLabel jLabel233;
    private javax.swing.JLabel jLabel234;
    private javax.swing.JLabel jLabel235;
    private javax.swing.JLabel jLabel236;
    private javax.swing.JLabel jLabel237;
    private javax.swing.JLabel jLabel238;
    private javax.swing.JLabel jLabel239;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel240;
    private javax.swing.JLabel jLabel241;
    private javax.swing.JLabel jLabel242;
    private javax.swing.JLabel jLabel243;
    private javax.swing.JLabel jLabel244;
    private javax.swing.JLabel jLabel245;
    private javax.swing.JLabel jLabel246;
    private javax.swing.JLabel jLabel247;
    private javax.swing.JLabel jLabel248;
    private javax.swing.JLabel jLabel249;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel250;
    private javax.swing.JLabel jLabel251;
    private javax.swing.JLabel jLabel252;
    private javax.swing.JLabel jLabel253;
    private javax.swing.JLabel jLabel254;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JLabel jLabel46;
    private javax.swing.JLabel jLabel47;
    private javax.swing.JLabel jLabel48;
    private javax.swing.JLabel jLabel49;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel50;
    private javax.swing.JLabel jLabel51;
    private javax.swing.JLabel jLabel52;
    private javax.swing.JLabel jLabel53;
    private javax.swing.JLabel jLabel54;
    private javax.swing.JLabel jLabel55;
    private javax.swing.JLabel jLabel56;
    private javax.swing.JLabel jLabel57;
    private javax.swing.JLabel jLabel58;
    private javax.swing.JLabel jLabel59;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel60;
    private javax.swing.JLabel jLabel61;
    private javax.swing.JLabel jLabel62;
    private javax.swing.JLabel jLabel63;
    private javax.swing.JLabel jLabel64;
    private javax.swing.JLabel jLabel65;
    private javax.swing.JLabel jLabel66;
    private javax.swing.JLabel jLabel67;
    private javax.swing.JLabel jLabel68;
    private javax.swing.JLabel jLabel69;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel70;
    private javax.swing.JLabel jLabel71;
    private javax.swing.JLabel jLabel72;
    private javax.swing.JLabel jLabel73;
    private javax.swing.JLabel jLabel74;
    private javax.swing.JLabel jLabel75;
    private javax.swing.JLabel jLabel76;
    private javax.swing.JLabel jLabel77;
    private javax.swing.JLabel jLabel78;
    private javax.swing.JLabel jLabel79;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel80;
    private javax.swing.JLabel jLabel81;
    private javax.swing.JLabel jLabel82;
    private javax.swing.JLabel jLabel83;
    private javax.swing.JLabel jLabel84;
    private javax.swing.JLabel jLabel85;
    private javax.swing.JLabel jLabel86;
    private javax.swing.JLabel jLabel87;
    private javax.swing.JLabel jLabel88;
    private javax.swing.JLabel jLabel89;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabel90;
    private javax.swing.JLabel jLabel91;
    private javax.swing.JLabel jLabel92;
    private javax.swing.JLabel jLabel93;
    private javax.swing.JLabel jLabel94;
    private javax.swing.JLabel jLabel95;
    private javax.swing.JLabel jLabel96;
    private javax.swing.JLabel jLabel97;
    private javax.swing.JLabel jLabel98;
    private javax.swing.JLabel jLabel99;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel22;
    private javax.swing.JPanel jPanel23;
    private javax.swing.JPanel jPanel24;
    private javax.swing.JPanel jPanel25;
    private javax.swing.JPanel jPanel26;
    private javax.swing.JPanel jPanel27;
    private javax.swing.JPanel jPanel28;
    private javax.swing.JPanel jPanel29;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel30;
    private javax.swing.JPanel jPanel31;
    private javax.swing.JPanel jPanel32;
    private javax.swing.JPanel jPanel33;
    private javax.swing.JPanel jPanel34;
    private javax.swing.JPanel jPanel35;
    private javax.swing.JPanel jPanel36;
    private javax.swing.JPanel jPanel37;
    private javax.swing.JPanel jPanel38;
    private javax.swing.JPanel jPanel39;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel40;
    private javax.swing.JPanel jPanel41;
    private javax.swing.JPanel jPanel42;
    private javax.swing.JPanel jPanel43;
    private javax.swing.JPanel jPanel44;
    private javax.swing.JPanel jPanel45;
    private javax.swing.JPanel jPanel46;
    private javax.swing.JPanel jPanel47;
    private javax.swing.JPanel jPanel48;
    private javax.swing.JPanel jPanel49;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel50;
    private javax.swing.JPanel jPanel51;
    private javax.swing.JPanel jPanel52;
    private javax.swing.JPanel jPanel53;
    private javax.swing.JPanel jPanel54;
    private javax.swing.JPanel jPanel55;
    private javax.swing.JPanel jPanel56;
    private javax.swing.JPanel jPanel57;
    private javax.swing.JPanel jPanel58;
    private javax.swing.JPanel jPanel59;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel60;
    private javax.swing.JPanel jPanel61;
    private javax.swing.JPanel jPanel62;
    private javax.swing.JPanel jPanel63;
    private javax.swing.JPanel jPanel64;
    private javax.swing.JPanel jPanel65;
    private javax.swing.JPanel jPanel66;
    private javax.swing.JPanel jPanel67;
    private javax.swing.JPanel jPanel68;
    private javax.swing.JPanel jPanel69;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel70;
    private javax.swing.JPanel jPanel71;
    private javax.swing.JPanel jPanel72;
    private javax.swing.JPanel jPanel73;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JPanel jPanelGrafica01;
    private javax.swing.JPanel jPanelGrafica02;
    private javax.swing.JPanel jPanelGrafica03;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane12;
    private javax.swing.JScrollPane jScrollPane13;
    private javax.swing.JScrollPane jScrollPane14;
    private javax.swing.JScrollPane jScrollPane15;
    private javax.swing.JScrollPane jScrollPane16;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane10;
    private javax.swing.JTabbedPane jTabbedPane11;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTabbedPane jTabbedPane3;
    private javax.swing.JTabbedPane jTabbedPane4;
    private javax.swing.JTabbedPane jTabbedPane5;
    private javax.swing.JTabbedPane jTabbedPane6;
    private javax.swing.JTabbedPane jTabbedPane7;
    private javax.swing.JTabbedPane jTabbedPane8;
    private javax.swing.JTabbedPane jTabbedPane9;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextArea jTextArea3;
    private javax.swing.JTextArea jTextArea4;
    private javax.swing.JTextArea jTextArea5;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField10;
    private javax.swing.JTextField jTextField100;
    private javax.swing.JTextField jTextField101;
    private javax.swing.JTextField jTextField102;
    private javax.swing.JTextField jTextField103;
    private javax.swing.JTextField jTextField104;
    private javax.swing.JTextField jTextField105;
    private javax.swing.JTextField jTextField106;
    private javax.swing.JTextField jTextField107;
    private javax.swing.JTextField jTextField108;
    private javax.swing.JTextField jTextField109;
    private javax.swing.JTextField jTextField11;
    private javax.swing.JTextField jTextField110;
    private javax.swing.JTextField jTextField111;
    private javax.swing.JTextField jTextField112;
    private javax.swing.JTextField jTextField113;
    private javax.swing.JTextField jTextField114;
    private javax.swing.JTextField jTextField115;
    private javax.swing.JTextField jTextField116;
    private javax.swing.JTextField jTextField117;
    private javax.swing.JTextField jTextField118;
    private javax.swing.JTextField jTextField119;
    private javax.swing.JTextField jTextField12;
    private javax.swing.JTextField jTextField120;
    private javax.swing.JTextField jTextField121;
    private javax.swing.JTextField jTextField122;
    private javax.swing.JTextField jTextField123;
    private javax.swing.JTextField jTextField124;
    private javax.swing.JTextField jTextField125;
    private javax.swing.JTextField jTextField126;
    private javax.swing.JTextField jTextField127;
    private javax.swing.JTextField jTextField128;
    private javax.swing.JTextField jTextField129;
    private javax.swing.JTextField jTextField13;
    private javax.swing.JTextField jTextField130;
    private javax.swing.JTextField jTextField131;
    private javax.swing.JTextField jTextField132;
    private javax.swing.JTextField jTextField133;
    private javax.swing.JTextField jTextField134;
    private javax.swing.JTextField jTextField135;
    private javax.swing.JTextField jTextField136;
    private javax.swing.JTextField jTextField137;
    private javax.swing.JTextField jTextField138;
    private javax.swing.JTextField jTextField139;
    private javax.swing.JTextField jTextField14;
    private javax.swing.JTextField jTextField140;
    private javax.swing.JTextField jTextField141;
    private javax.swing.JTextField jTextField142;
    private javax.swing.JTextField jTextField143;
    private javax.swing.JTextField jTextField144;
    private javax.swing.JTextField jTextField145;
    private javax.swing.JTextField jTextField146;
    private javax.swing.JTextField jTextField147;
    private javax.swing.JTextField jTextField148;
    private javax.swing.JTextField jTextField149;
    private javax.swing.JTextField jTextField15;
    private javax.swing.JTextField jTextField150;
    private javax.swing.JTextField jTextField151;
    private javax.swing.JTextField jTextField152;
    private javax.swing.JTextField jTextField153;
    private javax.swing.JTextField jTextField154;
    private javax.swing.JTextField jTextField155;
    private javax.swing.JTextField jTextField156;
    private javax.swing.JTextField jTextField157;
    private javax.swing.JTextField jTextField158;
    private javax.swing.JTextField jTextField159;
    private javax.swing.JTextField jTextField16;
    private javax.swing.JTextField jTextField160;
    private javax.swing.JTextField jTextField161;
    private javax.swing.JTextField jTextField162;
    private javax.swing.JTextField jTextField163;
    private javax.swing.JTextField jTextField164;
    private javax.swing.JTextField jTextField165;
    private javax.swing.JTextField jTextField166;
    private javax.swing.JTextField jTextField167;
    private javax.swing.JTextField jTextField168;
    private javax.swing.JTextField jTextField169;
    private javax.swing.JTextField jTextField17;
    private javax.swing.JTextField jTextField170;
    private javax.swing.JTextField jTextField171;
    private javax.swing.JTextField jTextField172;
    private javax.swing.JTextField jTextField173;
    private javax.swing.JTextField jTextField174;
    private javax.swing.JTextField jTextField175;
    private javax.swing.JTextField jTextField176;
    private javax.swing.JTextField jTextField177;
    private javax.swing.JTextField jTextField178;
    private javax.swing.JTextField jTextField179;
    private javax.swing.JTextField jTextField18;
    private javax.swing.JTextField jTextField180;
    private javax.swing.JTextField jTextField181;
    private javax.swing.JTextField jTextField182;
    private javax.swing.JTextField jTextField183;
    private javax.swing.JTextField jTextField184;
    private javax.swing.JTextField jTextField185;
    private javax.swing.JTextField jTextField186;
    private javax.swing.JTextField jTextField187;
    private javax.swing.JTextField jTextField188;
    private javax.swing.JTextField jTextField189;
    private javax.swing.JTextField jTextField19;
    private javax.swing.JTextField jTextField190;
    private javax.swing.JTextField jTextField191;
    private javax.swing.JTextField jTextField192;
    private javax.swing.JTextField jTextField193;
    private javax.swing.JTextField jTextField194;
    private javax.swing.JTextField jTextField195;
    private javax.swing.JTextField jTextField196;
    private javax.swing.JTextField jTextField197;
    private javax.swing.JTextField jTextField198;
    private javax.swing.JTextField jTextField199;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField20;
    private javax.swing.JTextField jTextField200;
    private javax.swing.JTextField jTextField201;
    private javax.swing.JTextField jTextField202;
    private javax.swing.JTextField jTextField203;
    private javax.swing.JTextField jTextField204;
    private javax.swing.JTextField jTextField205;
    private javax.swing.JTextField jTextField206;
    private javax.swing.JTextField jTextField207;
    private javax.swing.JTextField jTextField208;
    private javax.swing.JTextField jTextField209;
    private javax.swing.JTextField jTextField21;
    private javax.swing.JTextField jTextField210;
    private javax.swing.JTextField jTextField211;
    private javax.swing.JTextField jTextField212;
    private javax.swing.JTextField jTextField213;
    private javax.swing.JTextField jTextField214;
    private javax.swing.JTextField jTextField215;
    private javax.swing.JTextField jTextField216;
    private javax.swing.JTextField jTextField217;
    private javax.swing.JTextField jTextField218;
    private javax.swing.JTextField jTextField219;
    private javax.swing.JTextField jTextField22;
    private javax.swing.JTextField jTextField220;
    private javax.swing.JTextField jTextField221;
    private javax.swing.JTextField jTextField222;
    private javax.swing.JTextField jTextField223;
    private javax.swing.JTextField jTextField224;
    private javax.swing.JTextField jTextField225;
    private javax.swing.JTextField jTextField226;
    private javax.swing.JTextField jTextField227;
    private javax.swing.JTextField jTextField228;
    private javax.swing.JTextField jTextField229;
    private javax.swing.JTextField jTextField23;
    private javax.swing.JTextField jTextField230;
    private javax.swing.JTextField jTextField231;
    private javax.swing.JTextField jTextField232;
    private javax.swing.JTextField jTextField233;
    private javax.swing.JTextField jTextField234;
    private javax.swing.JTextField jTextField235;
    private javax.swing.JTextField jTextField236;
    private javax.swing.JTextField jTextField237;
    private javax.swing.JTextField jTextField238;
    private javax.swing.JTextField jTextField239;
    private javax.swing.JTextField jTextField24;
    private javax.swing.JTextField jTextField240;
    private javax.swing.JTextField jTextField241;
    private javax.swing.JTextField jTextField242;
    private javax.swing.JTextField jTextField243;
    private javax.swing.JTextField jTextField244;
    private javax.swing.JTextField jTextField245;
    private javax.swing.JTextField jTextField246;
    private javax.swing.JTextField jTextField247;
    private javax.swing.JTextField jTextField248;
    private javax.swing.JTextField jTextField249;
    private javax.swing.JTextField jTextField25;
    private javax.swing.JTextField jTextField250;
    private javax.swing.JTextField jTextField251;
    private javax.swing.JTextField jTextField252;
    private javax.swing.JTextField jTextField253;
    private javax.swing.JTextField jTextField254;
    private javax.swing.JTextField jTextField255;
    private javax.swing.JTextField jTextField256;
    private javax.swing.JTextField jTextField257;
    private javax.swing.JTextField jTextField258;
    private javax.swing.JTextField jTextField259;
    private javax.swing.JTextField jTextField26;
    private javax.swing.JTextField jTextField260;
    private javax.swing.JTextField jTextField261;
    private javax.swing.JTextField jTextField262;
    private javax.swing.JTextField jTextField263;
    private javax.swing.JTextField jTextField264;
    private javax.swing.JTextField jTextField265;
    private javax.swing.JTextField jTextField266;
    private javax.swing.JTextField jTextField267;
    private javax.swing.JTextField jTextField268;
    private javax.swing.JTextField jTextField269;
    private javax.swing.JTextField jTextField27;
    private javax.swing.JTextField jTextField270;
    private javax.swing.JTextField jTextField271;
    private javax.swing.JTextField jTextField272;
    private javax.swing.JTextField jTextField273;
    private javax.swing.JTextField jTextField274;
    private javax.swing.JTextField jTextField275;
    private javax.swing.JTextField jTextField276;
    private javax.swing.JTextField jTextField277;
    private javax.swing.JTextField jTextField278;
    private javax.swing.JTextField jTextField28;
    private javax.swing.JTextField jTextField29;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField30;
    private javax.swing.JTextField jTextField31;
    private javax.swing.JTextField jTextField32;
    private javax.swing.JTextField jTextField33;
    private javax.swing.JTextField jTextField34;
    private javax.swing.JTextField jTextField35;
    private javax.swing.JTextField jTextField36;
    private javax.swing.JTextField jTextField37;
    private javax.swing.JTextField jTextField38;
    private javax.swing.JTextField jTextField39;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField40;
    private javax.swing.JTextField jTextField41;
    private javax.swing.JTextField jTextField42;
    private javax.swing.JTextField jTextField43;
    private javax.swing.JTextField jTextField44;
    private javax.swing.JTextField jTextField45;
    private javax.swing.JTextField jTextField46;
    private javax.swing.JTextField jTextField47;
    private javax.swing.JTextField jTextField48;
    private javax.swing.JTextField jTextField49;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField50;
    private javax.swing.JTextField jTextField51;
    private javax.swing.JTextField jTextField52;
    private javax.swing.JTextField jTextField53;
    private javax.swing.JTextField jTextField54;
    private javax.swing.JTextField jTextField55;
    private javax.swing.JTextField jTextField56;
    private javax.swing.JTextField jTextField57;
    private javax.swing.JTextField jTextField58;
    private javax.swing.JTextField jTextField59;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JTextField jTextField60;
    private javax.swing.JTextField jTextField61;
    private javax.swing.JTextField jTextField62;
    private javax.swing.JTextField jTextField63;
    private javax.swing.JTextField jTextField64;
    private javax.swing.JTextField jTextField65;
    private javax.swing.JTextField jTextField66;
    private javax.swing.JTextField jTextField67;
    private javax.swing.JTextField jTextField68;
    private javax.swing.JTextField jTextField69;
    private javax.swing.JTextField jTextField7;
    private javax.swing.JTextField jTextField70;
    private javax.swing.JTextField jTextField71;
    private javax.swing.JTextField jTextField72;
    private javax.swing.JTextField jTextField73;
    private javax.swing.JTextField jTextField74;
    private javax.swing.JTextField jTextField75;
    private javax.swing.JTextField jTextField76;
    private javax.swing.JTextField jTextField77;
    private javax.swing.JTextField jTextField78;
    private javax.swing.JTextField jTextField79;
    private javax.swing.JTextField jTextField8;
    private javax.swing.JTextField jTextField80;
    private javax.swing.JTextField jTextField81;
    private javax.swing.JTextField jTextField82;
    private javax.swing.JTextField jTextField83;
    private javax.swing.JTextField jTextField84;
    private javax.swing.JTextField jTextField85;
    private javax.swing.JTextField jTextField86;
    private javax.swing.JTextField jTextField87;
    private javax.swing.JTextField jTextField88;
    private javax.swing.JTextField jTextField89;
    private javax.swing.JTextField jTextField9;
    private javax.swing.JTextField jTextField90;
    private javax.swing.JTextField jTextField91;
    private javax.swing.JTextField jTextField92;
    private javax.swing.JTextField jTextField93;
    private javax.swing.JTextField jTextField94;
    private javax.swing.JTextField jTextField95;
    private javax.swing.JTextField jTextField96;
    private javax.swing.JTextField jTextField97;
    private javax.swing.JTextField jTextField98;
    private javax.swing.JTextField jTextField99;
    private javax.swing.JTextPane jTextPane1;
    private javax.swing.JComboBox listaClientes;
    private javax.swing.JComboBox listaClientesAdmin;
    private javax.swing.JComboBox listaTarifaActual;
    private javax.swing.JTextArea logAcciones;
    private javax.swing.JTextField login;
    private javax.swing.JScrollPane miBarra01;
    private javax.swing.JScrollPane miBarra02;
    private javax.swing.JScrollPane miBarra03;
    private javax.swing.JScrollPane miBarra04;
    private javax.swing.JScrollPane miBarra05;
    private javax.swing.JScrollPane miBarra12;
    private javax.swing.JScrollPane miBarra13;
    private javax.swing.JScrollPane miBarra14;
    private javax.swing.JScrollPane miBarra15;
    private javax.swing.JScrollPane miBarra16;
    private javax.swing.JScrollPane miBarra2;
    private javax.swing.JTable miTabla01;
    private javax.swing.JTable miTabla02;
    private javax.swing.JTable miTabla03;
    private javax.swing.JTable miTabla04;
    private javax.swing.JTable miTabla05;
    private javax.swing.JTable miTabla12;
    private javax.swing.JTable miTabla13;
    private javax.swing.JTable miTabla14;
    private javax.swing.JTable miTabla15;
    private javax.swing.JTable miTabla16;
    private javax.swing.JTable miTabla2e;
    private javax.swing.JTextField passw;
    private javax.swing.JTextField tabla;
    private javax.swing.JTable tablaC01;
    private javax.swing.JTable tablaC02;
    private javax.swing.JTable tablaC03;
    private javax.swing.JTable tablaC04;
    private javax.swing.JComboBox tipoMedida;
    private javax.swing.JComboBox tipoMedida1;
    private javax.swing.JComboBox tipoSuministro;
    private javax.swing.JComboBox tipoSuministro1;
    // End of variables declaration//GEN-END:variables

// ------------------------------------------------------------------------------------------------------------
    public void  conectarBD() {
         int i;
      
         JOptionPane.showMessageDialog(null,
                "\nVoy a conectar con la Base de Datos ",
                "AVISO",JOptionPane.WARNING_MESSAGE);
         
           Conexion conex = new Conexion(); 
           
           if (conex!=null){
            JOptionPane.showMessageDialog(null,
		 "La base de datos se ha conectado exitosamente",
		 "Información",JOptionPane.INFORMATION_MESSAGE);
            
                saepDao misaepDao1 = new saepDao();
	          
             misaepDao1.consultaClientes();
             this.clientes = misaepDao1.clientes ;
             this.nClientes = misaepDao1.nClientes;
            
             System.out.println("Tengo "+this.nClientes+" que procesar...");
             // ............................................................................
             listaClientes.removeAllItems();
             listaClientes.addItem("SELECCIONAR CLIENTE");
             for (i=0; i<this.nClientes; i++) {
                 
                 listaClientes.addItem(this.clientes[i][1]);
                 System.out.println("Estoy añadiendo el cliente ="+this.clientes[i][1]);
             }
             // ............................................................................
             listaClientesAdmin.removeAllItems();
             listaClientesAdmin.addItem("SELECCIONAR CLIENTE");
             for (i=0; i<this.nClientes; i++) {
                 
                 listaClientesAdmin.addItem(this.clientes[i][1]);
                 System.out.println("Estoy añadiendo el cliente ="+this.clientes[i][1]);
             }
             // ............................................................................
             actualizarListaClientesAdministracion();
             conex.desconectar();
             
              // ............................................................................
             
              misaepDao1.consultaClientesSimulacion();                                      // Lista de clientes con Simulacion de facturas activada 
             
             this.nClientesSimulacion = misaepDao1.nClienteSimulacion ;
             this.clientesSimulacion  = misaepDao1.clientesSimulacion ;
             
             
       //      misaepDao1.consultaPuntosSimulacion();                                      // Lista de clientes con Simulacion de facturas activada 
           
       //      this.simulacionPuntos  = misaepDao1.simulacionPuntos ;
             
             // ............................................................................
             actualizarDatosEnTablasSimulacion(this.indSim);
             // ............................................................................
             modificarArbolSimulaciones();
             modificarArbolPrecios();
              // ............................................................................
            
             this.jLabel200.setVisible(false); this.jLabel202.setVisible(true); this.jLabel220.setVisible(false);
            
              // ............................................................................
              actualizarTablaAlertasServicio();
              // ............................................................................
         } 
         
    }
// ------------------------------------------------------------------------------------------------------------
   public void  cargarDatosCliente() throws SQLException {
         int i,j;
            
         saepDao misaepDao1 = new saepDao();
         
         this.id_cliente_actual = this.id_cliente_general ;
	// .......................................................          
         misaepDao1.cargarDatosCliente(this.id_cliente_actual);                      
         
         this.nPuntos           = misaepDao1.nPuntos;
         this.listaPuntosSum    = misaepDao1.datosPuntoSum ;
        // .......................................................  
        misaepDao1.cargarContratosPuntos(this.listaPuntosSum,this.nPuntos,this.id_cliente_actual,1);
       
        this.listaContratosPuntos = misaepDao1.contratosPuntos ;
        // ....................................................... 
        misaepDao1.cargarCondicionesSimulacion(this.listaContratosPuntos,this.nPuntos,this.id_cliente_actual,1);
       
        this.lCondicionesSimulacion = misaepDao1.condicionesSimulacion ;
        
        saepDao misaepDao2 = new saepDao();
        
        // ....................................................... 
        
        misaepDao2.cargarContratosPuntos(this.listaPuntosSum,this.nPuntos,this.id_cliente_actual,2);
       
        this.listaContratosPuntosAct = misaepDao2.contratosPuntos ;
        
         // ....................................................... 
        
        misaepDao2.cargarCondicionesSimulacion(this.listaContratosPuntosAct,this.nPuntos,this.id_cliente_actual,2);
       
        this.lCondicionesActuales = misaepDao2.condicionesSimulacion ;
        
        // ....................................................... 
        actualizarTablaHistoricoAhorroCliente(this.id_cliente_actual);
        
        
   }
// ------------------------------------------------------------------------------------------------------------
    public final void crearArbol() {
           
            System.out.println("Voy a crear el arbol (si puedo) ");
             
            /**Construimos los nodos del arbol que seran ramas u hojas*/
            /**Definimos cual será el directorio principal o la raiz de nuestro arbol*/
            
               DefaultMutableTreeNode carpetaRaiz= new DefaultMutableTreeNode("PUNTOS SUMINISTRO");
          
              
             /**Definimos el modelo donde se agregaran los nodos*/
            
              DefaultTreeModel modelo2;
              modelo2 = new DefaultTreeModel(carpetaRaiz);
              
             /**agregamos el modelo al arbol, donde previamente establecimos la raiz*/
              
             arbol = new JTree(modelo2);
             jScrollPane1.setViewportView(arbol);
             
             // .......................................................................................
             
              System.out.println("Voy a crear el arbol de simulaciones ");
             
            /**Construimos los nodos del arbol que seran ramas u hojas*/
            /**Definimos cual será el directorio principal o la raiz de nuestro arbol*/
            
               DefaultMutableTreeNode carpetaRaiz02= new DefaultMutableTreeNode("SIMULACIONES");
          
              
             /**Definimos el modelo donde se agregaran los nodos*/
            
              DefaultTreeModel modelo3;
              modelo3 = new DefaultTreeModel(carpetaRaiz02);
              
             /**agregamos el modelo al arbol, donde previamente establecimos la raiz*/
              
             arbolSimulaciones = new JTree(modelo3);
             jScrollPane14.setViewportView(arbolSimulaciones);
             
               // .......................................................................................
             
              System.out.println("Voy a crear el arbol de PRECIOS DE SIMULACIONES ");
             
            /**Construimos los nodos del arbol que seran ramas u hojas*/
            /**Definimos cual será el directorio principal o la raiz de nuestro arbol*/
            
               DefaultMutableTreeNode carpetaRaiz03= new DefaultMutableTreeNode("PRECIOS OMIE");
          
              
             /**Definimos el modelo donde se agregaran los nodos*/
            
              DefaultTreeModel modelo4;
              modelo4 = new DefaultTreeModel(carpetaRaiz03);
              
             /**agregamos el modelo al arbol, donde previamente establecimos la raiz*/
              
             arbolPrecios = new JTree(modelo4);
             jScrollPane15.setViewportView(arbolPrecios);
             
             
}
     // ----------------------------------------------------------------------------------------------------------------
       public final void modificarArbolNuevos() {
          
           int i,j,k,cnt,nCUPS,dia=1,ndia=0,cdia=1,ind=0;
           String fecha ="",contrato="";
           String nombre = "";
           String sdia="",CUPS,str="";
           
           
           
           cnt = this.nPuntos ;
                      
           System.out.println("Voy a modificar el arbol nuevo tenemos un total de puntos de:"+cnt);
           
           DefaultMutableTreeNode carpetaRaiz = new DefaultMutableTreeNode("PUNTOS SUMINISTRO");
           /**Definimos el modelo donde se agregaran los nodos*/
           DefaultTreeModel modelo2;
           modelo2 = new DefaultTreeModel(carpetaRaiz);
           /**agregamos el modelo al arbol, donde previamente establecimos la raiz*/
           
           arbol = new JTree(modelo2);
           jScrollPane1.setViewportView(arbol);
           
           DefaultMutableTreeNode carpeta = new DefaultMutableTreeNode("CARGADOS ("+this.nPuntos+")");     // Comenzamos con el primer punto
           modelo2.insertNodeInto(carpeta, carpetaRaiz, 0);
           
          
            for (i=0; i<this.nPuntos; i++){
               CUPS = this.listaPuntosSum[i][2] ;                                                           // Insertamos primero el cups
               CUPS = CUPS.trim();
               nCUPS = CUPS.length();
               
               if ( nCUPS>0){
                    DefaultMutableTreeNode archivo = new DefaultMutableTreeNode(i+" "+this.listaPuntosSum[i][2]);
                    modelo2.insertNodeInto(archivo, carpeta, i);       
               } else {                                                 
                  
                   
                        DefaultMutableTreeNode archivo = new DefaultMutableTreeNode(i+" -");
                        modelo2.insertNodeInto(archivo, carpeta, i); 
                                 
              }
           }    
            // ................................................................................
           
            arbol.addTreeSelectionListener(new TreeSelectionListener() {
            @Override
           
            public void valueChanged(TreeSelectionEvent e) {
                // se obtiene el nodo seleccionado
                DefaultMutableTreeNode nseleccionado = (DefaultMutableTreeNode) arbol.getLastSelectedPathComponent();
    
                int nivel = nseleccionado.getDepth() ;
                System.out.println("El nivel de campo es ="+nivel);
                
                if ( nivel == 0) {
                    
                    String nodo         = nseleccionado.getUserObject().toString() ;
                    String [] campos    = nodo.split("\\s+");
                    int indice          = Integer.parseInt(campos[0]);
                    
                    System.out.println("El indice de campo es ="+indice);
                    actualizarFormularios(indice);
                    
                    modificarArbolCálculos();
                    
                }
            }
            }); 
            
           
            
           // ................................................................................
            
            
       }
  
     // ------------------------------------------------------------------------------------------------------------
    public final void crearArbolCalculos() {
           
               System.out.println("Voy a crear el arbol de HISTORICO DE CÁLCULOS ");
             
            /**Construimos los nodos del arbol que seran ramas u hojas*/
            /**Definimos cual será el directorio principal o la raiz de nuestro arbol*/
            
               DefaultMutableTreeNode carpetaRaiz= new DefaultMutableTreeNode("CÁLCULOS");
          
              
             /**Definimos el modelo donde se agregaran los nodos*/
            
              DefaultTreeModel modelo3;
              modelo3 = new DefaultTreeModel(carpetaRaiz);
              
             /**agregamos el modelo al arbol, donde previamente establecimos la raiz*/
              
             arbol02 = new JTree(modelo3);
             jScrollPane8.setViewportView(arbol02);
             
             
             
             
}
  // ----------------------------------------------------------------------------------------------------------------
       public final void modificarArbolCálculos() {
          
           int i,j,k,cnt,nCUPS,dia=1,ndia=0,cdia=1,ind=0;
           String fecha ="",contrato="";
           String nombre = "";
           String sAhorro="",str="";
           
           NumberFormat formatoImporte = NumberFormat.getCurrencyInstance();

           formatoImporte = NumberFormat.getCurrencyInstance(new Locale("es","ES"));
           
           // .............................................
           
           cnt = this.nCalculosPunto;
           
           // .............................................
         
           
           if ( cnt>0) {
                      
           System.out.println("Voy a modificar el arbol de cálculos tenemos un total de puntos de:"+cnt);
           
           DefaultMutableTreeNode carpetaRaiz = new DefaultMutableTreeNode("CÁLCULOS ("+this.listaPuntosSum[this.indGen][2]+")");
           /**Definimos el modelo donde se agregaran los nodos*/
           DefaultTreeModel modelo3;
           modelo3 = new DefaultTreeModel(carpetaRaiz);
           /**agregamos el modelo al arbol, donde previamente establecimos la raiz*/
           
           arbol02 = new JTree(modelo3);
           jScrollPane8.setViewportView(arbol02);
           
           i = 0 ;
          
            for (i=0; i<cnt; i++){
               fecha = this.lAhorrosHistorico[i][3] ;                                                           // Insertamos primero el cups
               sAhorro = formatoImporte.format(Double.parseDouble(this.lAhorrosHistorico[i][5]));
               
                DefaultMutableTreeNode carpeta = new DefaultMutableTreeNode(i+" C:"+this.lAhorrosHistorico[i][3]+" - Ahorro:"+sAhorro);
                modelo3.insertNodeInto(carpeta, carpetaRaiz, i);     
             
           }    
            // ................................................................................
           
            arbol02.addTreeSelectionListener(new TreeSelectionListener() {
            @Override
           
            public void valueChanged(TreeSelectionEvent e) {
                // se obtiene el nodo seleccionado
                DefaultMutableTreeNode nseleccionado = (DefaultMutableTreeNode) arbol02.getLastSelectedPathComponent();
    
                int nivel = nseleccionado.getDepth() ;
                System.out.println("El nivel de calculo es ="+nivel);
                
                if ( nivel == 0) {
                    
                    String nodo         = nseleccionado.getUserObject().toString() ;
                    String [] campos    = nodo.split("\\s+");
                    int indice          = Integer.parseInt(campos[0]);
                    
                    System.out.println("El indice de calculo es ="+indice);
                    try {
                        actualizarPanelConcionesActuales(indice);
                        actualizarPanelConcionesSimulacion(indice);
                        actualizarPanelConcionesFactura(indice);
                        actualizarPanelConcionesCalculo(indice);
                        
                    } catch (SQLException ex) {
                        Logger.getLogger(FramePrincipal.class.getName()).log(Level.SEVERE, null, ex);
                    }
                   
                    
                }
            }
            }); 
            
           }
            
       }       
            
       // ----------------------------------------------------------------------------------------------------------------
       public final void modificarArbolSimulaciones() {
          
           int i,j,k,cnt,nCUPS,dia=1,ndia=0,cdia=1,ind=0,cntind;
           String fecha ="",contrato="";
           String nombre = "";
           String sAhorro="",str="";
           
           NumberFormat formatoImporte = NumberFormat.getCurrencyInstance();

           formatoImporte = NumberFormat.getCurrencyInstance(new Locale("es","ES"));
           
           // .............................................
           
           // cnt = this.simulacionPuntos.length;
           cnt = this.nClientesSimulacion ;
           
           // .............................................
         
           
           if ( cnt>0) {
                      
           System.out.println("Voy a modificar el arbol de simulaciones tenemos un total de Clientes con simulacion de facturas de:"+cnt);
           
           DefaultMutableTreeNode carpetaRaiz = new DefaultMutableTreeNode("SIMULACIONES ("+cnt+")");
           /**Definimos el modelo donde se agregaran los nodos
            * 
            */
           DefaultTreeModel modelo4;
           modelo4 = new DefaultTreeModel(carpetaRaiz);
           
           /**agregamos el modelo al arbol, donde previamente establecimos la raiz*/
           
           arbolSimulaciones = new JTree(modelo4);
           jScrollPane14.setViewportView(arbolSimulaciones);
           
           i = 0 ;
           cntind = 0 ;
           int nMeses = 0 ;
           int nPuntos= 0 ;
            for (i=0; i<cnt; i++){
                                                                 
                              
                DefaultMutableTreeNode carpeta = new DefaultMutableTreeNode(i+":"+this.clientesSimulacion[i]);
                modelo4.insertNodeInto(carpeta, carpetaRaiz, i);   
                nPuntos = this.simulacionPuntos[i].length ;
                
                for (j=0; j<nPuntos; j++){
                    
                    DefaultMutableTreeNode carpeta2 = new DefaultMutableTreeNode(this.simulacionPuntos[i][j][2]);
                    modelo4.insertNodeInto(carpeta2, carpeta, j);   
                    
                    nMeses = this.simulacionMeses[i][j].length ;
                    
                    for (k=0; k<nMeses; k++) {
                        
                        DefaultMutableTreeNode carpeta3 = new DefaultMutableTreeNode(cntind+" | "+this.simulacionMeses[i][j][k]);
                        modelo4.insertNodeInto(carpeta3, carpeta2, k);   
                        cntind ++;
                    }
                    
                    
                }
                
                
             
           }    
            // ................................................................................
           
            arbolSimulaciones.addTreeSelectionListener(new TreeSelectionListener() {
            @Override
           
            public void valueChanged(TreeSelectionEvent e) {
                // se obtiene el nodo seleccionado
                DefaultMutableTreeNode nseleccionado = (DefaultMutableTreeNode) arbolSimulaciones.getLastSelectedPathComponent();
    
                int nivel = nseleccionado.getDepth() ;
                
                
                
                System.out.println("El nivel de simulacion es ="+nivel+" y el level =");
                
                if ( nivel == 0) {
                    
                    String nodo         = nseleccionado.getUserObject().toString() ;
                    String [] campos    = nodo.split("\\s+");
                    int indice          = Integer.parseInt(campos[0]);
                    
                    System.out.println("El indice de simulacion es ="+indice);
                    
                    try {
                        
                        actualizarDatosEnTablasSimulacion(indice);
                        cargarTablaEnergia(indice);
                        cargarTablaPotencias(indice);
                        cargarDatosPuntoSimulacion(indice);
                        
                        
                    } catch (SQLException ex) {
                        Logger.getLogger(FramePrincipal.class.getName()).log(Level.SEVERE, null, ex);
                    }
                  
                    
                }
            }
            }); 
            
           }
            
       }       
       // ----------------------------------------------------------------------------------------------------------------
       public final void modificarArbolPrecios() {
          
           int i,j,k,cnt,nCUPS,dia=1,ndia=0,cdia=1,ind=0;
           String fecha ="",contrato="";
           String nombre = "";
           String sAhorro="",str="";
           
           NumberFormat formatoImporte = NumberFormat.getCurrencyInstance();

           formatoImporte = NumberFormat.getCurrencyInstance(new Locale("es","ES"));
           
           // .............................................
           
           cnt = this.simulacionTablasOmie.length;
           
           // .............................................
         
           
           if ( cnt>0) {
                      
           System.out.println("Voy a modificar el arbol de Precios OMIE tenemos un total de puntos de:"+cnt);
           
           DefaultMutableTreeNode carpetaRaiz = new DefaultMutableTreeNode("PRECIOS OMIE ("+cnt+")");
           /**Definimos el modelo donde se agregaran los nodos
            * 
            */
           DefaultTreeModel modelo5;
           modelo5 = new DefaultTreeModel(carpetaRaiz);
           
           /**agregamos el modelo al arbol, donde previamente establecimos la raiz*/
           
           arbolPrecios = new JTree(modelo5);
           jScrollPane15.setViewportView(arbolPrecios);
           
           i = 0 ;
          
            for (i=0; i<cnt; i++){
                                                                 
                              
                DefaultMutableTreeNode carpeta = new DefaultMutableTreeNode(i+" : "+this.simulacionTablasOmie[i]);
                modelo5.insertNodeInto(carpeta, carpetaRaiz, i);   
                
               
                
                
             
           }    
            // ................................................................................
           
            arbolPrecios.addTreeSelectionListener(new TreeSelectionListener() {
            @Override
           
            public void valueChanged(TreeSelectionEvent e) {
                // se obtiene el nodo seleccionado
                DefaultMutableTreeNode nseleccionado = (DefaultMutableTreeNode) arbolPrecios.getLastSelectedPathComponent();
    
                int nivel = nseleccionado.getDepth() ;
                System.out.println("El nivel de precios OMIE es ="+nivel);
                
                if ( nivel == 0) {
                    
                    String nodo         = nseleccionado.getUserObject().toString() ;
                    String [] campos    = nodo.split("\\s+");
                    int indice          = Integer.parseInt(campos[0]);
                    
                    System.out.println("El indice de OMIE es ="+indice);
                    try {
                       
                         cargarTablaOmie(indice);
                         
                       
                       
                    } catch (SQLException ex) {
                        Logger.getLogger(FramePrincipal.class.getName()).log(Level.SEVERE, null, ex);
                    }
                   
                    
                }
            }
            }); 
            
           }
            
       }       
      
        // ------------------------------------------------------------------------------------------------------------------------
        // ------------------------------------------------------------------------------------------------------------------------
        //  .......................................         ACTUALIZAR FORMULARIOS       .........................................
        // ------------------------------------------------------------------------------------------------------------------------
       
       
       //  .......................................  
           private void actualizarFormularios(int indice) {
           int ind,ireg, creg, indLoc=-1, id_tipo_S, id_tipo_A,idt=0;
           this.indGen = indice ;
           int id_punto;
           
           this.sMensajes = "";
           
        //  .......................................     
           
           botonValidarCAct.setVisible(false);
           botonValidarSim.setVisible(false);
           this.jPanel50.setVisible(false);                 // Panel con Energia simulada
           
        //  .......................................                                                 condiciones de inicio de formulario
            jTextField29.setVisible(true) ;
            jTextField39.setVisible(false) ;
            
            this.fPotenciaFacturada = 0 ;                                                  // Flag calculo por maximetro con formulas 3.0
        //  .......................................   
            
           if (indice == -1) {
           
            jTextField1.setText(""); jTextField1.setBackground(Color.white);// Nombre
            jTextField2.setText(""); jTextField2.setBackground(Color.white);// cups electrico
         
            jTextField3.setText(""); jTextField3.setBackground(Color.white);// CIF
          
            
            jTextField10.setText(""); jTextField10.setBackground(Color.white);// direccion
            jTextField6.setText("");  jTextField6.setBackground(Color.white);// provincia
            
            jTextField58.setText("") ;
            
            jTextField4.setText("") ;
            jTextField62.setText("") ;
            jTextField61.setText("") ;
            jTextField73.setText("") ;
            jTextField74.setText("") ;
            
            
            jTextField116.setText("01-01-2000") ;
            jTextField117.setText("01-01-2001") ;
            jTextField118.setText("") ;
            jTextField119.setText("") ;
            jTextField120.setText("") ;
            
            this.filtrobusca = 0 ; jTextField32.setVisible(false); jLabel53.setVisible(false);
            
            jTextField73.setVisible(false); jLabel96.setVisible(false); jLabel97.setVisible(false);
            jTextField74.setVisible(false); jLabel98.setVisible(false); jLabel99.setVisible(false);
            
            jCheckBox1.setSelected(false);
            jCheckBox2.setSelected(false);
            jCheckBox5.setSelected(false);      // Se factura siempre la Potencia Maxima en Actual
            jCheckBox6.setSelected(false);      // Se factura siempre la potencia maxima en Simulacion
            
            energiaP1.setText("0") ;
            energiaP2.setText("0") ;
            energiaP3.setText("0") ;
            energiaP1s.setText("0") ;
            energiaP2s.setText("0") ;
            energiaP3s.setText("0") ;
            jTextField80.setText("0") ; jTextField82.setBackground(Color.white);     // Alquiler
            jTextField81.setText("0") ; jTextField81.setBackground(Color.white);     // Base imponible factura 
            jTextField77.setText("0");
            jTextField78.setText("0");
            jTextField79.setText("0");
            
            jTextField121.setText("0");
            jTextField122.setText("0");
            jTextField123.setText("0");
            
            jTextField82.setText("0"); jTextField82.setBackground(Color.white);            // Base imponible
            
            jTextField74.setText("0");                                                     // Precio Energia de peaje simulacion
           
            jTextField106.setText("0");
            jTextField107.setText("0");
            jTextField108.setText("0");
            
            jTextField113.setText("0");
            jTextField114.setText("0");
            jTextField115.setText("0");
         
        //  .......................................  
           } else {
                   
           
            energiaP1s.setText("0") ;
            energiaP2s.setText("0") ;
            energiaP3s.setText("0") ;
            jTextField80.setText("0") ; jTextField82.setBackground(Color.white);     // Alquiler
            jTextField81.setText("0") ; jTextField81.setBackground(Color.white);     // Base imponible factura 
            jTextField77.setText("0");
            jTextField78.setText("0");
            jTextField79.setText("0");
            jTextField121.setText("0");
            jTextField122.setText("0");
            jTextField123.setText("0");
            jTextField126.setText("0");
            
            jTextField82.setText("0"); jTextField82.setBackground(Color.white);       // Base imponible
             
            jTextField74.setText("0");                                                // Precio Energia de peaje simulacion
            
            jTextField106.setText("0");
            jTextField107.setText("0");
            jTextField108.setText("0");
            
            jTextField113.setText("0");
            jTextField114.setText("0");
            jTextField115.setText("0");
            
            id_punto = Integer.parseInt(this.listaContratosPuntos[indice][0]);
           
            // ...............................................
            
            actualizarTablaHistoricoPuntos(id_punto) ;
            
             saepDao misaepDao5 = new saepDao();
        
            // ....................................................... 
        
            misaepDao5. consultaHistoricoAhorrosPuntoDetalle(id_punto,this.id_cliente_actual);                             // Consultamos los registros de cálculo que tiene este punto
       
            this.lAhorrosHistorico  = misaepDao5.lhistoricoAhorros ;
            this.nCalculosPunto     = misaepDao5.nCalculosPunto;
            
            // ...............................................
            
            if (this.listaPuntosSum[indice][12].equals("1")) jCheckBox1.setSelected(true); else jCheckBox1.setSelected(false);
            
            if (this.listaPuntosSum[indice][16].equals("1")) idt = 0; else idt=1; tipoMedida.setSelectedIndex(idt);             // Tipo de medida
            
            if (this.listaPuntosSum[indice][17].equals("1")) idt = 0; else idt=1; tipoSuministro.setSelectedIndex(idt);         // Tipo de suministro
               
            // ...............................................
            
            
            
            
            if (jCheckBox1.isSelected()){
                
               jPanel48.setVisible(true); System.out.println("Tiene Bateria");
                
            } else {
               
               jPanel48.setVisible(false);
                
            }
            
            // ...............................................
            
             
            id_tipo_A =   Integer.parseInt(this.listaContratosPuntosAct[indice][3]) ;  
            id_tipo_S =   Integer.parseInt(this.listaContratosPuntos[indice][3]) ; 
         //   if (id_tipo_A != this.id_tipo_Actual) { id_tipo_A = this.id_tipo_Actual; botonValidarCAct.setVisible(true); this.listaContratosPuntosAct[indice][3]=String.valueOf(id_tipo_A);}
         //   if (id_tipo_S != this.id_tipo_Sim)    { id_tipo_S = this.id_tipo_Actual; botonValidarSim.setVisible(true); this.listaContratosPuntos[indice][3]=String.valueOf(id_tipo_S);}
            
            this.tipo_Act           = id_tipo_A ;
            this.tipo_Sim           = id_tipo_S ;
            this.id_punto_actual    = id_punto ;
            
            // ...............................................
            System.out.println("----------- ACTUALIZO FORMULARIO PARA IDP = "+id_punto+" -----------------");
            System.out.println("id_tipo_A = "+id_tipo_A);
            System.out.println("id_tipo_S = "+id_tipo_S);
            System.out.println("indice = "+indice);
            
            // ...............................................                      DATOS GENERALES DEL PUNTO DE SUMINISTRO
            
            jTextField264.setText(String.valueOf(id_punto));
            
            jTextField1.setText(this.listaPuntosSum[indice][1]);
            jTextField2.setText(this.listaPuntosSum[indice][2]);
            jTextField3.setText(this.listaPuntosSum[indice][3]);
        
            jTextField10.setText(this.listaPuntosSum[indice][10]);
            jTextArea1.setText(this.listaPuntosSum[indice][11]);
            jTextField59.setText(this.listaPuntosSum[indice][18]);
            
            jTextField58.setText(String.valueOf(this.indGen)) ;
            
            jTextField4.setText(String.valueOf(this.listaPuntosSum[indice][13])) ;
            jTextField62.setText(String.valueOf(this.listaPuntosSum[indice][14])) ;
            jTextField61.setText(String.valueOf(this.listaPuntosSum[indice][15])) ;
            
           // ..............................................
            
            jTextField116.setText(this.listaPuntosSum[indice][19]);
            jTextField117.setText(this.listaPuntosSum[indice][20]);
            jTextField118.setText(this.listaPuntosSum[indice][21]);
            jTextField120.setText(this.listaPuntosSum[indice][22]);
            jTextField119.setText(this.listaPuntosSum[indice][23]);
            
           // ..............................................
            
            jTextField30.setText("");
            jTextField47.setText("");
            jTextField15.setText("");
            jTextField27.setText("");
            jTextField5.setText("");
            
            energiaP1.setText("0");
            energiaP2.setText("0");
            energiaP3.setText("0");
            
            jTextField77.setText("0");
            jTextField78.setText("0");
            jTextField79.setText("0");
           
            jComboBox3.setSelectedIndex(id_tipo_A);   jComboBox11.setSelectedIndex(id_tipo_A);    
            jComboBox4.setSelectedIndex(id_tipo_S);        
            
            if (id_tipo_S == 0){
                
                  // ...............................
                    
                    jTextField29.setText("");              // Fecha contrato
                    
                    jTextField34.setText("");              // Compañia
                    jTextField39.setText("");              // Descripcion Tarifa
                    
                    jTextField20.setText("");           // Precio energia P1
                    jTextField21.setText("");           // Precio energia P2
                    jTextField22.setText("");           // Precio energia P3
                    jTextField23.setText("");            // Precio potencia P1
                    jTextField24.setText("");            // Precio potencia P2
                    jTextField25.setText("");            // Precio potencia P3
                    jTextField26.setText("");            // potencia contratada P1
                    jTextField37.setText("");            // potencia contratada P2
                    jTextField38.setText("");            // potencia contratada P3
                    jTextField112.setText("");            // ALQUILER
                    jTextArea3.setText("");              // Observaciones
                   
                    jCheckBox6.setSelected(false);      // Se factura siempre la potencia maxima en Simulacion
                    
                    jTextField74.setText("") ;
            }
            
             if (id_tipo_A == 0){
                
                    jTextField28.setText("");              // Fecha contrato
                    jTextField11.setText("");              // Fecha fin de contrato
                    jTextField33.setText("");              // Compañia
                 
                    
                    jTextField12.setText("");           // Precio energia P1
                    jTextField13.setText("");           // Precio energia P2
                    jTextField14.setText("");           // Precio energia P3
                    jTextField16.setText("");            // Precio potencia P1
                    jTextField17.setText("");            // Precio potencia P2
                    jTextField18.setText("");           // Precio potencia P3
                    jTextField19.setText("");            // potencia contratada P1
                    jTextField35.setText("");            // potencia contratada P2
                    jTextField36.setText("");            // potencia contratada P3
                    jTextField111.setText("");            // ALQUILER    
                    jTextArea2.setText("");              // Observaciones  
                    jCheckBox5.setSelected(false);      // Se factura siempre la Potencia Maxima en Actual
                    jTextField73.setText("") ;
                    
                    jTextField246.setText("");          // Precio energía P1 T6.x
                    jTextField247.setText("");          // Precio energía P2 T6.x
                    jTextField248.setText("");          // Precio energía P3 T6.x
                    jTextField252.setText("");          // Precio energía P4 T6.x
                    jTextField253.setText("");          // Precio energía P5 T6.x
                    jTextField254.setText("");          // Precio energía P6 T6.x
                    
                    jTextField265.setText("");          // Precio energía PEAJE T6.x
                    
                    jTextField258.setText("");          // Precio potencia P1 T6.x
                    jTextField259.setText("");          // Precio potencia P2 T6.x
                    jTextField260.setText("");          // Precio potencia P3 T6.x
                    jTextField261.setText("");          // Precio potencia P4 T6.x
                    jTextField262.setText("");          // Precio potencia P5 T6.x
                    jTextField263.setText("");          // Precio potencia P6 T6.x
                    
                    jTextField249.setText("");          //  potencia P1 T6.x
                    jTextField250.setText("");          //  potencia P2 T6.x
                    jTextField251.setText("");          //  potencia P3 T6.x
                    jTextField255.setText("");          //  potencia P4 T6.x
                    jTextField256.setText("");          //  potencia P5 T6.x
                    jTextField257.setText("");          //  potencia P6 T6.x
                    
                    jTextField243.setText("");          // Nombre comercializadora
                    jTextField244.setText("");          // fecha fin contrato
                    jTextField245.setText("");          // fecha cambio
                    
                    jTextArea5.setText("");              // Observaciones  
                    jCheckBox7.setSelected(false);      // Se factura siempre la Potencia Maxima en Actual en P6
                    
                    
             }
            
            // ...............................................                              FORMULARIO DE LAS CONDICIONES DE SIMULACIÓN
            // ........................................................................................................................................... 
            switch (id_tipo_S) {
                    // _________________________________________________________________________________________________________
                    case 1:                                                                                     // contrato 2.0A
                    
            
                    
                     // ...............................
                    jTextField21.setVisible(false); jTextField24.setVisible(false); jLabel32.setVisible(false);  jLabel40.setVisible(false); jLabel43.setVisible(false);
                    jTextField22.setVisible(false); jTextField25.setVisible(false); jLabel33.setVisible(false);  jLabel41.setVisible(false); jLabel44.setVisible(false);
               
                    jTextField37.setVisible(false); jLabel62.setVisible(false); jLabel63.setVisible(false);
                    jTextField38.setVisible(false); jLabel64.setVisible(false); jLabel65.setVisible(false);
                    
                    jTextField74.setVisible(false); jLabel98.setVisible(false); jLabel99.setVisible(false);
                    
                    jCheckBox6.setVisible(false);           // factura maxima potencia
                    // ...............................
                   
                   System.out.println("Compañia -> lCondicionesSimulacion[indice][8] = "+lCondicionesSimulacion[indice][8]);
                   System.out.println("Precio Energia P1 -> lCondicionesSimulacion[indice][14] = "+lCondicionesSimulacion[indice][14]);
                    
                    // ............................... Condiciones de simulacion
                    
                    jTextField28.setText(listaContratosPuntos[indice][1]);              // Fecha contrato
                
                    
                    jTextField34.setText(listaContratosPuntos[indice][8]);              // Compañia
                   
                    
                    jTextField20.setText(lCondicionesSimulacion[indice][14]);           // Precio energia P1
                    jTextField23.setText(lCondicionesSimulacion[indice][8]);            // Precio potencia P1
                    jTextField26.setText(lCondicionesSimulacion[indice][2]);            // potencia contratada P1
                    jTextField112.setText(lCondicionesSimulacion[indice][24]);            // alquiler
                    jTextArea3.setText(lCondicionesSimulacion[indice][20]);              // Observaciones
                    
                    
                    break;
                   // _________________________________________________________________________________________________________                        
                   case 2:                                                                                   // contrato 2.0 DHA
                       
                    jPanel27.setVisible(false);             // panel de potencias maximetro medidas
                     // ...............................
                    jTextField21.setVisible(true); jTextField24.setVisible(false); jLabel32.setVisible(true);   jLabel40.setVisible(false); jLabel43.setVisible(false);
                    jTextField22.setVisible(false); jTextField25.setVisible(false); jLabel33.setVisible(false); jLabel41.setVisible(false); jLabel44.setVisible(false);
               
                    jTextField37.setVisible(false); jLabel62.setVisible(false); jLabel63.setVisible(false);
                    jTextField38.setVisible(false); jLabel64.setVisible(false); jLabel65.setVisible(false);
                    
                    jTextField74.setVisible(false); jLabel98.setVisible(false); jLabel99.setVisible(false);
                    jCheckBox6.setVisible(false);  
                    // ...............................
                    
                    jTextField28.setText(listaContratosPuntos[indice][1]);              // Fecha contrato
                  
                    jTextField34.setText(listaContratosPuntos[indice][8]);              // Compañia
            
                    
                    jTextField20.setText(lCondicionesSimulacion[indice][14]);           // Precio energia P1
                    jTextField21.setText(lCondicionesSimulacion[indice][15]);           // Precio energia P2
                    jTextField23.setText(lCondicionesSimulacion[indice][8]);            // Precio potencia P1
                    jTextField26.setText(lCondicionesSimulacion[indice][2]);            // potencia contratada P1
                    jTextField112.setText(lCondicionesSimulacion[indice][24]);            // alquiler
                    jTextArea3.setText(lCondicionesSimulacion[indice][20]);              // Observaciones
                    
                    break;
                 // _________________________________________________________________________________________________________
                   case 3:                                                                                           // contrato 2.1A
                    jPanel27.setVisible(false);             // panel de potencias maximetro medidas
                     // ...............................
                    jTextField21.setVisible(false); jTextField24.setVisible(false); jLabel32.setVisible(false);  jLabel40.setVisible(false); jLabel43.setVisible(false);
                    jTextField22.setVisible(false); jTextField25.setVisible(false); jLabel33.setVisible(false);  jLabel41.setVisible(false); jLabel44.setVisible(false);
               
                    jTextField37.setVisible(false); jLabel62.setVisible(false); jLabel63.setVisible(false);
                    jTextField38.setVisible(false); jLabel64.setVisible(false); jLabel65.setVisible(false);
                    jTextField74.setVisible(false); jLabel98.setVisible(false); jLabel99.setVisible(false);
                    jCheckBox6.setVisible(false);  
                    // ...............................
                    
                    jTextField29.setText(listaContratosPuntos[indice][1]);              // Fecha contrato
                   
                    jTextField34.setText(listaContratosPuntos[indice][8]);              // Compañia
                    jTextField39.setText(listaContratosPuntos[indice][5]);              // Descripcion Tarifa
                    
                    jTextField20.setText(lCondicionesSimulacion[indice][14]);           // Precio energia P1
                    jTextField23.setText(lCondicionesSimulacion[indice][8]);            // Precio potencia P1
                    jTextField26.setText(lCondicionesSimulacion[indice][2]);            // potencia contratada P1
                    jTextField112.setText(lCondicionesSimulacion[indice][24]);            // alquiler
                    jTextArea3.setText(lCondicionesSimulacion[indice][20]);              // Observaciones
                    
                    break; 
                    // _________________________________________________________________________________________________________
                    case 4:                                                                                  // contrato 2.1DHA
                    jPanel27.setVisible(false);             // panel de potencias maximetro medidas
                    // ...............................
                    jTextField21.setVisible(true); jTextField24.setVisible(false); jLabel32.setVisible(true);  jLabel40.setVisible(false); jLabel43.setVisible(false);
                    jTextField22.setVisible(false); jTextField25.setVisible(false); jLabel33.setVisible(false);  jLabel41.setVisible(false); jLabel44.setVisible(false);
               
                    jTextField37.setVisible(false); jLabel62.setVisible(false); jLabel63.setVisible(false);
                    jTextField38.setVisible(false); jLabel64.setVisible(false); jLabel65.setVisible(false);
                    jTextField74.setVisible(false); jLabel98.setVisible(false); jLabel99.setVisible(false);
                    jLabel21.setVisible(true); jLabel26.setVisible(true); energiaP2.setVisible(true);
                    jLabel25.setVisible(false); jLabel27.setVisible(false); energiaP3.setVisible(false);
                     jCheckBox6.setVisible(false);   
                    // ...............................
                    
                    jTextField29.setText(listaContratosPuntos[indice][1]);              // Fecha contrato
                 
                    jTextField34.setText(listaContratosPuntos[indice][8]);              // Compañia
                    jTextField39.setText(listaContratosPuntos[indice][5]);              // Descripcion Tarifa
                    
                    jTextField20.setText(lCondicionesSimulacion[indice][14]);           // Precio energia P1
                    jTextField21.setText(lCondicionesSimulacion[indice][15]);           // Precio energia P2
                    jTextField23.setText(lCondicionesSimulacion[indice][8]);            // Precio potencia P1
                    jTextField26.setText(lCondicionesSimulacion[indice][2]);            // potencia contratada P1
                    jTextField112.setText(lCondicionesSimulacion[indice][24]);            // alquiler
                    jTextArea3.setText(lCondicionesSimulacion[indice][20]);              // Observaciones
                    
                    break;
                    // _________________________________________________________________________________________________________
                    case 5:                                                                                      // contrato 3.0A
                    jPanel27.setVisible(true);                                           // panel de potencias maximetro medidas
                    // ...............................
                    jTextField21.setVisible(true); jTextField24.setVisible(true); jLabel32.setVisible(true);  jLabel40.setVisible(true); jLabel43.setVisible(true);
                    jTextField22.setVisible(true); jTextField25.setVisible(true); jLabel33.setVisible(true);  jLabel41.setVisible(true); jLabel44.setVisible(true);
               
                    jTextField37.setVisible(true); jLabel62.setVisible(true); jLabel63.setVisible(true);
                    jTextField38.setVisible(true); jLabel64.setVisible(true); jLabel65.setVisible(true);
                    jTextField74.setVisible(false); jLabel98.setVisible(false); jLabel99.setVisible(false);
                    jCheckBox6.setVisible(true);   
                    // ...............................
                    
                    jTextField29.setText(listaContratosPuntos[indice][1]);              // Fecha contrato
                    
                    jTextField34.setText(listaContratosPuntos[indice][8]);              // Compañia
                    jTextField39.setText(listaContratosPuntos[indice][5]);              // Descripcion Tarifa
                    
                    jTextField20.setText(lCondicionesSimulacion[indice][14]);           // Precio energia P1
                    jTextField21.setText(lCondicionesSimulacion[indice][15]);           // Precio energia P2
                    jTextField22.setText(lCondicionesSimulacion[indice][16]);           // Precio energia P3
                    jTextField23.setText(lCondicionesSimulacion[indice][8]);            // Precio potencia P1
                    jTextField24.setText(lCondicionesSimulacion[indice][9]);            // Precio potencia P2
                    jTextField25.setText(lCondicionesSimulacion[indice][10]);            // Precio potencia P3
                    jTextField26.setText(lCondicionesSimulacion[indice][2]);            // potencia contratada P1
                    jTextField37.setText(lCondicionesSimulacion[indice][3]);            // potencia contratada P2
                    jTextField38.setText(lCondicionesSimulacion[indice][4]);            // potencia contratada P3
                    jTextField112.setText(lCondicionesSimulacion[indice][24]);            // alquiler
                    jTextArea3.setText(lCondicionesSimulacion[indice][20]);              // Observaciones
                    
                    if (lCondicionesSimulacion[indice][25] != null ) {
                        if (lCondicionesSimulacion[indice][25].equals("1") ){
                                jCheckBox6.setSelected(true);                                 // Se factura siempre la Potencia Maxima en Simulacion
                        } else {

                                jCheckBox6.setSelected(false);  
                        }
                    }
                    break;
                    // _________________________________________________________________________________________________________
                    case 6:                                                                                      // contrato 3.1A
                    jPanel27.setVisible(true);                                           // panel de potencias maximetro medidas
                    // ...............................
                    jTextField21.setVisible(true); jTextField24.setVisible(true); jLabel32.setVisible(true);  jLabel40.setVisible(true); jLabel43.setVisible(true);
                    jTextField22.setVisible(true); jTextField25.setVisible(true); jLabel33.setVisible(true);  jLabel41.setVisible(true); jLabel44.setVisible(true);
               
                    jTextField37.setVisible(true); jLabel62.setVisible(true); jLabel63.setVisible(true);
                    jTextField38.setVisible(true); jLabel64.setVisible(true); jLabel65.setVisible(true);
                    jTextField74.setVisible(false); jLabel98.setVisible(false); jLabel99.setVisible(false);
                    jCheckBox6.setVisible(true);   
                    // ...............................
                    
                    jTextField29.setText(listaContratosPuntos[indice][1]);              // Fecha contrato
                    
                    jTextField34.setText(listaContratosPuntos[indice][8]);              // Compañia
                    jTextField39.setText(listaContratosPuntos[indice][5]);              // Descripcion Tarifa
                    
                    jTextField20.setText(lCondicionesSimulacion[indice][14]);           // Precio energia P1
                    jTextField21.setText(lCondicionesSimulacion[indice][15]);           // Precio energia P2
                    jTextField22.setText(lCondicionesSimulacion[indice][16]);           // Precio energia P3
                    jTextField23.setText(lCondicionesSimulacion[indice][8]);            // Precio potencia P1
                    jTextField24.setText(lCondicionesSimulacion[indice][9]);            // Precio potencia P2
                    jTextField25.setText(lCondicionesSimulacion[indice][10]);            // Precio potencia P3
                    jTextField26.setText(lCondicionesSimulacion[indice][2]);            // potencia contratada P1
                    jTextField37.setText(lCondicionesSimulacion[indice][3]);            // potencia contratada P2
                    jTextField38.setText(lCondicionesSimulacion[indice][4]);            // potencia contratada P3
                    jTextField112.setText(lCondicionesSimulacion[indice][24]);            // alquiler
                    jTextArea3.setText(lCondicionesSimulacion[indice][20]);              // Observaciones
                    
                    if (lCondicionesSimulacion[indice][25] != null ) {
                        if (lCondicionesSimulacion[indice][25].equals("1") ){
                                jCheckBox6.setSelected(true);                                 // Se factura siempre la Potencia Maxima en Simulacion
                        } else {

                                jCheckBox6.setSelected(false);  
                        }
                    }
                    break;
                  
                    // _________________________________________________________________________________________________________
                    case 8:                                                                                 // contrato 2.0 DH INDX
                     jPanel27.setVisible(false);                                              // panel de potencias maximetro medidas
                    
                     // ...............................
                    jTextField21.setVisible(false); jTextField24.setVisible(false); jLabel32.setVisible(false);  jLabel40.setVisible(false); jLabel43.setVisible(false);
                    jTextField22.setVisible(false); jTextField25.setVisible(false); jLabel33.setVisible(false);  jLabel41.setVisible(false); jLabel44.setVisible(false);
               
                    jTextField37.setVisible(false); jLabel62.setVisible(false); jLabel63.setVisible(false);
                    jTextField38.setVisible(false); jLabel64.setVisible(false); jLabel65.setVisible(false);
                    
                    jTextField74.setVisible(true); jLabel98.setVisible(true); jLabel99.setVisible(true);
                  
                     jCheckBox6.setVisible(false);  
                    // ............................... Condiciones de simulacion
                    
                    jTextField28.setText(listaContratosPuntos[indice][1]);              // Fecha contrato
                
                    
                    jTextField34.setText(listaContratosPuntos[indice][8]);              // Compañia
                   
                    
                    jTextField20.setText(lCondicionesSimulacion[indice][14]);           // Precio energia P1
                    jTextField23.setText(lCondicionesSimulacion[indice][8]);            // Precio potencia P1
                    jTextField26.setText(lCondicionesSimulacion[indice][2]);            // potencia contratada P1
                    jTextField112.setText(lCondicionesSimulacion[indice][24]);            // alquiler
                    jTextArea3.setText(lCondicionesSimulacion[indice][20]);              // Observaciones
                        
                    break;
                     // _________________________________________________________________________________________________________
                    case 9:                                                                                  // contrato 2.1DHA indx
                    jPanel27.setVisible(false);             // panel de potencias maximetro medidas
                    // ...............................
                    jTextField21.setVisible(true); jTextField24.setVisible(false); jLabel32.setVisible(true);  jLabel40.setVisible(false); jLabel43.setVisible(false);
                    jTextField22.setVisible(false); jTextField25.setVisible(false); jLabel33.setVisible(false);  jLabel41.setVisible(false); jLabel44.setVisible(false);
               
                    jTextField37.setVisible(false); jLabel62.setVisible(false); jLabel63.setVisible(false);
                    jTextField38.setVisible(false); jLabel64.setVisible(false); jLabel65.setVisible(false);
                     jTextField74.setVisible(true); jLabel98.setVisible(true); jLabel99.setVisible(true);
                  
                    jLabel21.setVisible(true); jLabel26.setVisible(true); energiaP2.setVisible(true);
                    jLabel25.setVisible(false); jLabel27.setVisible(false); energiaP3.setVisible(false);
                     jCheckBox6.setVisible(false);   
                    // ...............................
                    
                    jTextField29.setText(listaContratosPuntos[indice][1]);              // Fecha contrato
                 
                    jTextField34.setText(listaContratosPuntos[indice][8]);              // Compañia
                    jTextField39.setText(listaContratosPuntos[indice][5]);              // Descripcion Tarifa
                    
                    jTextField20.setText(lCondicionesSimulacion[indice][14]);           // Precio energia P1
                    jTextField21.setText(lCondicionesSimulacion[indice][15]);           // Precio energia P2
                    jTextField23.setText(lCondicionesSimulacion[indice][8]);            // Precio potencia P1
                    jTextField26.setText(lCondicionesSimulacion[indice][2]);            // potencia contratada P1
                    jTextField112.setText(lCondicionesSimulacion[indice][24]);            // alquiler
                    jTextArea3.setText(lCondicionesSimulacion[indice][20]);              // Observaciones
                    
                    break;  
                     // _________________________________________________________________________________________________________
                    case 10:                                                                                      // contrato 3.0A indx
                    jPanel27.setVisible(true);                                               // panel de potencias maximetro medidas
                    // ...............................
                    jTextField21.setVisible(true); jTextField24.setVisible(true); jLabel32.setVisible(true);  jLabel40.setVisible(true); jLabel43.setVisible(true);
                    jTextField22.setVisible(true); jTextField25.setVisible(true); jLabel33.setVisible(true);  jLabel41.setVisible(true); jLabel44.setVisible(true);
               
                    jTextField37.setVisible(true); jLabel62.setVisible(true); jLabel63.setVisible(true);
                    jTextField38.setVisible(true); jLabel64.setVisible(true); jLabel65.setVisible(true);
                    jTextField74.setVisible(true); jLabel98.setVisible(true); jLabel99.setVisible(true);
                     jCheckBox6.setVisible(true);  
                    // ...............................
                    
                    jTextField29.setText(listaContratosPuntos[indice][1]);              // Fecha contrato
                    
                    jTextField34.setText(listaContratosPuntos[indice][8]);              // Compañia
                    jTextField39.setText(listaContratosPuntos[indice][5]);              // Descripcion Tarifa
                    
                    jTextField20.setText(lCondicionesSimulacion[indice][14]);           // Precio energia P1
                    jTextField21.setText(lCondicionesSimulacion[indice][15]);           // Precio energia P2
                    jTextField22.setText(lCondicionesSimulacion[indice][16]);           // Precio energia P3
                    jTextField74.setText(lCondicionesSimulacion[indice][23]);           // Precio energia de peaje
                    
                    jTextField23.setText(lCondicionesSimulacion[indice][8]);            // Precio potencia P1
                    jTextField24.setText(lCondicionesSimulacion[indice][9]);            // Precio potencia P2
                    jTextField25.setText(lCondicionesSimulacion[indice][10]);            // Precio potencia P3
                    jTextField26.setText(lCondicionesSimulacion[indice][2]);            // potencia contratada P1
                    jTextField37.setText(lCondicionesSimulacion[indice][3]);            // potencia contratada P2
                    jTextField38.setText(lCondicionesSimulacion[indice][4]);            // potencia contratada P3
                    jTextField112.setText(lCondicionesSimulacion[indice][24]);            // alquiler
                    jTextArea3.setText(lCondicionesSimulacion[indice][20]);              // Observaciones
                    // ........................................................
                    if (lCondicionesSimulacion[indice][25] != null) {
                        if (lCondicionesSimulacion[indice][25].equals("1") ){
                                jCheckBox6.setSelected(true);                                 // Se factura siempre la Potencia Maxima en Simulacion
                        } else {

                                jCheckBox6.setSelected(false);  
                        }
                    }
                    break;
                 // _________________________________________________________________________________________________________                        
                   case 11:                                                                                   // contrato 2.0 INDX
                       
                    jPanel27.setVisible(false);             // panel de potencias maximetro medidas
                     // ...............................
                    jTextField21.setVisible(false); jTextField24.setVisible(false); jLabel32.setVisible(false);   jLabel40.setVisible(false); jLabel43.setVisible(false);
                    jTextField22.setVisible(false); jTextField25.setVisible(false); jLabel33.setVisible(false); jLabel41.setVisible(false); jLabel44.setVisible(false);
               
                    jTextField37.setVisible(false); jLabel62.setVisible(false); jLabel63.setVisible(false);
                    jTextField38.setVisible(false); jLabel64.setVisible(false); jLabel65.setVisible(false);
                    
                    jTextField74.setVisible(true); jLabel98.setVisible(true); jLabel99.setVisible(true);            // ENERGIA DE PEAJE
                     // ...............................
                     jCheckBox6.setVisible(false);   
                    // ............................... Condiciones de simulacion
                    
                    jTextField28.setText(listaContratosPuntos[indice][1]);              // Fecha contrato
                
                    
                    jTextField34.setText(listaContratosPuntos[indice][8]);              // Compañia
                   
                    
                    jTextField20.setText(lCondicionesSimulacion[indice][14]);           // Precio energia P1
                    jTextField23.setText(lCondicionesSimulacion[indice][8]);            // Precio potencia P1
                    jTextField26.setText(lCondicionesSimulacion[indice][2]);            // potencia contratada P1
                    jTextField112.setText(lCondicionesSimulacion[indice][24]);            // alquiler
                    jTextArea3.setText(lCondicionesSimulacion[indice][20]);              // Observaciones
                    jTextField74.setText(lCondicionesSimulacion[indice][23]);           // Precio energia de peaje
                    break;
                   // _________________________________________________________________________________________________________                        
                   case 12:                                                                                   // contrato 2.1 INDX
                       
                    jPanel27.setVisible(false);             // panel de potencias maximetro medidas
                     // ...............................
                    jTextField21.setVisible(false); jTextField24.setVisible(false); jLabel32.setVisible(false);   jLabel40.setVisible(false); jLabel43.setVisible(false);
                    jTextField22.setVisible(false); jTextField25.setVisible(false); jLabel33.setVisible(false); jLabel41.setVisible(false); jLabel44.setVisible(false);
               
                    jTextField37.setVisible(false); jLabel62.setVisible(false); jLabel63.setVisible(false);
                    jTextField38.setVisible(false); jLabel64.setVisible(false); jLabel65.setVisible(false);
                    
                    jTextField74.setVisible(true); jLabel98.setVisible(true); jLabel99.setVisible(true);            // ENERGIA DE PEAJE
                     // ...............................
                     jCheckBox6.setVisible(false);  
                    // ............................... Condiciones de simulacion
                    
                    jTextField28.setText(listaContratosPuntos[indice][1]);              // Fecha contrato
                
                    
                    jTextField34.setText(listaContratosPuntos[indice][8]);              // Compañia
                   
                    
                    jTextField20.setText(lCondicionesSimulacion[indice][14]);           // Precio energia P1
                    jTextField23.setText(lCondicionesSimulacion[indice][8]);            // Precio potencia P1
                    jTextField26.setText(lCondicionesSimulacion[indice][2]);            // potencia contratada P1
                    jTextField112.setText(lCondicionesSimulacion[indice][24]);            // alquiler
                    jTextArea3.setText(lCondicionesSimulacion[indice][20]);              // Observaciones
                    jTextField74.setText(lCondicionesSimulacion[indice][23]);           // Precio energia de peaje
                    break;
                     // _________________________________________________________________________________________________________
                    case 13:                                                                                      // contrato 3.1A indx
                    jPanel27.setVisible(true);                                               // panel de potencias maximetro medidas
                    // ...............................
                    jTextField21.setVisible(true); jTextField24.setVisible(true); jLabel32.setVisible(true);  jLabel40.setVisible(true); jLabel43.setVisible(true);
                    jTextField22.setVisible(true); jTextField25.setVisible(true); jLabel33.setVisible(true);  jLabel41.setVisible(true); jLabel44.setVisible(true);
               
                    jTextField37.setVisible(true); jLabel62.setVisible(true); jLabel63.setVisible(true);
                    jTextField38.setVisible(true); jLabel64.setVisible(true); jLabel65.setVisible(true);
                    jTextField74.setVisible(true); jLabel98.setVisible(true); jLabel99.setVisible(true);
                     jCheckBox6.setVisible(true);  
                    // ...............................
                    
                    jTextField29.setText(listaContratosPuntos[indice][1]);              // Fecha contrato
                    
                    jTextField34.setText(listaContratosPuntos[indice][8]);              // Compañia
                    jTextField39.setText(listaContratosPuntos[indice][5]);              // Descripcion Tarifa
                    
                    jTextField20.setText(lCondicionesSimulacion[indice][14]);           // Precio energia P1
                    jTextField21.setText(lCondicionesSimulacion[indice][15]);           // Precio energia P2
                    jTextField22.setText(lCondicionesSimulacion[indice][16]);           // Precio energia P3
                    jTextField74.setText(lCondicionesSimulacion[indice][23]);           // Precio energia de peaje
                    
                    jTextField23.setText(lCondicionesSimulacion[indice][8]);            // Precio potencia P1
                    jTextField24.setText(lCondicionesSimulacion[indice][9]);            // Precio potencia P2
                    jTextField25.setText(lCondicionesSimulacion[indice][10]);            // Precio potencia P3
                    jTextField26.setText(lCondicionesSimulacion[indice][2]);            // potencia contratada P1
                    jTextField37.setText(lCondicionesSimulacion[indice][3]);            // potencia contratada P2
                    jTextField38.setText(lCondicionesSimulacion[indice][4]);            // potencia contratada P3
                    jTextField112.setText(lCondicionesSimulacion[indice][24]);            // alquiler
                    jTextArea3.setText(lCondicionesSimulacion[indice][20]);              // Observaciones
                    // ........................................................
                    if (lCondicionesSimulacion[indice][25] != null) {
                        if (lCondicionesSimulacion[indice][25].equals("1") ){
                                jCheckBox6.setSelected(true);                                 // Se factura siempre la Potencia Maxima en Simulacion
                        } else {

                                jCheckBox6.setSelected(false);  
                        }
                    }
                    break;
                   
            }   
            // ...............................................                              FORMULARIO DE LAS CONDICIONES DE SIMULACIÓN
            // ........................................................................................................................................... 
          
            switch (id_tipo_A) {
                // _________________________________________________________________________________________________________
                case 1:                                                                                         // contrato  ACTUAL 2.0A
                    jTabbedPane11.setSelectedIndex(0);
                    jPanel27.setVisible(false);                                              // panel de potencias maximetro medidas
                    jPanel45.setVisible(false);                                              // panel de reactiva
                    jPanel48.setVisible(false);                                              // panel de reactiva sim
                    
                    jTextField13.setVisible(false); jTextField17.setVisible(false); jLabel19.setVisible(false);  jLabel23.setVisible(false); jLabel29.setVisible(false);
                    jTextField14.setVisible(false); jTextField18.setVisible(false); jLabel20.setVisible(false);  jLabel24.setVisible(false); jLabel30.setVisible(false);
               
                    jTextField35.setVisible(false); jLabel57.setVisible(false); jLabel58.setVisible(false);
                    jTextField36.setVisible(false); jLabel59.setVisible(false); jLabel60.setVisible(false);
                    
                    jLabel21.setVisible(false); jLabel26.setVisible(false); energiaP2.setVisible(false);
                    jLabel25.setVisible(false); jLabel27.setVisible(false); energiaP3.setVisible(false);
                    
                    jTextField73.setVisible(false); jLabel96.setVisible(false); jLabel97.setVisible(false);
                    jTextField75.setVisible(false); jLabel100.setVisible(false); jLabel101.setVisible(false);
                     jCheckBox5.setVisible(false);  
                    // ............................... Condiciones actuales
                    
                    jTextField28.setText(listaContratosPuntosAct[indice][1]);              // Fecha contrato
                    jTextField11.setText(listaContratosPuntosAct[indice][2]);              // Fecha fin de contrato
                    
                    jTextField33.setText(listaContratosPuntosAct[indice][8]);              // Compañia
                  
                    
                    jTextField12.setText(lCondicionesActuales[indice][14]);           // Precio energia P1
                    jTextField16.setText(lCondicionesActuales[indice][8]);            // Precio potencia P1
                    jTextField19.setText(lCondicionesActuales[indice][2]);            // potencia contratada P1
                    jTextField111.setText(lCondicionesActuales[indice][24]);            // alquiler
                    jTextArea2.setText(lCondicionesActuales[indice][20]);              // Observaciones
                    
                    break;
                   // _________________________________________________________________________________________________________
                   case 2:                                                                                          // contrato ACTUAL  2.0DHA
                    jTabbedPane11.setSelectedIndex(0);
                    jPanel27.setVisible(false);                                              // panel de potencias maximetro medidas
                    jPanel45.setVisible(false);                                              // panel de reactiva
                    jPanel48.setVisible(false);                                              // panel de reactiva sim
                    
                    jTextField13.setVisible(true); jTextField17.setVisible(false); jLabel19.setVisible(true);  jLabel23.setVisible(false); jLabel29.setVisible(false);
                    jTextField14.setVisible(false); jTextField18.setVisible(false); jLabel20.setVisible(false);  jLabel24.setVisible(false); jLabel30.setVisible(false);
               
                    jTextField35.setVisible(false); jLabel57.setVisible(false); jLabel58.setVisible(false);
                    jTextField36.setVisible(false); jLabel59.setVisible(false); jLabel60.setVisible(false);
                    
                    jLabel21.setVisible(true); jLabel26.setVisible(true); energiaP2.setVisible(true);
                    jLabel25.setVisible(false); jLabel27.setVisible(false); energiaP3.setVisible(false);
                    
                    jTextField73.setVisible(false); jLabel96.setVisible(false); jLabel97.setVisible(false);
                    jTextField75.setVisible(false); jLabel100.setVisible(false); jLabel101.setVisible(false);
                     jCheckBox5.setVisible(false); 
                     // ............................... Condiciones actuales
                    
                    jTextField28.setText(listaContratosPuntosAct[indice][1]);              // Fecha contrato                    
                    jTextField11.setText(listaContratosPuntosAct[indice][2]);              // Fecha fin de contrato
                    jTextField33.setText(listaContratosPuntosAct[indice][8]);              // Compañia
                    
                    
                    jTextField12.setText(lCondicionesActuales[indice][14]);           // Precio energia P1
                    jTextField13.setText(lCondicionesActuales[indice][15]);           // Precio energia P2
                    jTextField16.setText(lCondicionesActuales[indice][8]);            // Precio potencia P1
                    jTextField19.setText(lCondicionesActuales[indice][2]);            // potencia contratada P1
                    jTextField111.setText(lCondicionesActuales[indice][24]);            // alquiler
                    jTextArea2.setText(lCondicionesActuales[indice][20]);              // Observaciones
                    
                    break;
                 // _________________________________________________________________________________________________________
                 case 3:                                                                                        // contrato ACTUAL  2.1A
                    jTabbedPane11.setSelectedIndex(0);
                    jPanel27.setVisible(false);                                              // panel de potencias maximetro medidas
                    jPanel45.setVisible(false);                                              // panel de reactiva
                    jPanel48.setVisible(false);                                              // panel de reactiva sim
                     
                     
                    jTextField13.setVisible(false); jTextField17.setVisible(false); jLabel19.setVisible(false);  jLabel23.setVisible(false); jLabel29.setVisible(false);
                    jTextField14.setVisible(false); jTextField18.setVisible(false); jLabel20.setVisible(false);  jLabel24.setVisible(false); jLabel30.setVisible(false);
               
                    jTextField35.setVisible(false); jLabel57.setVisible(false); jLabel58.setVisible(false);
                    jTextField36.setVisible(false); jLabel59.setVisible(false); jLabel60.setVisible(false);
                    
                    jLabel21.setVisible(false); jLabel26.setVisible(false); energiaP2.setVisible(false);
                    jLabel25.setVisible(false); jLabel27.setVisible(false); energiaP3.setVisible(false);
                     jCheckBox5.setVisible(false); 
                    // ............................... Condiciones actuales
                    
                    jTextField73.setVisible(false); jLabel96.setVisible(false); jLabel97.setVisible(false);
                    jTextField75.setVisible(false); jLabel100.setVisible(false); jLabel101.setVisible(false);
                    
                    jTextField28.setText(listaContratosPuntosAct[indice][1]);              // Fecha contrato
                    jTextField11.setText(listaContratosPuntosAct[indice][2]);              // Fecha fin de contrato
                    
                    jTextField33.setText(listaContratosPuntosAct[indice][8]);              // Compañia
                    
                    
                    jTextField12.setText(lCondicionesActuales[indice][14]);           // Precio energia P1
                    jTextField16.setText(lCondicionesActuales[indice][8]);            // Precio potencia P1
                    jTextField19.setText(lCondicionesActuales[indice][2]);            // potencia contratada P1
                    jTextField111.setText(lCondicionesActuales[indice][24]);            // alquiler
                    jTextArea2.setText(lCondicionesActuales[indice][20]);              // Observaciones
                    
                    break;
                    // _________________________________________________________________________________________________________
                    case 4:                                                                                        // contrato ACTUAL  2.1DHA
                    jTabbedPane11.setSelectedIndex(0);
                    jPanel27.setVisible(true);             // panel de potencias maximetro medidas
                    jTextField13.setVisible(true); jTextField17.setVisible(false); jLabel19.setVisible(true);  jLabel23.setVisible(false); jLabel29.setVisible(false);
                    jTextField14.setVisible(false); jTextField18.setVisible(false); jLabel20.setVisible(false);  jLabel24.setVisible(false); jLabel30.setVisible(false);
               
                    jTextField35.setVisible(false); jLabel57.setVisible(false); jLabel58.setVisible(false);
                    jTextField36.setVisible(false); jLabel59.setVisible(false); jLabel60.setVisible(false);
                    
                    jLabel21.setVisible(true); jLabel26.setVisible(true); energiaP2.setVisible(true);
                    jLabel25.setVisible(false); jLabel27.setVisible(false); energiaP3.setVisible(false);
                     jCheckBox5.setVisible(false); 
                   // ............................... Condiciones actuales
                    
                    jTextField73.setVisible(false); jLabel96.setVisible(false); jLabel97.setVisible(false);
                    jTextField75.setVisible(false); jLabel100.setVisible(false); jLabel101.setVisible(false);
                    
                    jTextField28.setText(listaContratosPuntosAct[indice][1]);              // Fecha contrato
                    jTextField11.setText(listaContratosPuntosAct[indice][2]);              // Fecha fin de contrato
                    jTextField33.setText(listaContratosPuntosAct[indice][8]);              // Compañia
                   
                    jTextField12.setText(lCondicionesActuales[indice][14]);           // Precio energia P1
                    jTextField13.setText(lCondicionesActuales[indice][15]);           // Precio energia P2
                    jTextField16.setText(lCondicionesActuales[indice][8]);            // Precio potencia P1
                    jTextField19.setText(lCondicionesActuales[indice][2]);            // potencia contratada P1
                    jTextField111.setText(lCondicionesActuales[indice][24]);            // alquiler
                    jTextArea2.setText(lCondicionesActuales[indice][20]);              // Observaciones
                    
                    break;
                    // _________________________________________________________________________________________________________
                    case 5:                                                                                             // contrato ACTUAL  3.0A
                    jTabbedPane11.setSelectedIndex(0);
                    jPanel27.setVisible(true);             // panel de potencias maximetro medidas
                    jTextField13.setVisible(true); jTextField17.setVisible(true); jLabel19.setVisible(true);  jLabel23.setVisible(true); jLabel29.setVisible(true);
                    jTextField14.setVisible(true); jTextField18.setVisible(true); jLabel20.setVisible(true);  jLabel24.setVisible(true); jLabel30.setVisible(true);
               
                    jTextField35.setVisible(true); jLabel57.setVisible(true); jLabel58.setVisible(true);
                    jTextField36.setVisible(true); jLabel59.setVisible(true); jLabel60.setVisible(true);
                    
                    jLabel21.setVisible(true); jLabel26.setVisible(true); energiaP2.setVisible(true);
                    jLabel25.setVisible(true); jLabel27.setVisible(true); energiaP3.setVisible(true);
                     jCheckBox5.setVisible(true); 
                     // ............................... Condiciones actuales
                    
                    jTextField73.setVisible(false); jLabel96.setVisible(false); jLabel97.setVisible(false);
                    jTextField75.setVisible(false); jLabel100.setVisible(false); jLabel101.setVisible(false);
                    
                    jTextField28.setText(listaContratosPuntosAct[indice][1]);              // Fecha contrato
                    jTextField11.setText(listaContratosPuntosAct[indice][2]);              // Fecha fin de contrato
                    jTextField33.setText(listaContratosPuntosAct[indice][8]);              // Compañia
                 
                    
                    jTextField12.setText(lCondicionesActuales[indice][14]);           // Precio energia P1
                    jTextField13.setText(lCondicionesActuales[indice][15]);           // Precio energia P2
                    jTextField14.setText(lCondicionesActuales[indice][16]);           // Precio energia P3
                    jTextField16.setText(lCondicionesActuales[indice][8]);            // Precio potencia P1
                    jTextField17.setText(lCondicionesActuales[indice][9]);            // Precio potencia P2
                    jTextField18.setText(lCondicionesActuales[indice][10]);           // Precio potencia P3
                    jTextField19.setText(lCondicionesActuales[indice][2]);            // potencia contratada P1
                    jTextField35.setText(lCondicionesActuales[indice][3]);            // potencia contratada P2
                    jTextField36.setText(lCondicionesActuales[indice][4]);            // potencia contratada P3
                    jTextField111.setText(lCondicionesActuales[indice][24]);            // alquiler    
                    jTextArea2.setText(lCondicionesActuales[indice][20]);              // Observaciones  
                   
                    if (lCondicionesActuales[indice][25] != null) {
                        if (lCondicionesActuales[indice][25].equals("1") ){
                                jCheckBox5.setSelected(true);                                 // Se factura siempre la Potencia Maxima en Simulacion
                        } else {

                                jCheckBox5.setSelected(false);  
                        }
                    }
                    break;
                    // _________________________________________________________________________________________________________
                    case 6:                                                                                             // contrato ACTUAL  3.1A
                    jTabbedPane11.setSelectedIndex(0);
                    jPanel27.setVisible(true);             // panel de potencias maximetro medidas
                    jTextField13.setVisible(true); jTextField17.setVisible(true); jLabel19.setVisible(true);  jLabel23.setVisible(true); jLabel29.setVisible(true);
                    jTextField14.setVisible(true); jTextField18.setVisible(true); jLabel20.setVisible(true);  jLabel24.setVisible(true); jLabel30.setVisible(true);
               
                    jTextField35.setVisible(true); jLabel57.setVisible(true); jLabel58.setVisible(true);
                    jTextField36.setVisible(true); jLabel59.setVisible(true); jLabel60.setVisible(true);
                    
                    jLabel21.setVisible(true); jLabel26.setVisible(true); energiaP2.setVisible(true);
                    jLabel25.setVisible(true); jLabel27.setVisible(true); energiaP3.setVisible(true);
                     jCheckBox5.setVisible(true); 
                     // ............................... Condiciones actuales
                    
                    jTextField73.setVisible(false); jLabel96.setVisible(false); jLabel97.setVisible(false);
                    jTextField75.setVisible(false); jLabel100.setVisible(false); jLabel101.setVisible(false);
                    
                    jTextField28.setText(listaContratosPuntosAct[indice][1]);              // Fecha contrato
                    jTextField11.setText(listaContratosPuntosAct[indice][2]);              // Fecha fin de contrato
                    jTextField33.setText(listaContratosPuntosAct[indice][8]);              // Compañia
                 
                    
                    jTextField12.setText(lCondicionesActuales[indice][14]);           // Precio energia P1
                    jTextField13.setText(lCondicionesActuales[indice][15]);           // Precio energia P2
                    jTextField14.setText(lCondicionesActuales[indice][16]);           // Precio energia P3
                    jTextField16.setText(lCondicionesActuales[indice][8]);            // Precio potencia P1
                    jTextField17.setText(lCondicionesActuales[indice][9]);            // Precio potencia P2
                    jTextField18.setText(lCondicionesActuales[indice][10]);           // Precio potencia P3
                    jTextField19.setText(lCondicionesActuales[indice][2]);            // potencia contratada P1
                    jTextField35.setText(lCondicionesActuales[indice][3]);            // potencia contratada P2
                    jTextField36.setText(lCondicionesActuales[indice][4]);            // potencia contratada P3
                    jTextField111.setText(lCondicionesActuales[indice][24]);            // alquiler    
                    jTextArea2.setText(lCondicionesActuales[indice][20]);              // Observaciones  
                   
                    if (lCondicionesActuales[indice][25] != null) {
                        if (lCondicionesActuales[indice][25].equals("1") ){
                                jCheckBox5.setSelected(true);                                 // Se factura siempre la Potencia Maxima en Simulacion
                        } else {

                                jCheckBox5.setSelected(false);  
                        }
                    }
                    break;
                    // _________________________________________________________________________________________________________
                    case 7:                                                             // tarifa 6.1 
                        jTabbedPane11.setSelectedIndex(1);
                           // ............................... Condiciones actuales
                    
                        jTextField244.setText(listaContratosPuntosAct[indice][1]);              // Fecha contrato
                        jTextField245.setText(listaContratosPuntosAct[indice][2]);              // Fecha fin de contrato
                        jTextField243.setText(listaContratosPuntosAct[indice][8]);              // Compañia
                        
                        jTextField246.setText(lCondicionesActuales[indice][14]);           // Precio energia P1
                        jTextField247.setText(lCondicionesActuales[indice][15]);           // Precio energia P2
                        jTextField248.setText(lCondicionesActuales[indice][16]);           // Precio energia P3
                        jTextField252.setText(lCondicionesActuales[indice][17]);           // Precio energia P1
                        jTextField253.setText(lCondicionesActuales[indice][18]);           // Precio energia P2
                        jTextField254.setText(lCondicionesActuales[indice][19]);           // Precio energia P3
                        
                        jTextField258.setText(lCondicionesActuales[indice][8]);            // Precio potencia P1
                        jTextField259.setText(lCondicionesActuales[indice][9]);            // Precio potencia P2
                        jTextField260.setText(lCondicionesActuales[indice][10]);           // Precio potencia P3
                        jTextField261.setText(lCondicionesActuales[indice][11]);           // Precio potencia P4
                        jTextField262.setText(lCondicionesActuales[indice][12]);           // Precio potencia P5
                        jTextField263.setText(lCondicionesActuales[indice][13]);           // Precio potencia P6
                        
                        jTextField249.setText(lCondicionesActuales[indice][2]);            // potencia contratada P1
                        jTextField250.setText(lCondicionesActuales[indice][3]);            // potencia contratada P2
                        jTextField251.setText(lCondicionesActuales[indice][4]);            // potencia contratada P3
                        jTextField255.setText(lCondicionesActuales[indice][5]);            // potencia contratada P4
                        jTextField256.setText(lCondicionesActuales[indice][6]);            // potencia contratada P5
                        jTextField257.setText(lCondicionesActuales[indice][7]);            // potencia contratada P6
                        
                        jTextField266.setText(lCondicionesActuales[indice][24]);            // alquiler    
                        jTextArea5.setText(lCondicionesActuales[indice][20]);              // Observaciones  

                        if (lCondicionesActuales[indice][25] != null) {
                            if (lCondicionesActuales[indice][25].equals("1") ){
                                    jCheckBox7.setSelected(true);                                 // Se factura siempre la Potencia Maxima en Simulacion
                            } else {

                                    jCheckBox7.setSelected(false);  
                            }
                        }                   
                        
                    break;    
                    // _________________________________________________________________________________________________________    
                    case 8:                                                                             // Tarifa ACTUAL 2.0DHA Indexado
                    jTabbedPane11.setSelectedIndex(0);
                    jTextField13.setVisible(true); jTextField17.setVisible(false); jLabel19.setVisible(true);  jLabel23.setVisible(false); jLabel29.setVisible(false);
                    jTextField14.setVisible(false); jTextField18.setVisible(false); jLabel20.setVisible(false);  jLabel24.setVisible(false); jLabel30.setVisible(false);
               
                    jTextField35.setVisible(false); jLabel57.setVisible(false); jLabel58.setVisible(false);
                    jTextField36.setVisible(false); jLabel59.setVisible(false); jLabel60.setVisible(false);
                    
                    jLabel21.setVisible(true); jLabel26.setVisible(true); energiaP2.setVisible(true);
                    jLabel25.setVisible(false); jLabel27.setVisible(false); energiaP3.setVisible(false);
                     jCheckBox5.setVisible(false); 
                    // ............................... Condiciones actuales
                    
                    jTextField73.setVisible(true); jLabel96.setVisible(true); jLabel97.setVisible(true);   // Precio energia peaje
                    jTextField75.setVisible(true); jLabel100.setVisible(true); jLabel101.setVisible(true); //  energia peaje
                    
                    jTextField28.setText(listaContratosPuntosAct[indice][1]);              // Fecha contrato                    
                    jTextField11.setText(listaContratosPuntosAct[indice][2]);              // Fecha fin de contrato
                    jTextField33.setText(listaContratosPuntosAct[indice][8]);              // Compañia
                    
                    jTextField12.setText(lCondicionesActuales[indice][14]);           // Precio energia P1
                    jTextField13.setText(lCondicionesActuales[indice][15]);           // Precio energia P2
                    jTextField73.setText(lCondicionesActuales[indice][23]);           // Precio energia de Peaje
                    jTextField16.setText(lCondicionesActuales[indice][8]);            // Precio potencia P1
                    jTextField19.setText(lCondicionesActuales[indice][2]);            // potencia contratada P1
                    jTextField111.setText(lCondicionesActuales[indice][24]);            // alquiler
                    jTextArea2.setText(lCondicionesActuales[indice][20]);              // Observaciones
                    
                    break;
                    // _________________________________________________________________________________________________________
                    case 9:                                                                                        // contrato ACTUAL  2.1DHA INDX
                    jTabbedPane11.setSelectedIndex(0);
                    jPanel27.setVisible(true);             // panel de potencias maximetro medidas
                    jTextField13.setVisible(true); jTextField17.setVisible(false); jLabel19.setVisible(true);  jLabel23.setVisible(false); jLabel29.setVisible(false);
                    jTextField14.setVisible(false); jTextField18.setVisible(false); jLabel20.setVisible(false);  jLabel24.setVisible(false); jLabel30.setVisible(false);
               
                    jTextField35.setVisible(false); jLabel57.setVisible(false); jLabel58.setVisible(false);
                    jTextField36.setVisible(false); jLabel59.setVisible(false); jLabel60.setVisible(false);
                    
                    jLabel21.setVisible(true); jLabel26.setVisible(true); energiaP2.setVisible(true);
                    jLabel25.setVisible(false); jLabel27.setVisible(false); energiaP3.setVisible(false);
                    jCheckBox5.setVisible(false); 
                   // ............................... Condiciones actuales
                    
                    jTextField73.setVisible(true); jLabel96.setVisible(true); jLabel97.setVisible(true);
                    jTextField75.setVisible(true); jLabel100.setVisible(true); jLabel101.setVisible(true);
                    
                    jTextField28.setText(listaContratosPuntosAct[indice][1]);              // Fecha contrato
                    jTextField11.setText(listaContratosPuntosAct[indice][2]);              // Fecha fin de contrato
                    jTextField33.setText(listaContratosPuntosAct[indice][8]);              // Compañia
                   
                    jTextField12.setText(lCondicionesActuales[indice][14]);           // Precio energia P1
                    jTextField13.setText(lCondicionesActuales[indice][15]);           // Precio energia P2
                    jTextField73.setText(lCondicionesActuales[indice][23]);           // Precio energia de Peaje
                    jTextField16.setText(lCondicionesActuales[indice][8]);            // Precio potencia P1
                    jTextField19.setText(lCondicionesActuales[indice][2]);            // potencia contratada P1
                    jTextField111.setText(lCondicionesActuales[indice][24]);            // alquiler
                    jTextArea2.setText(lCondicionesActuales[indice][20]);              // Observaciones
                    
                    break;
                    // _________________________________________________________________________________________________________
                    case 10:                                                                                             // contrato ACTUAL  3.0A indx
                    jTabbedPane11.setSelectedIndex(0);
                    jPanel27.setVisible(true);             // panel de potencias maximetro medidas
                    jTextField13.setVisible(true); jTextField17.setVisible(true); jLabel19.setVisible(true);  jLabel23.setVisible(true); jLabel29.setVisible(true);
                    jTextField14.setVisible(true); jTextField18.setVisible(true); jLabel20.setVisible(true);  jLabel24.setVisible(true); jLabel30.setVisible(true);
               
                    jTextField35.setVisible(true); jLabel57.setVisible(true); jLabel58.setVisible(true);
                    jTextField36.setVisible(true); jLabel59.setVisible(true); jLabel60.setVisible(true);
                    
                    jLabel21.setVisible(true); jLabel26.setVisible(true); energiaP2.setVisible(true);
                    jLabel25.setVisible(true); jLabel27.setVisible(true); energiaP3.setVisible(true);
                     jCheckBox5.setVisible(true); 
                     // ............................... Condiciones actuales
                    
                    jTextField73.setVisible(true); jLabel96.setVisible(true); jLabel97.setVisible(true);
                    jTextField75.setVisible(true); jLabel100.setVisible(true); jLabel101.setVisible(true);
                    
                    jTextField28.setText(listaContratosPuntosAct[indice][1]);              // Fecha contrato
                    jTextField11.setText(listaContratosPuntosAct[indice][2]);              // Fecha fin de contrato
                    jTextField33.setText(listaContratosPuntosAct[indice][8]);              // Compañia
                 
                    
                    jTextField12.setText(lCondicionesActuales[indice][14]);           // Precio energia P1
                    jTextField13.setText(lCondicionesActuales[indice][15]);           // Precio energia P2
                    jTextField14.setText(lCondicionesActuales[indice][16]);           // Precio energia P3
                    jTextField73.setText(lCondicionesActuales[indice][23]);           // Precio energia de peaje
                    
                    jTextField16.setText(lCondicionesActuales[indice][8]);            // Precio potencia P1
                    jTextField17.setText(lCondicionesActuales[indice][9]);            // Precio potencia P2
                    jTextField18.setText(lCondicionesActuales[indice][10]);           // Precio potencia P3
                    jTextField19.setText(lCondicionesActuales[indice][2]);            // potencia contratada P1
                    jTextField35.setText(lCondicionesActuales[indice][3]);            // potencia contratada P2
                    jTextField36.setText(lCondicionesActuales[indice][4]);            // potencia contratada P3
                    jTextField111.setText(lCondicionesActuales[indice][24]);            // alquiler    
                    jTextArea2.setText(lCondicionesActuales[indice][20]);              // Observaciones  
                    
                    if (lCondicionesActuales[indice][25] != null) {
                        if (lCondicionesActuales[indice][25].equals("1") ){
                                jCheckBox5.setSelected(true);                                 // Se factura siempre la Potencia Maxima en Simulacion
                        } else {

                                jCheckBox5.setSelected(false);  
                        }
                    }
                    break;
                    // _________________________________________________________________________________________________________
                    case 11:                                                                                         // contrato  ACTUAL 2.0A indx
                    jTabbedPane11.setSelectedIndex(0);
                    jPanel27.setVisible(true);             // panel de potencias maximetro medidas
                    jTextField13.setVisible(false); jTextField17.setVisible(false); jLabel19.setVisible(false);  jLabel23.setVisible(false); jLabel29.setVisible(false);
                    jTextField14.setVisible(false); jTextField18.setVisible(false); jLabel20.setVisible(false);  jLabel24.setVisible(false); jLabel30.setVisible(false);
               
                    jTextField35.setVisible(false); jLabel57.setVisible(false); jLabel58.setVisible(false);
                    jTextField36.setVisible(false); jLabel59.setVisible(false); jLabel60.setVisible(false);
                    
                    jLabel21.setVisible(false); jLabel26.setVisible(false); energiaP2.setVisible(false);
                    jLabel25.setVisible(false); jLabel27.setVisible(false); energiaP3.setVisible(false);
                    
                    jTextField73.setVisible(true); jLabel96.setVisible(true); jLabel97.setVisible(true);
                    jTextField75.setVisible(false); jLabel100.setVisible(false); jLabel101.setVisible(false);
                     jCheckBox5.setVisible(false);   
                    // ............................... Condiciones actuales
                    
                    jTextField28.setText(listaContratosPuntosAct[indice][1]);              // Fecha contrato
                    jTextField11.setText(listaContratosPuntosAct[indice][2]);              // Fecha fin de contrato
                    
                    jTextField33.setText(listaContratosPuntosAct[indice][8]);              // Compañia
                  
                    
                    jTextField12.setText(lCondicionesActuales[indice][14]);           // Precio energia P1
                    jTextField16.setText(lCondicionesActuales[indice][8]);            // Precio potencia P1
                    jTextField19.setText(lCondicionesActuales[indice][2]);            // potencia contratada P1
                    jTextField111.setText(lCondicionesActuales[indice][24]);            // alquiler
                    jTextArea2.setText(lCondicionesActuales[indice][20]);              // Observaciones
                    jTextField73.setText(lCondicionesActuales[indice][23]);           // Precio energia de peaje
                    break;
                     // _________________________________________________________________________________________________________
                    case 12:                                                                                         // contrato  ACTUAL 2.1A indx
                    jTabbedPane11.setSelectedIndex(0);
                    jPanel27.setVisible(true);             // panel de potencias maximetro medidas
                    jTextField13.setVisible(false); jTextField17.setVisible(false); jLabel19.setVisible(false);  jLabel23.setVisible(false); jLabel29.setVisible(false);
                    jTextField14.setVisible(false); jTextField18.setVisible(false); jLabel20.setVisible(false);  jLabel24.setVisible(false); jLabel30.setVisible(false);
               
                    jTextField35.setVisible(false); jLabel57.setVisible(false); jLabel58.setVisible(false);
                    jTextField36.setVisible(false); jLabel59.setVisible(false); jLabel60.setVisible(false);
                    
                    jLabel21.setVisible(false); jLabel26.setVisible(false); energiaP2.setVisible(false);
                    jLabel25.setVisible(false); jLabel27.setVisible(false); energiaP3.setVisible(false);
                    
                    jTextField73.setVisible(true); jLabel96.setVisible(true); jLabel97.setVisible(true);
                    jTextField75.setVisible(false); jLabel100.setVisible(false); jLabel101.setVisible(false);
                     jCheckBox5.setVisible(false);  
                    // ............................... Condiciones actuales
                    
                    jTextField28.setText(listaContratosPuntosAct[indice][1]);              // Fecha contrato
                    jTextField11.setText(listaContratosPuntosAct[indice][2]);              // Fecha fin de contrato
                    
                    jTextField33.setText(listaContratosPuntosAct[indice][8]);              // Compañia
                  
                    
                    jTextField12.setText(lCondicionesActuales[indice][14]);           // Precio energia P1
                    jTextField16.setText(lCondicionesActuales[indice][8]);            // Precio potencia P1
                    jTextField19.setText(lCondicionesActuales[indice][2]);            // potencia contratada P1
                    jTextField111.setText(lCondicionesActuales[indice][24]);            // alquiler
                    jTextArea2.setText(lCondicionesActuales[indice][20]);              // Observaciones
                    jTextField73.setText(lCondicionesActuales[indice][23]);           // Precio energia de peaje
                    break;
                    // _________________________________________________________________________________________________________
                    case 13:                                                                                             // contrato ACTUAL  3.1A indx
                    jTabbedPane11.setSelectedIndex(0);
                    jPanel27.setVisible(true);             // panel de potencias maximetro medidas
                    jTextField13.setVisible(true); jTextField17.setVisible(true); jLabel19.setVisible(true);  jLabel23.setVisible(true); jLabel29.setVisible(true);
                    jTextField14.setVisible(true); jTextField18.setVisible(true); jLabel20.setVisible(true);  jLabel24.setVisible(true); jLabel30.setVisible(true);
               
                    jTextField35.setVisible(true); jLabel57.setVisible(true); jLabel58.setVisible(true);
                    jTextField36.setVisible(true); jLabel59.setVisible(true); jLabel60.setVisible(true);
                    
                    jLabel21.setVisible(true); jLabel26.setVisible(true); energiaP2.setVisible(true);
                    jLabel25.setVisible(true); jLabel27.setVisible(true); energiaP3.setVisible(true);
                     jCheckBox5.setVisible(true); 
                     // ............................... Condiciones actuales
                    
                    jTextField73.setVisible(true); jLabel96.setVisible(true); jLabel97.setVisible(true);
                    jTextField75.setVisible(true); jLabel100.setVisible(true); jLabel101.setVisible(true);
                    
                    jTextField28.setText(listaContratosPuntosAct[indice][1]);              // Fecha contrato
                    jTextField11.setText(listaContratosPuntosAct[indice][2]);              // Fecha fin de contrato
                    jTextField33.setText(listaContratosPuntosAct[indice][8]);              // Compañia
                 
                    
                    jTextField246.setText(lCondicionesActuales[indice][14]);           // Precio energia P1
                    jTextField247.setText(lCondicionesActuales[indice][15]);           // Precio energia P2
                    jTextField248.setText(lCondicionesActuales[indice][16]);           // Precio energia P3
                    jTextField252.setText(lCondicionesActuales[indice][17]);           // Precio energia P4
                    jTextField253.setText(lCondicionesActuales[indice][18]);           // Precio energia P5
                    jTextField254.setText(lCondicionesActuales[indice][19]);           // Precio energia P6
                    
                    jTextField265.setText(lCondicionesActuales[indice][23]);           // Precio energia de peaje
                    
                    jTextField16.setText(lCondicionesActuales[indice][8]);            // Precio potencia P1
                    jTextField17.setText(lCondicionesActuales[indice][9]);            // Precio potencia P2
                    jTextField18.setText(lCondicionesActuales[indice][10]);           // Precio potencia P3
                    jTextField19.setText(lCondicionesActuales[indice][2]);            // potencia contratada P1
                    jTextField35.setText(lCondicionesActuales[indice][3]);            // potencia contratada P2
                    jTextField36.setText(lCondicionesActuales[indice][4]);            // potencia contratada P3
                    jTextField111.setText(lCondicionesActuales[indice][24]);            // alquiler    
                    jTextArea2.setText(lCondicionesActuales[indice][20]);              // Observaciones  
                    
                    if (lCondicionesActuales[indice][25] != null) {
                        if (lCondicionesActuales[indice][25].equals("1") ){
                                jCheckBox5.setSelected(true);                                 // Se factura siempre la Potencia Maxima en Simulacion
                        } else {

                                jCheckBox5.setSelected(false);  
                        }
                    }
                    break;
                    // _________________________________________________________________________________________________________
                    case 14:                                                                        // tarifa 6.1 indexado
                        jTabbedPane11.setSelectedIndex(1);
                           // ............................... Condiciones actuales
                    
                        jTextField244.setText(listaContratosPuntosAct[indice][1]);              // Fecha contrato
                        jTextField245.setText(listaContratosPuntosAct[indice][2]);              // Fecha fin de contrato
                        jTextField243.setText(listaContratosPuntosAct[indice][8]);              // Compañia
                        
                        jTextField246.setText(lCondicionesActuales[indice][14]);           // Precio energia P1
                        jTextField247.setText(lCondicionesActuales[indice][15]);           // Precio energia P2
                        jTextField248.setText(lCondicionesActuales[indice][16]);           // Precio energia P3
                        jTextField252.setText(lCondicionesActuales[indice][17]);           // Precio energia P1
                        jTextField253.setText(lCondicionesActuales[indice][18]);           // Precio energia P2
                        jTextField254.setText(lCondicionesActuales[indice][19]);           // Precio energia P3
                        
                        jTextField258.setText(lCondicionesActuales[indice][8]);            // Precio potencia P1
                        jTextField259.setText(lCondicionesActuales[indice][9]);            // Precio potencia P2
                        jTextField260.setText(lCondicionesActuales[indice][10]);           // Precio potencia P3
                        jTextField261.setText(lCondicionesActuales[indice][11]);           // Precio potencia P4
                        jTextField262.setText(lCondicionesActuales[indice][12]);           // Precio potencia P5
                        jTextField263.setText(lCondicionesActuales[indice][13]);           // Precio potencia P6
                        
                        jTextField249.setText(lCondicionesActuales[indice][2]);            // potencia contratada P1
                        jTextField250.setText(lCondicionesActuales[indice][3]);            // potencia contratada P2
                        jTextField251.setText(lCondicionesActuales[indice][4]);            // potencia contratada P3
                        jTextField255.setText(lCondicionesActuales[indice][5]);            // potencia contratada P4
                        jTextField256.setText(lCondicionesActuales[indice][6]);            // potencia contratada P5
                        jTextField257.setText(lCondicionesActuales[indice][7]);            // potencia contratada P6
                        
                        jTextField265.setText(lCondicionesActuales[indice][23]);            // Precio energía de peaje    
                        jTextField266.setText(lCondicionesActuales[indice][24]);            // alquiler    
                        jTextArea5.setText(lCondicionesActuales[indice][20]);              // Observaciones  

                        if (lCondicionesActuales[indice][25] != null) {
                            if (lCondicionesActuales[indice][25].equals("1") ){
                                    jCheckBox7.setSelected(true);                                 // Se factura siempre la Potencia Maxima en Simulacion
                            } else {

                                    jCheckBox7.setSelected(false);  
                            }
                        }                   
                    break;   
                        
            }     
               
               
           }
            
            // .........................................................................................................................
           }
 // ------------------------------------------------------------------------------------------------------------------------
 private void generaTablaHistoricoPuntos() {
     
                System.out.println("----COMIENZO EL FORMATEO TABLA AHORROS PUNTO---");
           
                DefaultTableModel model;
		model = new DefaultTableModel();        // definimos el objeto tableModel
               
		miTabla01 = new JTable();                // creamos la instancia de la tabla
		miTabla01.setModel(model);
                
                                 
		model.addColumn("Fecha");                
		model.addColumn("D.Fct.Opt.");
		model.addColumn("A. Conseguido €");
		model.addColumn("A. Total €");
                model.addColumn("Coste Total €");
                model.addColumn("Coste Simulado €");
                model.addColumn("Ahorro");
                
                miBarra01.setViewportView(miTabla01);
                
 }
 // ------------------------------------------------------------------------------------------------------------------------
 private void actualizarTablaHistoricoPuntos(int id_punto) {
     
                System.out.println("----ACTUALIZO TABLA id_punto="+id_punto+"---");
           
                DefaultTableModel model;
		model = new DefaultTableModel();        // definimos el objeto tableModel
               
		miTabla01 = new JTable();                // creamos la instancia de la tabla
		miTabla01.setModel(model);
                
                                 
		model.addColumn("Fecha");                
		model.addColumn("D.Fct.Opt.");
		model.addColumn("A. Conseguido €");
		model.addColumn("A. Total €");
                model.addColumn("Coste Total €");
                model.addColumn("Coste Simulado €");
                model.addColumn("% Ahorro");
                
                //Nueva instancia de la clase que contiene el formato
                FormatoTablaPuntos formato = new FormatoTablaPuntos();
                          
                //Se obtiene la tabla y se establece el formato para cada tipo de dato
                
                miTabla01.setDefaultRenderer(Double.class, formato); 
                miTabla01.setDefaultRenderer(String.class, formato); 
                miTabla01.setDefaultRenderer(Integer.class, formato);
                miTabla01.setDefaultRenderer(Object.class, formato);
		
               saepDao misaepDao2 = new saepDao();
                
                
		misaepDao2.consultaHistoricoAhorrosPunto(model,id_punto,this.id_cliente_actual);
              
                
                
                miBarra01.setViewportView(miTabla01);
                
 }    
 // ------------------------------------------------------------------------------------------------------------------------
 public void calculoPreliminarPunto(){
     
     double pEP1,pEP2,pEP3,pPP1,pPP2,pPP3 ;
     double P1M,P2M,P3M, PF1a,PF2a,PF3a,PF1s,PF2s,PF3s ;
     double pEP1s,pEP2s,pEP3s,pPP1s,pPP2s,pPP3s,pEP ;
     double aEP1,aEP2,aEP3,aPP1,aPP2,aPP3,aE,aP ;
     double eEP1,eEP2,eEP3,eEP=0,pEPa =0,pEPs =0,eEP1s,eEP2s,eEP3s,eEPs=0 ;
     double ahorro, ahorro_total, ahorro_acumulado ;
     double coste_actual, coste_simulado, coste_actual_DI, porcentaje;
     double pPC1,pPC2,pPC3 ;
     double psPC1,psPC2,psPC3 ;
     double pAlquiler, pBIF, pBIC=0, pReactiva=0, psAlquiler ;
     double PR=0 ;
     double cosfiP1=0, cosfiP2=0 ;
     double eRSP1=0, eRSP2=0 ;
     String seRSP1="", seRSP2="",sCRS="" ;
     double costeReactivaSim=0 ;
     double pBonificacion=0;
     
     int indice,dias,diasOptimizado,diasCond=0 ;
     
     double impuesto_electrico  = 1.051127 ;
     double impuesto_iva        = 1.21 ;
     double costeReactiva       = 0.041554 ;
     
     String sFecha1="", sFecha2="";
     String sAhorro, sCoste_Actual, sCoste_Simulado, sAhorro_Total, sPorcentaje, spBIC ;
     
     indice = this.indGen ;
     
     this.sMensajes = "";
    
     // .......................................................................
     
     sFecha1    = jTextField7.getText(); sFecha1.trim();
     sFecha2    = jTextField8.getText(); sFecha2.trim();
     
     pAlquiler  = Double.valueOf(jTextField80.getText());                           // precio del alquiler en factura
   
     
     pBIF       = Double.valueOf(jTextField81.getText());                           // precio base imponible de factura
     
     dias = diferenciaFechas(sFecha1, sFecha2 ,1);
     psAlquiler  = Double.valueOf(jTextField112.getText());
     // .......................................................................
     if ( psAlquiler == 0  ) {
            psAlquiler  = pAlquiler ;
     } else {
            psAlquiler  = dias * Double.valueOf(jTextField112.getText());                  // precio del alquiler en simulacion
     }
     // .......................................................................
     try {
         
        ahorro_total       = Double.valueOf(String.valueOf(miTabla01.getValueAt(0, 3))) ;
        ahorro_acumulado   = Double.valueOf(String.valueOf(miTabla01.getValueAt(0, 3))) ;
        diasOptimizado     = Integer.valueOf(String.valueOf(miTabla01.getValueAt(0, 1))) ; System.out.println("diasOptimizado="+diasOptimizado);
     } catch ( ArrayIndexOutOfBoundsException ex) {
        ahorro_total       = 0 ; 
        ahorro_acumulado   = 0 ;
        diasOptimizado     = 0 ;
     }
     // .......................................................................
     String sFecha1Cond=""; 
     
     sFecha1Cond = jTextField117.getText(); sFecha1Cond.trim();
    
     if ( sFecha1Cond.length() > 0) {
           
         diasCond = diferenciaFechas(sFecha1,sFecha1Cond ,1); System.out.println("Dias restantes ("+sFecha1Cond+"-"+sFecha1+") para calcular optimización reactiva:"+diasCond) ;
         
     }
     // .......................................................................
     
     NumberFormat formatoImporte = NumberFormat.getCurrencyInstance();

     formatoImporte = NumberFormat.getCurrencyInstance(new Locale("es","ES"));
         
     NumberFormat formatoPorcentaje = NumberFormat.getPercentInstance();
     
     NumberFormat formatoNumero = NumberFormat.getNumberInstance();
     
     formatoNumero.setMaximumFractionDigits(2);
     
     jTextField40.setText(String.valueOf(diasOptimizado));
     
     jTextField82.setBackground(Color.white);
     jTextField80.setBackground(new Color(0xCCFFCC)); 
     jTextField81.setBackground(new Color(0xCCFFCC));  
     
     // .......................................................................................................................................  
     // .....................................           CALCULO DE AHORRO     DE TARIFA 2.0A a TARIFA 2.0A
            
     // .......................................................................
     if ( this.tipo_Act == 1 && this.tipo_Sim== 1) {
         
         eEP1 = Double.parseDouble(energiaP1.getText());                                 // Energía consumida en P1
         
         pEP1  = Double.parseDouble(lCondicionesActuales[indice][14]) ;                  // Precio en Energía en P1 con contrato actual
         pEP1s = Double.parseDouble(lCondicionesSimulacion[indice][14]) ;                // Precio en Energía en P1 Simulado (contrato anterior)
         
        
         
         pPP1  = Double.parseDouble(lCondicionesActuales[indice][8]) ;                   // Precio en Potencia en P1 Actual
         pPP1s = Double.parseDouble(lCondicionesSimulacion[indice][8]) ;                 // Precio en Potencia en P1 Simulado
                                 
          // ..................................................................                              POTENCIA A FACTURAR
         
         P1M = Double.parseDouble(jTextField77.getText());                                                 // Potencia de maximetro P1
         pPC1 = Double.parseDouble(jTextField19.getText());                                                // Potencia contratada actual P1
         psPC1= Double.parseDouble(jTextField26.getText());                                                // Potencia contratada actual P1
         pReactiva = Double.parseDouble(jTextField85.getText());                                           // Penalización reactiva 
         
         aEP1 = (eEP1 * (pEP1s-pEP1)) ;                                                 // Ahorro en el consumo de energía
         aPP1 = (dias * ((pPP1s*psPC1)-(pPP1*pPC1))) ;                                                 // Ahorro en potencia contratada
         
         ahorro = impuesto_electrico * (aEP1 + aPP1 ) ;                                  // Ahorro total Energia + Potencia
        
         ahorro_total = ahorro_total + ahorro ;                                         // Ahorro acumulado total
         
         coste_actual   =  ((eEP1 * pEP1) + (dias * pPP1 * pPC1 ) + pReactiva) ;       // Coste con tarifa actual
         
         coste_simulado =  ((eEP1 * pEP1s) + (dias * pPP1s *psPC1 ) + pReactiva);     // Coste con tarifa simulada
         
         coste_actual_DI    = impuesto_iva * coste_actual ;                             // Coste total de la factura después de impuestos.
         
         porcentaje       = 1 - ( coste_actual / coste_simulado ) ;                     // Porcentaje de ahorro
         
        
         
         // ...................................................................         // CONTROL DE RESULTADO FINAL DE LA FACTURA
         pBIC    = impuesto_electrico * (coste_actual) + pAlquiler ;                                         // Precio base de factura calculado
         
         spBIC   = formatoImporte.format(pBIC);
         pBIC    =Math.rint(pBIC*100)/100 ;
         if ( pBIC == pBIF) { 
              jTextField82.setText(spBIC);
              jTextField82.setBackground(Color.green);
              jTextField80.setBackground(new Color(0xCCFFCC)); 
              jTextField81.setBackground(new Color(0xCCFFCC)); 
             
         } else {                                                                       // Error de cálculo. No coinciden
              jTextField82.setText(spBIC);
              jTextField82.setBackground(Color.red);     
              jTextField80.setBackground(Color.orange); 
              jTextField81.setBackground(Color.orange); 
         }
         // ...................................................................
         sAhorro         = formatoImporte.format(ahorro);
         sCoste_Actual   = formatoImporte.format(coste_actual);
         sCoste_Simulado = formatoImporte.format(coste_simulado);
         sAhorro_Total   = formatoImporte.format(ahorro_total);
         sPorcentaje      = formatoPorcentaje.format(porcentaje);
         
         diasOptimizado  = diasOptimizado + dias ;
         jTextField40.setText(String.valueOf(diasOptimizado));     
         jTextField30.setText(sAhorro);
         jTextField15.setText(sCoste_Actual);
         jTextField27.setText(sCoste_Simulado);
         jTextField5.setText(sAhorro_Total);         
         jTextField9.setText(String.valueOf(dias));
         jTextField47.setText(sPorcentaje);
         
         
         jTextField41.setText(String.valueOf(coste_actual));           // guardamos en campo oculto coste_actual_AI
         jTextField42.setText(String.valueOf(coste_actual_DI));        // guardamos en campo oculto coste_actual_DI
         jTextField43.setText(String.valueOf(ahorro));                 // guardamos en campo oculto ahorro
         jTextField44.setText(String.valueOf(ahorro_total));           // guardamos en campo oculto ahorro total
         jTextField45.setText(String.valueOf(coste_simulado));         // guardamos en campo oculto coste_simulado_AI
         jTextField46.setText(String.valueOf(porcentaje));              // guardamos en campo oculto porcentaje
         
         this.sMensajes = FramePrincipal.sMensajes + "............................... DATOS DE PARTIDA................................."+"\n" ;
         this.sMensajes = this.sMensajes + "Potencia contratada actual (pPC1)= "+formatoNumero.format(pPC1)+" kW" +"\n" ;
         this.sMensajes = this.sMensajes + "Potencia contratada simulada (psPC1)= "+formatoNumero.format(psPC1)+" kW" +"\n" ;
         this.sMensajes = this.sMensajes + "Energía consumida en P1 (eEP1) = "+formatoNumero.format(eEP1)+" kWh" +"\n" ;
         this.sMensajes = this.sMensajes + "Precio en Energía en P1 con contrato actual (pEP1)= "+pEP1+" €/kWh" +"\n" ;
         this.sMensajes = this.sMensajes + "Precio en Energía en P1 Simulado (contrato anterior) (pEP1s) = "+pEP1s+" €/kWh" +"\n \n" ;        
         this.sMensajes = this.sMensajes + "Impuesto eléctrico = "+impuesto_electrico+"\n \n" ;   
         this.sMensajes = this.sMensajes + "Precio en Potencia en P1 Actual (pPP1)= "+pPP1+" €/kWh" +"\n" ;
         this.sMensajes = this.sMensajes + "Precio en Potencia en P1 Simulado (pPP1s)= "+pPP1s+" €/kWh" +"\n \n" ;
         this.sMensajes = this.sMensajes + "Penalizaciones (pReactiva)= "+pReactiva+" €" +"\n \n" ;
         this.sMensajes = this.sMensajes + "Ahorro acumulado  = "+formatoImporte.format(ahorro_acumulado)+"\n \n" ;
         this.sMensajes = this.sMensajes + "............................... CÁLCULOS ................................."+"\n" ;
         
         this.sMensajes = this.sMensajes + "Coste potencia  ->((dias * pPP1 * pPC1)))= \n"+formatoImporte.format((dias * pPP1 * pPC1 )) +"\n" ;
         this.sMensajes = this.sMensajes + "Coste energia   ->((eEP1 * pEP1) )= \n"+formatoImporte.format((eEP1 * pEP1 )) +"\n" ;
         
         this.sMensajes = this.sMensajes + "Coste con tarifa actual  ->(impuesto_electrico * ((eEP1 * pEP1) + (dias * pPP1 * pPC1 )) + pReactiva)= \n"+formatoImporte.format(coste_actual) +"\n" ;
         this.sMensajes = this.sMensajes + "Coste con tarifa simulada -> (impuesto_electrico * ((eEP1 * pEP1) + (dias * pPP1s * psPC1)) + pReactiva)= \n"+formatoImporte.format(coste_simulado) +"\n" ;
         this.sMensajes = this.sMensajes + "Coste total de la factura después de impuestos. -> (coste_actual_DI    = impuesto_iva * coste_actual)= \n"+formatoImporte.format(coste_actual_DI) +"\n \n" ;
         this.sMensajes = this.sMensajes + "Ahorro en el consumo de energía = \n"+formatoImporte.format(aEP1) +"\n" ;
         this.sMensajes = this.sMensajes + "Ahorro en potencia contratada = \n"+formatoImporte.format(aPP1) +"\n" ;
         this.sMensajes = this.sMensajes + "Ahorro total Energia + Potencia (con impuesto eléctrico)= \n"+formatoImporte.format(ahorro) +"\n" ;
         this.sMensajes = this.sMensajes + "Ahorro acumulado total = \n"+formatoImporte.format(ahorro_total) +"\n" ;
         this.sMensajes = this.sMensajes + "Porcentaje de ahorro = \n"+formatoPorcentaje.format(porcentaje) +"\n" ;
     }
     
     // .......................................................................................................................................  
     // .....................................           CALCULO DE AHORRO     DE TARIFA 2.1A a TARIFA 2.1A
            
     // .......................................................................
     if ( this.tipo_Act == 3 && this.tipo_Sim== 3) {
         
         
         eEP1 = Double.parseDouble(energiaP1.getText());                                 // Energía consumida en P1
         
         pEP1  = Double.parseDouble(lCondicionesActuales[indice][14]) ;                  // Precio en Energía en P1 con contrato actual
         pEP1s = Double.parseDouble(lCondicionesSimulacion[indice][14]) ;                // Precio en Energía en P1 Simulado (contrato anterior)
         
         pPP1  = Double.parseDouble(lCondicionesActuales[indice][8]) ;                   // Precio en Potencia en P1 Actual
         pPP1s = Double.parseDouble(lCondicionesSimulacion[indice][8]) ;                 // Precio en Potencia en P1 Simulado
         
         
          // ..................................................................                              POTENCIA A FACTURAR
         
         P1M = Double.parseDouble(jTextField77.getText());                                                 // Potencia de maximetro P1
         pPC1 = Double.parseDouble(jTextField19.getText());                                                // Potencia contratada actual P1
         psPC1= Double.parseDouble(jTextField26.getText());                                                // Potencia contratada actual P1
         pReactiva = Double.parseDouble(jTextField85.getText());                                           // Penalización reactiva 
        
         
         aEP1 = (eEP1 * (pEP1s-pEP1)) ;                                                 // Ahorro en el consumo de energía
         aPP1 = (dias * ((pPP1s*psPC1)-(pPP1*pPC1)) ) ;                                                 // Ahorro en potencia contratada
         
         ahorro = impuesto_electrico * (aEP1 + aPP1) ;                                  // Ahorro total Energia + Potencia
         
         ahorro_total = ahorro_total + ahorro ;                                         // Ahorro acumulado total
         
         coste_actual   =  ((eEP1 * pEP1) + (dias * pPP1 * pPC1 ) + pReactiva) ;       // Coste con tarifa actual
         
         coste_simulado =  ((eEP1 * pEP1s) + (dias * pPP1s *psPC1 ) + pReactiva);     // Coste con tarifa simulada
         
         coste_actual_DI    = impuesto_iva * coste_actual ;                             // Coste total de la factura después de impuestos.
         
        porcentaje       = 1 - ( coste_actual / coste_simulado ) ;                     // Porcentaje de ahorro
         
         // ...................................................................         // CONTROL DE RESULTADO FINAL DE LA FACTURA
         pBIC    = impuesto_electrico * (coste_actual) + pAlquiler ;                    // Precio base de factura calculado
         spBIC   = formatoImporte.format(pBIC);
         pBIC    =Math.rint(pBIC*100)/100 ;
         if ( pBIC == pBIF) { 
              jTextField82.setText(spBIC);
              jTextField82.setBackground(Color.green);
              jTextField80.setBackground(new Color(0xCCFFCC)); 
              jTextField81.setBackground(new Color(0xCCFFCC)); 
             
         } else {                                                                       // Error de cálculo. No coinciden
              jTextField82.setText(spBIC);
              jTextField82.setBackground(Color.red);     
              jTextField80.setBackground(Color.orange); 
              jTextField81.setBackground(Color.orange); 
         }
         // ...................................................................      
         sAhorro         = formatoImporte.format(ahorro);
         sCoste_Actual   = formatoImporte.format(coste_actual);
         sCoste_Simulado = formatoImporte.format(coste_simulado);
         sAhorro_Total   = formatoImporte.format(ahorro_total);
         sPorcentaje      = formatoPorcentaje.format(porcentaje);
         
         diasOptimizado  = diasOptimizado + dias ;
         jTextField40.setText(String.valueOf(diasOptimizado));    
              
         jTextField30.setText(sAhorro);
         jTextField15.setText(sCoste_Actual);
         jTextField27.setText(sCoste_Simulado);
         jTextField5.setText(sAhorro_Total);         
         jTextField9.setText(String.valueOf(dias));
         jTextField47.setText(sPorcentaje);
         
         jTextField41.setText(String.valueOf(coste_actual));           // guardamos en campo oculto coste_actual_AI
         jTextField42.setText(String.valueOf(coste_actual_DI));        // guardamos en campo oculto coste_actual_DI
         jTextField43.setText(String.valueOf(ahorro));                 // guardamos en campo oculto ahorro
         jTextField44.setText(String.valueOf(ahorro_total));           // guardamos en campo oculto ahorro total
         jTextField45.setText(String.valueOf(coste_simulado));         // guardamos en campo oculto coste_simulado_AI
         jTextField46.setText(String.valueOf(porcentaje));              // guardamos en campo oculto porcentaje
         
         this.sMensajes = FramePrincipal.sMensajes + "............................... DATOS DE PARTIDA................................."+"\n" ;
         this.sMensajes = this.sMensajes + "Potencia contratada actual (pPC1)= "+formatoNumero.format(pPC1)+" kW" +"\n" ;
         this.sMensajes = this.sMensajes + "Potencia contratada simulada (psPC1)= "+formatoNumero.format(psPC1)+" kW" +"\n" ;
         this.sMensajes = this.sMensajes + "Energía consumida en P1 (eEP1) = "+formatoNumero.format(eEP1)+" kWh" +"\n" ;
         this.sMensajes = this.sMensajes + "Precio en Energía en P1 con contrato actual (pEP1)= "+pEP1+" €/kWh" +"\n" ;
         this.sMensajes = this.sMensajes + "Precio en Energía en P1 Simulado (contrato anterior) (pEP1s) = "+pEP1s+" €/kWh" +"\n \n" ;        
         this.sMensajes = this.sMensajes + "Impuesto eléctrico = "+impuesto_electrico+"\n \n" ;   
         this.sMensajes = this.sMensajes + "Precio en Potencia en P1 Actual (pPP1)= "+pPP1+" €/kWh" +"\n" ;
         this.sMensajes = this.sMensajes + "Precio en Potencia en P1 Simulado (pPP1s)= "+pPP1s+" €/kWh" +"\n \n" ;
         this.sMensajes = this.sMensajes + "Penalizaciones (pReactiva)= "+pReactiva+" €" +"\n \n" ;
         this.sMensajes = this.sMensajes + "Ahorro acumulado  = "+formatoImporte.format(ahorro_acumulado)+"\n \n" ;
         this.sMensajes = this.sMensajes + "............................... CÁLCULOS ................................."+"\n" ;
         
         this.sMensajes = this.sMensajes + "Coste potencia  ->((dias * pPP1 * pPC1)))= \n"+formatoImporte.format((dias * pPP1 * pPC1 )) +"\n" ;
         this.sMensajes = this.sMensajes + "Coste energia   ->((eEP1 * pEP1) )= \n"+formatoImporte.format((eEP1 * pEP1 )) +"\n" ;
         
         this.sMensajes = this.sMensajes + "Coste con tarifa actual  ->(impuesto_electrico * ((eEP1 * pEP1) + (dias * pPP1 * pPC1 )) + pReactiva)= \n"+formatoImporte.format(coste_actual) +"\n" ;
         this.sMensajes = this.sMensajes + "Coste con tarifa simulada -> (impuesto_electrico * ((eEP1 * pEP1) + (dias * pPP1s * psPC1)) + pReactiva)= \n"+formatoImporte.format(coste_simulado) +"\n" ;
         this.sMensajes = this.sMensajes + "Coste total de la factura después de impuestos. -> (coste_actual_DI    = impuesto_iva * coste_actual)= \n"+formatoImporte.format(coste_actual_DI) +"\n \n" ;
         this.sMensajes = this.sMensajes + "Ahorro en el consumo de energía = \n"+formatoImporte.format(aEP1) +"\n" ;
         this.sMensajes = this.sMensajes + "Ahorro en potencia contratada = \n"+formatoImporte.format(aPP1) +"\n" ;
         this.sMensajes = this.sMensajes + "Ahorro total Energia + Potencia (con impuesto eléctrico)= \n"+formatoImporte.format(ahorro) +"\n" ;
         this.sMensajes = this.sMensajes + "Ahorro acumulado total = \n"+formatoImporte.format(ahorro_total) +"\n" ;
         this.sMensajes = this.sMensajes + "Porcentaje de ahorro = \n"+formatoPorcentaje.format(porcentaje) +"\n" ;
     }
     // .......................................................................        
      // .......................................................................................................................................  
     // .....................................           CALCULO DE AHORRO     DE TARIFA 2.1ADH a TARIFA 2.1ADH
            
     // .......................................................................
     if ( this.tipo_Act == 4 && this.tipo_Sim== 4) {
         
         eEP1 = Double.parseDouble(energiaP1.getText());                                                    // Energía consumida en P1
         eEP2 = Double.parseDouble(energiaP2.getText());                                                    // Energía consumida en P2
         pPC1 = Double.parseDouble(jTextField19.getText());                                                 // Potencia contratada en P1
          
         pEP1  = Double.parseDouble(lCondicionesActuales[indice][14]) ;                                     // Precio en Energía en P1 con contrato actual
         pEP1s = Double.parseDouble(lCondicionesSimulacion[indice][14]) ;                                   // Precio en Energía en P1 Simulado (contrato anterior)
         pEP2  = Double.parseDouble(lCondicionesActuales[indice][15]) ;                                     // Precio en Energía en P2 con contrato actual
         pEP2s = Double.parseDouble(lCondicionesSimulacion[indice][15]) ;                                   // Precio en Energía en P2 Simulado (contrato anterior)
         
         pPP1  = Double.parseDouble(lCondicionesActuales[indice][8]) ;                                      // Precio en Potencia en P1 Actual
         pPP1s = Double.parseDouble(lCondicionesSimulacion[indice][8]) ;                                    // Precio en Potencia en P1 Simulado
                                            
          // ..................................................................                              POTENCIA A FACTURAR
         
         P1M = Double.parseDouble(jTextField77.getText());                                                 // Potencia de maximetro P1
         P2M = Double.parseDouble(jTextField78.getText());                                                 // Potencia de maximetro P2
        
         
         
         aEP1 = (eEP1 * (pEP1s-pEP1)) + ( eEP2 * (pEP2s-pEP2)) ;                                            // Ahorro en el consumo de energía
         aPP1 = (dias * (pPP1s-pPP1)) ;                                                                     // Ahorro en potencia contratada
         
         ahorro = impuesto_electrico * (aEP1 + aPP1) ;                                                      // Ahorro total Energia + Potencia
         
         ahorro_total = ahorro_total + ahorro ;                                                             // Ahorro acumulado total
         
         coste_actual   = impuesto_electrico * ((eEP1 * pEP1) + (dias * pPP1 ) + (eEP2 * pEP2)  ) ;         // Coste con tarifa actual
         
         coste_simulado = impuesto_electrico * ((eEP1 * pEP1s) + (dias * pPP1s ) + (eEP2 * pEP2s)) ;       // Coste con tarifa simulada
         
         coste_actual_DI    = impuesto_iva * coste_actual ;                                                 // Coste total de la factura después de impuestos.
         
         porcentaje       = 1 - ( coste_actual / coste_simulado ) ;                     // Porcentaje de ahorro
         // ...................................................................         // CONTROL DE RESULTADO FINAL DE LA FACTURA
         pBIC    = impuesto_electrico * (coste_actual) + pAlquiler ;                                        // Precio base de factura calculado
         spBIC   = formatoImporte.format(pBIC);
         pBIC    =Math.rint(pBIC*100)/100 ;
         if ( pBIC == pBIF) { 
              jTextField82.setText(spBIC);
              jTextField82.setBackground(Color.green);
              jTextField80.setBackground(new Color(0xCCFFCC)); 
              jTextField81.setBackground(new Color(0xCCFFCC)); 
             
         } else {                                                                       // Error de cálculo. No coinciden
              jTextField82.setText(spBIC);
              jTextField82.setBackground(Color.red);     
              jTextField80.setBackground(Color.orange); 
              jTextField81.setBackground(Color.orange); 
         }
         // ...................................................................
         sAhorro         = formatoImporte.format(ahorro);
         sCoste_Actual   = formatoImporte.format(coste_actual);
         sCoste_Simulado = formatoImporte.format(coste_simulado);
         sAhorro_Total   = formatoImporte.format(ahorro_total);
         sPorcentaje      = formatoPorcentaje.format(porcentaje);
              
         diasOptimizado  = diasOptimizado + dias ;
         jTextField40.setText(String.valueOf(diasOptimizado));    
         
         jTextField30.setText(sAhorro);
         jTextField15.setText(sCoste_Actual);
         jTextField27.setText(sCoste_Simulado);
         jTextField5.setText(sAhorro_Total);         
         jTextField9.setText(String.valueOf(dias));
         jTextField47.setText(sPorcentaje);
         
         jTextField41.setText(String.valueOf(coste_actual));           // guardamos en campo oculto coste_actual_AI
         jTextField42.setText(String.valueOf(coste_actual_DI));        // guardamos en campo oculto coste_actual_DI
         jTextField43.setText(String.valueOf(ahorro));                 // guardamos en campo oculto ahorro
         jTextField44.setText(String.valueOf(ahorro_total));           // guardamos en campo oculto ahorro total
         jTextField45.setText(String.valueOf(coste_simulado));         // guardamos en campo oculto coste_simulado_AI
         jTextField46.setText(String.valueOf(porcentaje));              // guardamos en campo oculto porcentaje
         
         this.sMensajes = FramePrincipal.sMensajes + "............................... DATOS DE PARTIDA................................."+"\n" ;
         this.sMensajes = this.sMensajes + "Energía consumida en P1 = "+formatoNumero.format(eEP1)+" kWh" +"\n" ;
         this.sMensajes = this.sMensajes + "Energía consumida en P2 = "+formatoNumero.format(eEP2)+" kWh" +"\n" ;
         this.sMensajes = this.sMensajes + "Precio en Energía en P1 con contrato actual = "+pEP1+" €/kWh" +"\n" ;
         this.sMensajes = this.sMensajes + "Precio en Energía en P1 Simulado (contrato anterior) = "+pEP1s+" €/kWh" +"\n \n" ; 
         this.sMensajes = this.sMensajes + "Precio en Energía en P2 con contrato actual = "+pEP2+" €/kWh" +"\n" ;
         this.sMensajes = this.sMensajes + "Precio en Energía en P2 Simulado (contrato anterior) = "+pEP2s+" €/kWh" +"\n \n" ; 
         this.sMensajes = this.sMensajes + "Impuesto eléctrico = "+impuesto_electrico+"\n \n" ;  
         this.sMensajes = this.sMensajes + "Precio en Potencia en P1 Actual = "+pPP1+" €/kWh" +"\n" ;
         this.sMensajes = this.sMensajes + "Precio en Potencia en P1 Simulado = "+pPP1s+" €/kWh" +"\n \n" ;         
         this.sMensajes = this.sMensajes + "Ahorro acumulado  = "+formatoImporte.format(ahorro_acumulado)+"\n \n" ; 
         this.sMensajes = this.sMensajes + "............................... CÁLCULOS ................................."+"\n" ;
         this.sMensajes = this.sMensajes + "Coste con tarifa actual  ->(impuesto_electrico * ((eEP1 * pEP1) + (dias * pPP1 ) + (eEP2 * pEP2)))= \n"+formatoImporte.format(coste_actual) +"\n" ;
         this.sMensajes = this.sMensajes + "Coste con tarifa simulada -> (impuesto_electrico * ((eEP1 * pEP1s) + (dias * pPP1s ) + (eEP2 * pEP2s)))= \n"+formatoImporte.format(coste_simulado) +"\n" ;
         this.sMensajes = this.sMensajes + "Coste total de la factura después de impuestos. -> (coste_actual_DI    = impuesto_iva * coste_actual)= \n"+formatoImporte.format(coste_actual_DI) +"\n \n" ;
         this.sMensajes = this.sMensajes + "Ahorro en el consumo de energía = \n"+formatoImporte.format(aEP1) +"\n" ;
         this.sMensajes = this.sMensajes + "Ahorro en potencia contratada = \n"+formatoImporte.format(aPP1) +"\n" ;
         this.sMensajes = this.sMensajes + "Ahorro total Energia + Potencia (con impuesto eléctrico)= \n"+formatoImporte.format(ahorro) +"\n" ;
         this.sMensajes = this.sMensajes + "Ahorro acumulado total = \n"+formatoImporte.format(ahorro_total) +"\n" ;
         this.sMensajes = this.sMensajes + "Porcentaje de ahorro = \n"+formatoPorcentaje.format(porcentaje) +"\n" ;
     }
       // .......................................................................        
      // .......................................................................................................................................  
     // .....................................           CALCULO DE AHORRO     DE TARIFA 2.1A  a TARIFA 2.1ADH
            
     // .......................................................................
     if ( this.tipo_Act == 4 && this.tipo_Sim== 3) {
         
         eEP1 = Double.parseDouble(energiaP1.getText());                                                    // Energía consumida en P1
         eEP2 = Double.parseDouble(energiaP2.getText());                                                    // Energía consumida en P2
         pPC1 = Double.parseDouble(jTextField19.getText());                                                 // Potencia contratada en P1
          
         pEP1  = Double.parseDouble(lCondicionesActuales[indice][14]) ;                                     // Precio en Energía en P1 con contrato actual
         pEP1s = Double.parseDouble(lCondicionesSimulacion[indice][14]) ;                                   // Precio en Energía en P1 Simulado (contrato anterior)
         pEP2  = Double.parseDouble(lCondicionesActuales[indice][15]) ;                                     // Precio en Energía en P2 con contrato actual
      
         
         pPP1  = Double.parseDouble(lCondicionesActuales[indice][8]) ;                                      // Precio en Potencia en P1 Actual
         pPP1s = Double.parseDouble(lCondicionesSimulacion[indice][8]) ;                                    // Precio en Potencia en P1 Simulado
                                            
          // ..................................................................                              POTENCIA A FACTURAR
         
         P1M = Double.parseDouble(jTextField77.getText());                                                 // Potencia de maximetro P1
         P2M = Double.parseDouble(jTextField78.getText());                                                 // Potencia de maximetro P2
        
         
         
         aEP1 = (eEP1 * (pEP1s-pEP1)) + ( (pEP1s-eEP2) * (pEP2)) ;                                            // Ahorro en el consumo de energía
         aPP1 = (dias * (pPP1s-pPP1)) ;                                                                                                // Ahorro en potencia contratada
         
         ahorro = impuesto_electrico * (aEP1 + aPP1) ;                                                      // Ahorro total Energia + Potencia
         
         ahorro_total = ahorro_total + ahorro ;                                                             // Ahorro acumulado total
         
         coste_actual   = impuesto_electrico * ((eEP1 * pEP1) + (dias * pPP1 ) + (eEP2 * pEP2)  ) ;         // Coste con tarifa actual
         
         coste_simulado = impuesto_electrico * ((eEP1 * pEP1s) + (dias * pPP1s ) + (eEP2 * pEP1s)) ;       // Coste con tarifa simulada
         
         coste_actual_DI    = impuesto_iva * coste_actual ;                                                 // Coste total de la factura después de impuestos.
         
         porcentaje       = 1 - ( coste_actual / coste_simulado ) ;                     // Porcentaje de ahorro
         // ...................................................................         // CONTROL DE RESULTADO FINAL DE LA FACTURA
         pBIC    = impuesto_electrico * (coste_actual) + pAlquiler ;                                        // Precio base de factura calculado
         spBIC   = formatoImporte.format(pBIC);
         pBIC    =Math.rint(pBIC*100)/100 ;
         if ( pBIC == pBIF) { 
              jTextField82.setText(spBIC);
              jTextField82.setBackground(Color.green);
              jTextField80.setBackground(new Color(0xCCFFCC)); 
              jTextField81.setBackground(new Color(0xCCFFCC)); 
             
         } else {                                                                       // Error de cálculo. No coinciden
              jTextField82.setText(spBIC);
              jTextField82.setBackground(Color.red);     
              jTextField80.setBackground(Color.orange); 
              jTextField81.setBackground(Color.orange); 
         }
         // ...................................................................
         sAhorro         = formatoImporte.format(ahorro);
         sCoste_Actual   = formatoImporte.format(coste_actual);
         sCoste_Simulado = formatoImporte.format(coste_simulado);
         sAhorro_Total   = formatoImporte.format(ahorro_total);
         sPorcentaje      = formatoPorcentaje.format(porcentaje);
              
         diasOptimizado  = diasOptimizado + dias ;
         jTextField40.setText(String.valueOf(diasOptimizado));    
         
         jTextField30.setText(sAhorro);
         jTextField15.setText(sCoste_Actual);
         jTextField27.setText(sCoste_Simulado);
         jTextField5.setText(sAhorro_Total);         
         jTextField9.setText(String.valueOf(dias));
         jTextField47.setText(sPorcentaje);
         
         jTextField41.setText(String.valueOf(coste_actual));           // guardamos en campo oculto coste_actual_AI
         jTextField42.setText(String.valueOf(coste_actual_DI));        // guardamos en campo oculto coste_actual_DI
         jTextField43.setText(String.valueOf(ahorro));                 // guardamos en campo oculto ahorro
         jTextField44.setText(String.valueOf(ahorro_total));           // guardamos en campo oculto ahorro total
         jTextField45.setText(String.valueOf(coste_simulado));         // guardamos en campo oculto coste_simulado_AI
         jTextField46.setText(String.valueOf(porcentaje));              // guardamos en campo oculto porcentaje
         
         this.sMensajes = FramePrincipal.sMensajes + "............................... DATOS DE PARTIDA................................."+"\n" ;
         this.sMensajes = this.sMensajes + "Energía consumida en P1 = "+formatoNumero.format(eEP1)+" kWh" +"\n" ;
         this.sMensajes = this.sMensajes + "Energía consumida en P2 = "+formatoNumero.format(eEP2)+" kWh" +"\n" ;
         this.sMensajes = this.sMensajes + "Precio en Energía en P1 con contrato actual = "+pEP1+" €/kWh" +"\n" ;
         this.sMensajes = this.sMensajes + "Precio en Energía en P1 Simulado (contrato anterior) = "+pEP1s+" €/kWh" +"\n \n" ; 
         this.sMensajes = this.sMensajes + "Precio en Energía en P2 con contrato actual = "+pEP2+" €/kWh" +"\n" ;         
         this.sMensajes = this.sMensajes + "Impuesto eléctrico = "+impuesto_electrico+"\n \n" ;  
         this.sMensajes = this.sMensajes + "Precio en Potencia en P1 Actual = "+pPP1+" €/kWh" +"\n" ;
         this.sMensajes = this.sMensajes + "Precio en Potencia en P1 Simulado = "+pPP1s+" €/kWh" +"\n \n" ;         
         this.sMensajes = this.sMensajes + "Ahorro acumulado  = "+formatoImporte.format(ahorro_acumulado)+"\n \n" ; 
         this.sMensajes = this.sMensajes + "............................... CÁLCULOS ................................."+"\n" ;
         this.sMensajes = this.sMensajes + "Coste con tarifa actual  ->(impuesto_electrico * ((eEP1 * pEP1) + (dias * pPP1 ) + (eEP2 * pEP2)))= \n"+formatoImporte.format(coste_actual) +"\n" ;
         this.sMensajes = this.sMensajes + "Coste con tarifa simulada -> (impuesto_electrico * ((eEP1 * pEP1s) + (dias * pPP1s ) + (eEP2 * pEP1s)))= \n"+formatoImporte.format(coste_simulado) +"\n" ;
         this.sMensajes = this.sMensajes + "Coste total de la factura después de impuestos. -> (coste_actual_DI    = impuesto_iva * coste_actual)= \n"+formatoImporte.format(coste_actual_DI) +"\n \n" ;
         this.sMensajes = this.sMensajes + "Ahorro en el consumo de energía = \n"+formatoImporte.format(aEP1) +"\n" ;
         this.sMensajes = this.sMensajes + "Ahorro en potencia contratada = \n"+formatoImporte.format(aPP1) +"\n" ;
         this.sMensajes = this.sMensajes + "Ahorro total Energia + Potencia (con impuesto eléctrico)= \n"+formatoImporte.format(ahorro) +"\n" ;
         this.sMensajes = this.sMensajes + "Ahorro acumulado total = \n"+formatoImporte.format(ahorro_total) +"\n" ;
         this.sMensajes = this.sMensajes + "Porcentaje de ahorro = \n"+formatoPorcentaje.format(porcentaje) +"\n" ;
     }
     // .......................................................................    
     // .......................................................................................................................................  
     // .....................................           CALCULO DE AHORRO     DE TARIFA 2.0A a TARIFA 2.0DHA
            
     // .......................................................................
     if ( this.tipo_Act == 2 && this.tipo_Sim== 1) {
         System.out.println("ESTAMOS EN  CALCULO DE AHORRO     DE TARIFA 2.0A a TARIFA 2.0DHA") ;
         eEP1 = Double.parseDouble(energiaP1.getText());                                                    // Energía consumida en P1
         eEP2 = Double.parseDouble(energiaP2.getText());                                                    // Energía consumida en P2
         pPC1 = Double.parseDouble(jTextField19.getText());                                                 // Potencia contratada en P1 Actual
         psPC1 = Double.parseDouble(jTextField26.getText());                                                 // Potencia contratada en P1 Simulada
       
         
         pEP1  = Double.parseDouble(lCondicionesActuales[indice][14]) ;                                     // Precio en Energía en P1 con contrato actual
         pEP1s = Double.parseDouble(lCondicionesSimulacion[indice][14]) ;                                   // Precio en Energía en P1 Simulado (contrato anterior)
         pEP2  = Double.parseDouble(lCondicionesActuales[indice][15]) ;                                     // Precio en Energía en P2 con contrato actual
         
         pPP1  = Double.parseDouble(lCondicionesActuales[indice][8]) ;                                      // Precio en Potencia en P1 Actual
         pPP1s = Double.parseDouble(lCondicionesSimulacion[indice][8]) ;                                    // Precio en Potencia en P1 Simulado
                                            
          // ..................................................................                              POTENCIA A FACTURAR
         
         P1M = Double.parseDouble(jTextField77.getText());                                                 // Potencia de maximetro P1
         P2M = Double.parseDouble(jTextField78.getText());                                                 // Potencia de maximetro P2
        
         
         
         
         aEP1 = (eEP1 * (pEP1s-pEP1)) + ( eEP2 * (pEP1s-pEP2))  ;                                           // Ahorro en el consumo de energía
         aPP1 = (psPC1 * dias * pPP1s) - (pPC1 * dias * pPP1) ;                                             // Ahorro en potencia contratada
         
         ahorro = impuesto_electrico * (aEP1 + aPP1) ;                                                      // Ahorro total Energia + Potencia
         
         ahorro_total = ahorro_total + ahorro ;                                                             // Ahorro acumulado total
         
         coste_actual   = ((eEP1 * pEP1) + (pPC1 * dias * pPP1 ) + (eEP2 * pEP2)  ) ;                       // Coste con tarifa actual
         
         coste_simulado = ((eEP1 * pEP1s) + (psPC1 * dias * pPP1s ) + (eEP2 * pEP1s)) ;                             // Coste con tarifa simulada
         
         coste_actual_DI    = impuesto_electrico * impuesto_iva * coste_actual ;                                                 // Coste total de la factura después de impuestos.
         
         porcentaje       = 1 - ( coste_actual / coste_simulado ) ;                                         // Porcentaje de ahorro
         // ...................................................................         // CONTROL DE RESULTADO FINAL DE LA FACTURA
         pBIC    = impuesto_electrico * (coste_actual) + pAlquiler ;                                         // Precio base de factura calculado
         spBIC   = formatoImporte.format(pBIC);
         pBIC    =Math.rint(pBIC*100)/100 ;
         if ( pBIC == pBIF) { 
              jTextField82.setText(spBIC);
              jTextField82.setBackground(Color.green);
              jTextField80.setBackground(new Color(0xCCFFCC)); 
              jTextField81.setBackground(new Color(0xCCFFCC)); 
             
         } else {                                                                       // Error de cálculo. No coinciden
              jTextField82.setText(spBIC);
              jTextField82.setBackground(Color.red);     
              jTextField80.setBackground(Color.orange); 
              jTextField81.setBackground(Color.orange); 
         }
         // ...................................................................
         sAhorro         = formatoImporte.format(ahorro);
         sCoste_Actual   = formatoImporte.format(coste_actual);
         sCoste_Simulado = formatoImporte.format(coste_simulado);
         sAhorro_Total   = formatoImporte.format(ahorro_total);
         sPorcentaje      = formatoPorcentaje.format(porcentaje);
         
         diasOptimizado  = diasOptimizado + dias ;
         jTextField40.setText(String.valueOf(diasOptimizado));    
              
         jTextField30.setText(sAhorro);
         jTextField15.setText(sCoste_Actual);
         jTextField27.setText(sCoste_Simulado);
         jTextField5.setText(sAhorro_Total);         
         jTextField9.setText(String.valueOf(dias));
         jTextField47.setText(sPorcentaje);
         
         jTextField41.setText(String.valueOf(coste_actual));           // guardamos en campo oculto coste_actual_AI
         jTextField42.setText(String.valueOf(coste_actual_DI));        // guardamos en campo oculto coste_actual_DI
         jTextField43.setText(String.valueOf(ahorro));                 // guardamos en campo oculto ahorro
         jTextField44.setText(String.valueOf(ahorro_total));           // guardamos en campo oculto ahorro total
         jTextField45.setText(String.valueOf(coste_simulado));         // guardamos en campo oculto coste_simulado_AI
         jTextField46.setText(String.valueOf(porcentaje));              // guardamos en campo oculto porcentaje
         
         this.sMensajes = FramePrincipal.sMensajes + "............................... DATOS DE PARTIDA................................."+"\n" ;
         this.sMensajes = this.sMensajes + "Energía consumida en P1 = "+formatoNumero.format(eEP1)+" kWh" +"\n" ;
         this.sMensajes = this.sMensajes + "Energía consumida en P2 = "+formatoNumero.format(eEP2)+" kWh" +"\n" ;
         this.sMensajes = this.sMensajes + "Potencia contratada actual = "+formatoNumero.format(pPC1)+" kW" +"\n" ;
         this.sMensajes = this.sMensajes + "Potencia contratada simulada = "+formatoNumero.format(psPC1)+" kW" +"\n" ;
         this.sMensajes = this.sMensajes + "Precio en Energía en P1 con contrato actual = "+pEP1+" €/kWh" +"\n" ;
         this.sMensajes = this.sMensajes + "Precio en Energía en P1 Simulado (contrato anterior) = "+pEP1s+" €/kWh" +"\n \n" ; 
         this.sMensajes = this.sMensajes + "Precio en Energía en P2 con contrato actual = "+pEP2+" €/kWh" +"\n" ;
         this.sMensajes = this.sMensajes + "Precio en Energía en P2 Simulado (contrato anterior) = "+pEP1s+" €/kWh" +"\n \n" ; 
         this.sMensajes = this.sMensajes + "Impuesto eléctrico = "+impuesto_electrico+"\n \n" ;  
         this.sMensajes = this.sMensajes + "Precio en Potencia en P1 Actual = "+pPP1+" €/kWh" +"\n" ;
         this.sMensajes = this.sMensajes + "Precio en Potencia en P1 Simulado = "+pPP1s+" €/kWh" +"\n \n" ;         
         this.sMensajes = this.sMensajes + "Ahorro acumulado  = "+formatoImporte.format(ahorro_acumulado)+"\n \n" ; 
         this.sMensajes = this.sMensajes + "............................... CÁLCULOS ................................."+"\n" ;
         this.sMensajes = this.sMensajes + "Coste con tarifa actual  ->(impuesto_electrico * ((eEP1 * pEP1) + (dias * pPP1 ) + (eEP2 * pEP2)))= \n"+formatoImporte.format(coste_actual) +"\n" ;
         this.sMensajes = this.sMensajes + "Coste con tarifa simulada -> (impuesto_electrico * ((eEP1 * pEP1s) + (dias * pPP1s ) + (eEP2 * pEP1s)))= \n"+formatoImporte.format(coste_simulado) +"\n" ;
         this.sMensajes = this.sMensajes + "Coste total de la factura después de impuestos. -> (coste_actual_DI    = impuesto_iva * coste_actual)= \n"+formatoImporte.format(coste_actual_DI) +"\n \n" ;
         this.sMensajes = this.sMensajes + "Ahorro en el consumo de energía = \n"+formatoImporte.format(aEP1) +"\n" ;
         this.sMensajes = this.sMensajes + "Ahorro en potencia contratada = \n"+formatoImporte.format(aPP1) +"\n" ;
         this.sMensajes = this.sMensajes + "Ahorro total Energia + Potencia (con impuesto eléctrico)= \n"+formatoImporte.format(ahorro) +"\n" ;
         this.sMensajes = this.sMensajes + "Ahorro acumulado total = \n"+formatoImporte.format(ahorro_total) +"\n" ;
         this.sMensajes = this.sMensajes + "Porcentaje de ahorro = \n"+formatoPorcentaje.format(porcentaje) +"\n" ;
     }
     // .......................................................................    
     // .......................................................................................................................................  
     // .....................................           CALCULO DE AHORRO     DE TARIFA 2.0A a TARIFA 2.0DHA INDEXADO
            
     // .......................................................................
      if ( this.tipo_Act == 8 && this.tipo_Sim== 1) {
         System.out.println("ESTAMOS EN  CALCULO DE AHORRO     DE TARIFA 2.0DHA Indexado a TARIFA 2.0A") ;
         eEP1 = Double.parseDouble(energiaP1.getText());                                                    // Energía consumida en P1
         eEP2 = Double.parseDouble(energiaP2.getText());                                                    // Energía consumida en P2
        
         eEP = eEP1 + eEP2 ;   jTextField75.setText(String.valueOf(eEP));             // Energía de peaje                                                               // Energía de peaje
         
         pPC1 = Double.parseDouble(jTextField19.getText());                                                 // Potencia contratada en P1 Actual
         psPC1 = Double.parseDouble(jTextField26.getText());                                                // Potencia contratada en P1 Simulada
         
         pEP1  = Double.parseDouble(lCondicionesActuales[indice][14]) ;                                     // Precio en Energía en P1 con contrato actual
         pEP1s = Double.parseDouble(lCondicionesSimulacion[indice][14]) ;                                   // Precio en Energía en P1 Simulado (contrato anterior)
         pEP2  = Double.parseDouble(lCondicionesActuales[indice][15]) ;                                     // Precio en Energía en P2 con contrato actual
         pEP   = Double.parseDouble(jTextField73.getText());                                                // Precio en Energía de Peaje
         
         pPP1  = Double.parseDouble(lCondicionesActuales[indice][8]) ;                                      // Precio en Potencia en P1 Actual
         pPP1s = Double.parseDouble(lCondicionesSimulacion[indice][8]) ;                                    // Precio en Potencia en P1 Simulado
         
          // ..................................................................                              POTENCIA A FACTURAR
         
         P1M = Double.parseDouble(jTextField77.getText());                                                 // Potencia de maximetro P1
         P2M = Double.parseDouble(jTextField78.getText());                                                 // Potencia de maximetro P2
      
                                            
         aEP1 = (eEP1 * (pEP1s-pEP1)) + ( eEP2 * (pEP1s-pEP2)) - (eEP * pEP) ;                              // Ahorro en el consumo de energía
         aPP1 = (psPC1 * dias * pPP1s) - (pPC1 * dias * pPP1) ;                                             // Ahorro en potencia contratada
         
         ahorro = impuesto_electrico * (aEP1 + aPP1) ;                                                      // Ahorro total Energia + Potencia
         
         ahorro_total = ahorro_total + ahorro ;                                                             // Ahorro acumulado total
         
         coste_actual   = ((eEP1 * pEP1) + (pPC1 * dias * pPP1 ) + (eEP2 * pEP2) + (eEP * pEP) ) ;          // Coste con tarifa actual
        
         coste_simulado = ((eEP1 * pEP1s) + (psPC1 * dias * pPP1s ) + (eEP2 * pEP1s)) ;                     // Coste con tarifa simulada
         
         coste_actual_DI    = impuesto_electrico * impuesto_iva * coste_actual ;                                                 // Coste total de la factura después de impuestos.
         
         porcentaje       = 1 - ( coste_actual / coste_simulado ) ;                                         // Porcentaje de ahorro
         // ...................................................................                             // CONTROL DE RESULTADO FINAL DE LA FACTURA
         pBIC    = impuesto_electrico * (coste_actual) + pAlquiler ;                                         // Precio base de factura calculado
         pBIC    =Math.rint(pBIC*100)/100 ;
         spBIC   = formatoImporte.format(pBIC);
         System.out.println("pBIC  == pBIF ("+pBIC+")=("+pBIF+")");
         if ( pBIC == pBIF) { 
              jTextField82.setText(spBIC);
              
              jTextField82.setBackground(Color.green);
              jTextField80.setBackground(new Color(0xCCFFCC)); 
              jTextField81.setBackground(new Color(0xCCFFCC)); 
             
         } else {                                                                       // Error de cálculo. No coinciden
              jTextField82.setText(spBIC);
              jTextField82.setBackground(Color.red);     
              jTextField80.setBackground(Color.orange); 
              jTextField81.setBackground(Color.orange); 
         }
         // ...................................................................
         sAhorro         = formatoImporte.format(ahorro);
         sCoste_Actual   = formatoImporte.format(coste_actual);
         sCoste_Simulado = formatoImporte.format(coste_simulado);
         sAhorro_Total   = formatoImporte.format(ahorro_total);
         sPorcentaje      = formatoPorcentaje.format(porcentaje);
         
         diasOptimizado  = diasOptimizado + dias ;
         jTextField40.setText(String.valueOf(diasOptimizado));    
              
         jTextField30.setText(sAhorro);
         jTextField15.setText(sCoste_Actual);
         jTextField27.setText(sCoste_Simulado);
         jTextField5.setText(sAhorro_Total);         
         jTextField9.setText(String.valueOf(dias));
         jTextField47.setText(sPorcentaje);
         
         jTextField41.setText(String.valueOf(coste_actual));           // guardamos en campo oculto coste_actual_AI
         jTextField42.setText(String.valueOf(coste_actual_DI));        // guardamos en campo oculto coste_actual_DI
         jTextField43.setText(String.valueOf(ahorro));                 // guardamos en campo oculto ahorro
         jTextField44.setText(String.valueOf(ahorro_total));           // guardamos en campo oculto ahorro total
         jTextField45.setText(String.valueOf(coste_simulado));         // guardamos en campo oculto coste_simulado_AI
         jTextField46.setText(String.valueOf(porcentaje));              // guardamos en campo oculto porcentaje
         
         this.sMensajes = FramePrincipal.sMensajes + "............................... DATOS DE PARTIDA................................."+"\n" ;
         this.sMensajes = this.sMensajes + "Energía consumida en P1 = "+formatoNumero.format(eEP1)+" kWh" +"\n" ;
         this.sMensajes = this.sMensajes + "Energía consumida en P2 = "+formatoNumero.format(eEP2)+" kWh" +"\n" ;
         this.sMensajes = this.sMensajes + "Energía de Peaje = "+formatoNumero.format(eEP)+" kWh" +"\n" ;
         this.sMensajes = this.sMensajes + "Potencia contratada actual P1-P2= "+formatoNumero.format(pPC1)+" kW" +"\n" ;       
         this.sMensajes = this.sMensajes + "Potencia contratada simulada P1 = "+formatoNumero.format(psPC1)+" kW" +"\n" ;
         this.sMensajes = this.sMensajes + "Precio en Energía en P1 con contrato actual = "+pEP1+" €/kWh" +"\n" ;
         this.sMensajes = this.sMensajes + "Precio en Energía en P1 Simulado (contrato anterior) = "+pEP1s+" €/kWh" +"\n \n" ; 
         this.sMensajes = this.sMensajes + "Precio en Energía en P2 con contrato actual = "+pEP2+" €/kWh" +"\n" ;
         this.sMensajes = this.sMensajes + "Precio en Energía en P2 Simulado (contrato anterior) = "+pEP1s+" €/kWh" +"\n \n" ; 
         this.sMensajes = this.sMensajes + "Precio en Energía en Energia de Peaje con contrato actual = "+pEP+" €/kWh" +"\n" ;
         this.sMensajes = this.sMensajes + "Impuesto eléctrico = "+impuesto_electrico+"\n \n" ;  
         this.sMensajes = this.sMensajes + "Precio en Potencia en P1-P2 Actual = "+pPP1+" €/kWh" +"\n" ;
         this.sMensajes = this.sMensajes + "Precio en Potencia en P1 Simulado = "+pPP1s+" €/kWh" +"\n \n" ;         
         this.sMensajes = this.sMensajes + "Ahorro acumulado  = "+formatoImporte.format(ahorro_acumulado)+"\n \n" ; 
         this.sMensajes = this.sMensajes + "............................... CÁLCULOS ................................."+"\n" ;
         
         this.sMensajes = this.sMensajes + "Coste Enegia de peaje ->(eEP * pEP)= \n"+formatoImporte.format(eEP * pEP) +"\n" ;
         
         this.sMensajes = this.sMensajes + "Coste con tarifa actual  ->(impuesto_electrico * ((eEP1 * pEP1) + (dias * pPP1 ) + (eEP2 * pEP2) +  (eEP * pEP)))= \n"+formatoImporte.format(coste_actual) +"\n" ;
         this.sMensajes = this.sMensajes + "Coste con tarifa simulada -> (impuesto_electrico * ((eEP1 * pEP1s) + (dias * pPP1s ) + (eEP2 * pEP1s)))= \n"+formatoImporte.format(coste_simulado) +"\n" ;
         this.sMensajes = this.sMensajes + "Coste total de la factura después de impuestos. -> (coste_actual_DI    = impuesto_iva * coste_actual)= \n"+formatoImporte.format(coste_actual_DI) +"\n \n" ;
         this.sMensajes = this.sMensajes + "Ahorro en el consumo de energía = \n"+formatoImporte.format(aEP1) +"\n" ;
         this.sMensajes = this.sMensajes + "Ahorro en potencia contratada = \n"+formatoImporte.format(aPP1) +"\n" ;
         this.sMensajes = this.sMensajes + "Ahorro total Energia + Potencia (con impuesto eléctrico)= \n"+formatoImporte.format(ahorro) +"\n" ;
         this.sMensajes = this.sMensajes + "Ahorro acumulado total = \n"+formatoImporte.format(ahorro_total) +"\n" ;
         this.sMensajes = this.sMensajes + "Porcentaje de ahorro = \n"+formatoPorcentaje.format(porcentaje) +"\n" ;
     }
     // .......................................................................    
     // .......................................................................................................................................  
     // .....................................           CALCULO DE AHORRO     DE TARIFA 2.1A a TARIFA 2.1DHA index
            
     // .......................................................................
      if ( this.tipo_Act == 9 && this.tipo_Sim== 3) {
         System.out.println("ESTAMOS EN  CALCULO DE AHORRO     DE TARIFA 2.1A TARIFA 2.1DHA INDX") ;
         eEP1 = Double.parseDouble(energiaP1.getText());                                                    // Energía consumida en P1
         eEP2 = Double.parseDouble(energiaP2.getText());                                                    // Energía consumida en P2
         
         eEP = eEP1 + eEP2 ;   jTextField75.setText(String.valueOf(eEP));             // Energía de peaje                                                                      // Energía de peaje
         
         pPC1 = Double.parseDouble(jTextField19.getText());                                                 // Potencia contratada en P1 Actual
         psPC1 = Double.parseDouble(jTextField26.getText());                                                // Potencia contratada en P1 Simulada
         
         pEP1  = Double.parseDouble(lCondicionesActuales[indice][14]) ;                                     // Precio en Energía en P1 con contrato actual
         pEP1s = Double.parseDouble(lCondicionesSimulacion[indice][14]) ;                                   // Precio en Energía en P1 Simulado (contrato anterior)
         pEP2  = Double.parseDouble(lCondicionesActuales[indice][15]) ;                                     // Precio en Energía en P2 con contrato actual
         pEP   = Double.parseDouble(jTextField73.getText());                                                // Precio en Energía de Peaje
         
          // ..................................................................                              POTENCIA A FACTURAR
         
         P1M = Double.parseDouble(jTextField77.getText());                                                 // Potencia de maximetro P1
         P2M = Double.parseDouble(jTextField78.getText());                                                 // Potencia de maximetro P2
   
         
         
         pPP1  = Double.parseDouble(lCondicionesActuales[indice][8]) ;                                      // Precio en Potencia en P1 Actual
         pPP1s = Double.parseDouble(lCondicionesSimulacion[indice][8]) ;                                    // Precio en Potencia en P1 Simulado
                                            
         aEP1 = (eEP1 * (pEP1s-pEP1)) + ( eEP2 * (pEP1s-pEP2)) - (eEP * pEP) ;                              // Ahorro en el consumo de energía
         aPP1 = (psPC1 * dias * pPP1s) - (pPC1 * dias * pPP1) ;                                             // Ahorro en potencia contratada
         
         
         
         ahorro = impuesto_electrico * (aEP1 + aPP1) ;                                                      // Ahorro total Energia + Potencia
         
         ahorro_total = ahorro_total + ahorro ;                                                             // Ahorro acumulado total
         
         coste_actual   = ((eEP1 * pEP1) + (pPC1 * dias * pPP1 ) + (eEP2 * pEP2) + (eEP * pEP) ) ;          // Coste con tarifa actual
         
         coste_simulado = ((eEP1 * pEP1s) + (psPC1 * dias * pPP1s ) + (eEP2 * pEP1s)) ;                     // Coste con tarifa simulada
         
         coste_actual_DI    = impuesto_electrico * impuesto_iva * coste_actual ;                            // Coste total de la factura después de impuestos.
         
         porcentaje       = 1 - ( coste_actual / coste_simulado ) ;                                         // Porcentaje de ahorro
         // ...................................................................         // CONTROL DE RESULTADO FINAL DE LA FACTURA
         pBIC    = impuesto_electrico * (coste_actual) + pAlquiler ;                                         // Precio base de factura calculado
         spBIC   = formatoImporte.format(pBIC);
         pBIC    =Math.rint(pBIC*100)/100 ;
         if ( pBIC == pBIF) { 
              jTextField82.setText(spBIC);
              jTextField82.setBackground(Color.green);
              jTextField80.setBackground(new Color(0xCCFFCC)); 
              jTextField81.setBackground(new Color(0xCCFFCC)); 
             
         } else {                                                                       // Error de cálculo. No coinciden
              jTextField82.setText(spBIC);
              jTextField82.setBackground(Color.red);     
              jTextField80.setBackground(Color.orange); 
              jTextField81.setBackground(Color.orange); 
         }
         // ...................................................................
         sAhorro         = formatoImporte.format(ahorro);
         sCoste_Actual   = formatoImporte.format(coste_actual);
         sCoste_Simulado = formatoImporte.format(coste_simulado);
         sAhorro_Total   = formatoImporte.format(ahorro_total);
         sPorcentaje     = formatoPorcentaje.format(porcentaje);
         
         diasOptimizado  = diasOptimizado + dias ;
         
         jTextField40.setText(String.valueOf(diasOptimizado));    
              
         jTextField30.setText(sAhorro);
         jTextField15.setText(sCoste_Actual);
         jTextField27.setText(sCoste_Simulado);
         jTextField5.setText(sAhorro_Total);         
         jTextField9.setText(String.valueOf(dias));
         jTextField47.setText(sPorcentaje);
         
         jTextField41.setText(String.valueOf(coste_actual));           // guardamos en campo oculto coste_actual_AI
         jTextField42.setText(String.valueOf(coste_actual_DI));        // guardamos en campo oculto coste_actual_DI
         jTextField43.setText(String.valueOf(ahorro));                 // guardamos en campo oculto ahorro
         jTextField44.setText(String.valueOf(ahorro_total));           // guardamos en campo oculto ahorro total
         jTextField45.setText(String.valueOf(coste_simulado));         // guardamos en campo oculto coste_simulado_AI
         jTextField46.setText(String.valueOf(porcentaje));             // guardamos en campo oculto porcentaje
         
         this.sMensajes = FramePrincipal.sMensajes + "............................... DATOS DE PARTIDA................................."+"\n" ;
         this.sMensajes = this.sMensajes + "Energía consumida en P1 = "+formatoNumero.format(eEP1)+" kWh" +"\n" ;
         this.sMensajes = this.sMensajes + "Energía consumida en P2 = "+formatoNumero.format(eEP2)+" kWh" +"\n" ;
         this.sMensajes = this.sMensajes + "Energía de Peaje = "+formatoNumero.format(eEP)+" kWh" +"\n" ;
         this.sMensajes = this.sMensajes + "Potencia contratada actual P1-P2= "+formatoNumero.format(pPC1)+" kW" +"\n" ;       
         this.sMensajes = this.sMensajes + "Potencia contratada simulada P1 = "+formatoNumero.format(psPC1)+" kW" +"\n" ;
         this.sMensajes = this.sMensajes + "Precio en Energía en P1 con contrato actual = "+pEP1+" €/kWh" +"\n" ;
         this.sMensajes = this.sMensajes + "Precio en Energía en P1 Simulado (contrato anterior) = "+pEP1s+" €/kWh" +"\n \n" ; 
         this.sMensajes = this.sMensajes + "Precio en Energía en P2 con contrato actual = "+pEP2+" €/kWh" +"\n" ;
         this.sMensajes = this.sMensajes + "Precio en Energía en P2 Simulado (contrato anterior) = "+pEP1s+" €/kWh" +"\n \n" ; 
         this.sMensajes = this.sMensajes + "Precio en Energía en Energia de Peaje con contrato actual = "+pEP+" €/kWh" +"\n" ;
         this.sMensajes = this.sMensajes + "Impuesto eléctrico = "+impuesto_electrico+"\n \n" ;  
         this.sMensajes = this.sMensajes + "Precio en Potencia en P1-P2 Actual = "+pPP1+" €/kWh" +"\n" ;
         this.sMensajes = this.sMensajes + "Precio en Potencia en P1 Simulado = "+pPP1s+" €/kWh" +"\n \n" ;         
         this.sMensajes = this.sMensajes + "Ahorro acumulado  = "+formatoImporte.format(ahorro_acumulado)+"\n \n" ; 
         this.sMensajes = this.sMensajes + "............................... CÁLCULOS ................................."+"\n" ;
         
         this.sMensajes = this.sMensajes + "Coste Enegia de peaje ->(eEP * pEP)= \n"+formatoImporte.format(eEP * pEP) +"\n" ;
         
         this.sMensajes = this.sMensajes + "Coste con tarifa actual  ->(impuesto_electrico * ((eEP1 * pEP1) + (dias * pPP1 ) + (eEP2 * pEP2) +  (eEP * pEP)))= \n"+formatoImporte.format(coste_actual) +"\n" ;
         this.sMensajes = this.sMensajes + "Coste con tarifa simulada -> (impuesto_electrico * ((eEP1 * pEP1s) + (dias * pPP1s ) + (eEP2 * pEP1s)))= \n"+formatoImporte.format(coste_simulado) +"\n" ;
         this.sMensajes = this.sMensajes + "Coste total de la factura después de impuestos. -> (coste_actual_DI    = impuesto_iva * coste_actual)= \n"+formatoImporte.format(coste_actual_DI) +"\n \n" ;
         this.sMensajes = this.sMensajes + "Ahorro en el consumo de energía = \n"+formatoImporte.format(aEP1) +"\n" ;
         this.sMensajes = this.sMensajes + "Ahorro en potencia contratada = \n"+formatoImporte.format(aPP1) +"\n" ;
         this.sMensajes = this.sMensajes + "Ahorro total Energia + Potencia (con impuesto eléctrico)= \n"+formatoImporte.format(ahorro) +"\n" ;
         this.sMensajes = this.sMensajes + "Ahorro acumulado total = \n"+formatoImporte.format(ahorro_total) +"\n" ;
         this.sMensajes = this.sMensajes + "Porcentaje de ahorro = \n"+formatoPorcentaje.format(porcentaje) +"\n" ;
     }
      // .......................................................................    
     // .......................................................................................................................................  
     // .....................................           CALCULO DE AHORRO     DE TARIFA 2.1A a TARIFA 2.0DHA index  o  DE TARIFA 2.0A a TARIFA 2.1DHA index
             
     // .......................................................................
      if ( (this.tipo_Act == 8 && this.tipo_Sim== 3) || (this.tipo_Act == 9 && this.tipo_Sim== 1)) {
         System.out.println("ESTAMOS EN  CALCULO DE AHORRO     DE TARIFA 2.1DHA Indexado a TARIFA 2.0A o DE TARIFA 2.0A a TARIFA 2.1DHA") ;
         eEP1 = Double.parseDouble(energiaP1.getText());                                                    // Energía consumida en P1
         eEP2 = Double.parseDouble(energiaP2.getText());                                                    // Energía consumida en P2
         
         eEP = eEP1 + eEP2 ;   jTextField75.setText(String.valueOf(eEP));             // Energía de peaje                                                                      // Energía de peaje
         
         pPC1 = Double.parseDouble(jTextField19.getText());                                                 // Potencia contratada en P1 Actual
         psPC1 = Double.parseDouble(jTextField26.getText());                                                // Potencia contratada en P1 Simulada
         
         pEP1  = Double.parseDouble(lCondicionesActuales[indice][14]) ;                                     // Precio en Energía en P1 con contrato actual
         pEP1s = Double.parseDouble(lCondicionesSimulacion[indice][14]) ;                                   // Precio en Energía en P1 Simulado (contrato anterior)
         pEP2  = Double.parseDouble(lCondicionesActuales[indice][15]) ;                                     // Precio en Energía en P2 con contrato actual
         pEP   = Double.parseDouble(jTextField73.getText());                                                // Precio en Energía de Peaje
         
         pPP1  = Double.parseDouble(lCondicionesActuales[indice][8]) ;                                      // Precio en Potencia en P1 Actual
         pPP1s = Double.parseDouble(lCondicionesSimulacion[indice][8]) ;                                    // Precio en Potencia en P1 Simulado
         
          // ..................................................................                              POTENCIA A FACTURAR
         
         P1M = Double.parseDouble(jTextField77.getText());                                                 // Potencia de maximetro P1
         P2M = Double.parseDouble(jTextField78.getText());                                                 // Potencia de maximetro P2
      
                                            
         aEP1 = (eEP1 * (pEP1s-pEP1)) + ( eEP2 * (pEP1s-pEP2)) - (eEP * pEP) ;                              // Ahorro en el consumo de energía
         aPP1 = (psPC1 * dias * pPP1s) - (pPC1 * dias * pPP1) ;                                             // Ahorro en potencia contratada
         
         
         
         ahorro = impuesto_electrico * (aEP1 + aPP1) ;                                                      // Ahorro total Energia + Potencia
         
         ahorro_total = ahorro_total + ahorro ;                                                             // Ahorro acumulado total
         
         coste_actual   = ((eEP1 * pEP1) + (pPC1 * dias * pPP1 ) + (eEP2 * pEP2) + (eEP * pEP) ) ;          // Coste con tarifa actual
         
         coste_simulado = ((eEP1 * pEP1s) + (psPC1 * dias * pPP1s ) + (eEP2 * pEP1s)) ;                     // Coste con tarifa simulada
         
         coste_actual_DI    = impuesto_electrico * impuesto_iva * coste_actual ;                            // Coste total de la factura después de impuestos.
         
         porcentaje       = 1 - ( coste_actual / coste_simulado ) ;                                         // Porcentaje de ahorro
         // ...................................................................         // CONTROL DE RESULTADO FINAL DE LA FACTURA
         pBIC    = impuesto_electrico * (coste_actual) + pAlquiler ;                                         // Precio base de factura calculado
         spBIC   = formatoImporte.format(pBIC);
         pBIC    =Math.rint(pBIC*100)/100 ;
         if ( pBIC == pBIF) { 
              jTextField82.setText(spBIC);
              jTextField82.setBackground(Color.green);
              jTextField80.setBackground(new Color(0xCCFFCC)); 
              jTextField81.setBackground(new Color(0xCCFFCC)); 
             
         } else {                                                                       // Error de cálculo. No coinciden
              jTextField82.setText(spBIC);
              jTextField82.setBackground(Color.red);     
              jTextField80.setBackground(Color.orange); 
              jTextField81.setBackground(Color.orange); 
         }
         // ...................................................................
         sAhorro         = formatoImporte.format(ahorro);
         sCoste_Actual   = formatoImporte.format(coste_actual);
         sCoste_Simulado = formatoImporte.format(coste_simulado);
         sAhorro_Total   = formatoImporte.format(ahorro_total);
         sPorcentaje     = formatoPorcentaje.format(porcentaje);
         
         diasOptimizado  = diasOptimizado + dias ;
         
         jTextField40.setText(String.valueOf(diasOptimizado));    
              
         jTextField30.setText(sAhorro);
         jTextField15.setText(sCoste_Actual);
         jTextField27.setText(sCoste_Simulado);
         jTextField5.setText(sAhorro_Total);         
         jTextField9.setText(String.valueOf(dias));
         jTextField47.setText(sPorcentaje);
         
         jTextField41.setText(String.valueOf(coste_actual));           // guardamos en campo oculto coste_actual_AI
         jTextField42.setText(String.valueOf(coste_actual_DI));        // guardamos en campo oculto coste_actual_DI
         jTextField43.setText(String.valueOf(ahorro));                 // guardamos en campo oculto ahorro
         jTextField44.setText(String.valueOf(ahorro_total));           // guardamos en campo oculto ahorro total
         jTextField45.setText(String.valueOf(coste_simulado));         // guardamos en campo oculto coste_simulado_AI
         jTextField46.setText(String.valueOf(porcentaje));             // guardamos en campo oculto porcentaje
         
         this.sMensajes = FramePrincipal.sMensajes + "............................... DATOS DE PARTIDA................................."+"\n" ;
         this.sMensajes = this.sMensajes + "Energía consumida en P1 = "+formatoNumero.format(eEP1)+" kWh" +"\n" ;
         this.sMensajes = this.sMensajes + "Energía consumida en P2 = "+formatoNumero.format(eEP2)+" kWh" +"\n" ;
         this.sMensajes = this.sMensajes + "Energía de Peaje = "+formatoNumero.format(eEP)+" kWh" +"\n" ;
         this.sMensajes = this.sMensajes + "Potencia contratada actual P1-P2= "+formatoNumero.format(pPC1)+" kW" +"\n" ;       
         this.sMensajes = this.sMensajes + "Potencia contratada simulada P1 = "+formatoNumero.format(psPC1)+" kW" +"\n" ;
         this.sMensajes = this.sMensajes + "Precio en Energía en P1 con contrato actual = "+pEP1+" €/kWh" +"\n" ;
         this.sMensajes = this.sMensajes + "Precio en Energía en P1 Simulado (contrato anterior) = "+pEP1s+" €/kWh" +"\n \n" ; 
         this.sMensajes = this.sMensajes + "Precio en Energía en P2 con contrato actual = "+pEP2+" €/kWh" +"\n" ;
         this.sMensajes = this.sMensajes + "Precio en Energía en P2 Simulado (contrato anterior) = "+pEP1s+" €/kWh" +"\n \n" ; 
         this.sMensajes = this.sMensajes + "Precio en Energía en Energia de Peaje con contrato actual = "+pEP+" €/kWh" +"\n" ;
         this.sMensajes = this.sMensajes + "Impuesto eléctrico = "+impuesto_electrico+"\n \n" ;  
         this.sMensajes = this.sMensajes + "Precio en Potencia en P1-P2 Actual = "+pPP1+" €/kWh" +"\n" ;
         this.sMensajes = this.sMensajes + "Precio en Potencia en P1 Simulado = "+pPP1s+" €/kWh" +"\n \n" ;         
         this.sMensajes = this.sMensajes + "Ahorro acumulado  = "+formatoImporte.format(ahorro_acumulado)+"\n \n" ; 
         this.sMensajes = this.sMensajes + "............................... CÁLCULOS ................................."+"\n" ;
         
         this.sMensajes = this.sMensajes + "Coste Enegia de peaje ->(eEP * pEP)= \n"+formatoImporte.format(eEP * pEP) +"\n" ;
         
         this.sMensajes = this.sMensajes + "Coste con tarifa actual  ->(impuesto_electrico * ((eEP1 * pEP1) + (dias * pPP1 ) + (eEP2 * pEP2) +  (eEP * pEP)))= \n"+formatoImporte.format(coste_actual) +"\n" ;
         this.sMensajes = this.sMensajes + "Coste con tarifa simulada -> (impuesto_electrico * ((eEP1 * pEP1s) + (dias * pPP1s ) + (eEP2 * pEP1s)))= \n"+formatoImporte.format(coste_simulado) +"\n" ;
         this.sMensajes = this.sMensajes + "Coste total de la factura después de impuestos. -> (coste_actual_DI    = impuesto_iva * coste_actual)= \n"+formatoImporte.format(coste_actual_DI) +"\n \n" ;
         this.sMensajes = this.sMensajes + "Ahorro en el consumo de energía = \n"+formatoImporte.format(aEP1) +"\n" ;
         this.sMensajes = this.sMensajes + "Ahorro en potencia contratada = \n"+formatoImporte.format(aPP1) +"\n" ;
         this.sMensajes = this.sMensajes + "Ahorro total Energia + Potencia (con impuesto eléctrico)= \n"+formatoImporte.format(ahorro) +"\n" ;
         this.sMensajes = this.sMensajes + "Ahorro acumulado total = \n"+formatoImporte.format(ahorro_total) +"\n" ;
         this.sMensajes = this.sMensajes + "Porcentaje de ahorro = \n"+formatoPorcentaje.format(porcentaje) +"\n" ;
     }
     // .......................................................................    
     // .......................................................................................................................................  
     // .....................................           CALCULO DE AHORRO     DE TARIFA 3.0A a TARIFA 3.0A
            
     // .......................................................................
     if ( this.tipo_Act == 5 && this.tipo_Sim== 5) {
         System.out.println("ESTAMOS EN  CALCULO DE AHORRO DE TARIFA 3.0A a TARIFA 3.0A") ;
         
         eEP1 = Double.parseDouble(energiaP1.getText());                                                    // Energía consumida en P1
         eEP2 = Double.parseDouble(energiaP2.getText());                                                    // Energía consumida en P2
         eEP3 = Double.parseDouble(energiaP3.getText());                                                    // Energía consumida en P3
         
         pPC1 = Double.parseDouble(jTextField19.getText());                                                 // Potencia contratada en P1 Actual
         psPC1 = Double.parseDouble(jTextField26.getText());                                                // Potencia contratada en P1 Simulada
         
         pPC2 = Double.parseDouble(jTextField35.getText());                                                 // Potencia contratada en P2 Actual
         psPC2 = Double.parseDouble(jTextField37.getText());                                                // Potencia contratada en P2 Simulada
         
         pPC3 = Double.parseDouble(jTextField36.getText());                                                 // Potencia contratada en P3 Actual
         psPC3 = Double.parseDouble(jTextField38.getText());                                                // Potencia contratada en P3 Simulada
         
         // ..................................................................                              POTENCIA A FACTURAR
         
         P1M = Double.parseDouble(jTextField77.getText());                                                 // Potencia de maximetro P1
         P2M = Double.parseDouble(jTextField78.getText());                                                 // Potencia de maximetro P2
         P3M = Double.parseDouble(jTextField79.getText());                                                 // Potencia de maximetro P3
         
         PR  = Double.parseDouble(jTextField85.getText());                                                 // Penalización de reactiva
         // ..................................................................                              COMPENSACIÓN DE REACTIVA
         costeReactivaSim =0 ;
         if (jCheckBox1.isSelected() && diasCond>0) {
           
            cosfiP1 = Double.parseDouble(jTextField118.getText());                                            // cos fi P1
            cosfiP2 = Double.parseDouble(jTextField120.getText());                                            // cos fi P1
            
            eRSP1   = (Math.tan(Math.acos(cosfiP1)) * eEP1) - 0.33 * eEP1 ;                                 // KVAr P1 simulada 
            eRSP2   = (Math.tan(Math.acos(cosfiP2)) * eEP2) - 0.33 * eEP2 ;                                 // KVAr P2 simulada
            
            if (eRSP1 < 0) eRSP1 = 0 ;
            if (eRSP2 < 0) eRSP2 = 0 ;
            
            seRSP1 = formatoNumero.format(eRSP1); System.out.println(String.valueOf(Math.tan(Math.acos(cosfiP1))));
            seRSP2 = formatoNumero.format(eRSP2);
            
            costeReactivaSim = (eRSP1 * costeReactiva) + (eRSP2 * costeReactiva) ; sCRS = formatoImporte.format(costeReactivaSim);
            
            
            jTextField121.setText(String.valueOf(redondear(eRSP1,2))) ;
            jTextField122.setText(String.valueOf(redondear(eRSP2,2))) ;
            jTextField123.setText(sCRS) ;
            
         }
         
         
        // ..................................................................
        if (this.fPotenciaFacturada == 0) {                                      // Si se factura por maximetro, aplicamos cálculos formulas
         
        if ( jCheckBox5.isSelected()) fReglaPotenciaActual=0 ; else fReglaPotenciaActual=1;
         
         
        if (fReglaPotenciaActual == 1 ) {                                                                     // Si la compañia aplica regla de potencia
         
        if ((P1M/pPC1)>= 1.05 ) {   PF1a =  P1M + 2 * ( P1M - 1.05 * pPC1); } else {                   // Potencia a facturar P1 actual
            
                                    PF1a = 0.85 * pPC1 ;
        }   
        
        if ((P2M/pPC2)>= 1.05 ) {   PF2a =  P2M + 2 * ( P2M - 1.05 * pPC2); } else {                   // Potencia a facturar P2 actual
            
                                    PF2a = 0.85 * pPC2 ;
        }
        
        if ((P3M/pPC3)>= 1.05 ) {   PF3a =  P3M + 2 * ( P3M - 1.05 * pPC3); } else {                   // Potencia a facturar P3 actual
            
                                    PF3a = 0.85 * pPC3 ;
        }
        } else {
                                    PF1a = P1M ; PF2a = P2M ; PF3a = P3M ;
        }
        // ...................................................................
                                                                            // Si no se asigna directamente la potencia facturada.
        } else {
            System.out.println("-> Voy a utilizar las potencias tal cual aparecen en la factura... ¡Aviso!");
            PF1a = P1M ;
            PF2a = P2M ;
            PF3a = P3M ;
        }
        
        
        if ( jCheckBox6.isSelected()) fReglaPotenciaSimulado=0 ; else fReglaPotenciaSimulado=1; 
        
        if (fReglaPotenciaSimulado == 1 ) {  
         if ((P1M/pPC1)>= 1.05 ) {  PF1s =  P1M + 2 * ( P1M - 1.05 * psPC1); } else {                   // Potencia a facturar P1 simulada
            
                                    PF1s = 0.85 * psPC1 ;
        }   
        
        if ((P2M/pPC2)>= 1.05 ) {   PF2s =  P2M + 2 * ( P2M - 1.05 * psPC2); } else {                   // Potencia a facturar P2 simulada
            
                                    PF2s = 0.85 * psPC2 ;
        }
        
        if ((P3M/pPC3)>= 1.05 ) {   PF3s =  P3M + 2 * ( P3M - 1.05 * psPC3); } else {                   // Potencia a facturar P3 simulada
            
                                    PF3s = 0.85 * psPC3 ;
        }
        } else {
                                    PF1s = P1M ; PF2s = P2M ; PF3s = P3M ;
        } 
         // .................................................................. 
         
        jTextField106.setText(String.valueOf(PF1a));                                  // Potencia a facturar P1 actual 
        jTextField107.setText(String.valueOf(PF2a));                                  // Potencia a facturar P2 actual
        jTextField108.setText(String.valueOf(PF3a));                                  // Potencia a facturar P3 actual
        jTextField113.setText(String.valueOf(PF1s));                                  // Potencia a facturar P1 simulada 
        jTextField114.setText(String.valueOf(PF2s));                                  // Potencia a facturar P2 simulada
        jTextField115.setText(String.valueOf(PF3s));                                  // Potencia a facturar P3 simulada
        
        
         // .................................................................. 
        
         pEP1  = Double.parseDouble(lCondicionesActuales[indice][14]) ;                                     // Precio en Energía en P1 con contrato actual
         pEP1s = Double.parseDouble(lCondicionesSimulacion[indice][14]) ;                                   // Precio en Energía en P1 Simulado (contrato anterior)
         
         pEP2  = Double.parseDouble(lCondicionesActuales[indice][15]) ;                                     // Precio en Energía en P2 con contrato actual
         pEP2s  = Double.parseDouble(lCondicionesSimulacion[indice][15]) ;                                  // Precio en Energía en P2 con contrato simulado
         
         pEP3  = Double.parseDouble(lCondicionesActuales[indice][16]) ;                                     // Precio en Energía en P3 con contrato actual
         pEP3s  = Double.parseDouble(lCondicionesSimulacion[indice][16]) ;                                  // Precio en Energía en P3 con contrato simulado
         
         
         pPP1  = Double.parseDouble(lCondicionesActuales[indice][8]) ;                                      // Precio en Potencia en P1 Actual
         pPP1s = Double.parseDouble(lCondicionesSimulacion[indice][8]) ;                                    // Precio en Potencia en P1 Simulado
         
         pPP2  = Double.parseDouble(lCondicionesActuales[indice][9]) ;                                      // Precio en Potencia en P2 Actual
         pPP2s = Double.parseDouble(lCondicionesSimulacion[indice][9]) ;                                    // Precio en Potencia en P2 Simulado
         
         pPP3  = Double.parseDouble(lCondicionesActuales[indice][10]) ;                                      // Precio en Potencia en P3 Actual
         pPP3s = Double.parseDouble(lCondicionesSimulacion[indice][10]) ;                                    // Precio en Potencia en P3 Simulado
                      
         pReactiva = Double.parseDouble(jTextField85.getText());                                            // Coste de penalización REACTIVA
         
         aEP1 = (eEP1 * (pEP1s-pEP1))  ;                                                                     // Ahorro en el consumo de energía P1
         aEP2 = (eEP2 * (pEP2s-pEP2))  ;                                                                     // Ahorro en el consumo de energía P2
         aEP3 = (eEP3 * (pEP3s-pEP3))  ;                                                                     // Ahorro en el consumo de energía P3
         aE   = aEP1 + aEP2 + aEP3 ;
         
         
        // aPP1 = (psPC1 * dias * pPP1s) - (pPC1 * dias * pPP1) ;                                          // Ahorro en potencia contratada P1
        // aPP2 = (psPC2 * dias * pPP2s) - (pPC2 * dias * pPP2) ;                                          // Ahorro en potencia contratada P2
        // aPP3 = (psPC3 * dias * pPP3s) - (pPC3 * dias * pPP3) ;                                          // Ahorro en potencia contratada P3
         
         aPP1 = (PF1s * dias * pPP1s) - (PF1a * dias * pPP1) ;                                             // Ahorro en potencia contratada P1
         aPP2 = (PF2s * dias * pPP2s) - (PF2a * dias * pPP2) ;                                             // Ahorro en potencia contratada P2
         aPP3 = (PF3s * dias * pPP3s) - (PF3a * dias * pPP3) ;                                             // Ahorro en potencia contratada P3
         
         aP   = aPP1+aPP2+aPP3 ;
         
         ahorro = impuesto_electrico * ((aEP1 + aEP2 + aEP3 + aPP1 + aPP2 + aPP3  ) + costeReactivaSim) ;   // Ahorro total Energia + Potencia
         
         ahorro_total = ahorro_total + ahorro ;                                                             // Ahorro acumulado total
         
         coste_actual    = (eEP1 * pEP1) + (PF1a * dias * pPP1 )  ;                                          // Coste con tarifa actual 
         coste_actual  += (eEP2 * pEP2) + (PF2a * dias * pPP2 )  ;
         coste_actual  += (eEP3 * pEP3) + (PF3a * dias * pPP3 )  ;
         
         
         coste_simulado = (eEP1 * pEP1s) + (psPC1 * dias * pPP1s ) ;                     // Coste con tarifa simulada
         coste_simulado +=(eEP2 * pEP2s) + (psPC2 * dias * pPP2s ) ;
         coste_simulado +=(eEP3 * pEP3s) + (psPC3 * dias * pPP3s ) ;
         
         
         coste_actual_DI    = impuesto_electrico * impuesto_iva * coste_actual ;                                                 // Coste total de la factura después de impuestos.
         
         porcentaje       = 1 - ( coste_actual / coste_simulado ) ;                                         // Porcentaje de ahorro
         // ...................................................................                             // CONTROL DE RESULTADO FINAL DE LA FACTURA
         pBIC    = (impuesto_electrico * (coste_actual+ pReactiva)) + pAlquiler  ;                              // Precio base de factura calculado
         System.out.println(" (coste_actual) + pAlquiler + pReactiva =("+ coste_actual+") + " + pAlquiler+" +  "+ pAlquiler  );
         spBIC   = formatoImporte.format(pBIC);
         pBIC    =Math.rint(pBIC*100)/100 ;
         if ( pBIC == pBIF) { 
              jTextField82.setText(spBIC);
              jTextField82.setBackground(Color.green);
              jTextField80.setBackground(new Color(0xCCFFCC)); 
              jTextField81.setBackground(new Color(0xCCFFCC)); 
             
         } else {                                                                       // Error de cálculo. No coinciden
              jTextField82.setText(spBIC);
              jTextField82.setBackground(Color.red);     
              jTextField80.setBackground(Color.orange); 
              jTextField81.setBackground(Color.orange); 
         }
         // ...................................................................
         sAhorro         = formatoImporte.format(ahorro);
         sCoste_Actual   = formatoImporte.format(coste_actual);
         sCoste_Simulado = formatoImporte.format(coste_simulado);
         sAhorro_Total   = formatoImporte.format(ahorro_total);
         sPorcentaje     = formatoPorcentaje.format(porcentaje);
         
         diasOptimizado  = diasOptimizado + dias ;
         jTextField40.setText(String.valueOf(diasOptimizado));    
              
         jTextField30.setText(sAhorro);
         jTextField15.setText(sCoste_Actual);
         jTextField27.setText(sCoste_Simulado);
         jTextField5.setText(sAhorro_Total);         
         jTextField9.setText(String.valueOf(dias));
         jTextField47.setText(sPorcentaje);
         
         jTextField41.setText(String.valueOf(coste_actual));           // guardamos en campo oculto coste_actual_AI
         jTextField42.setText(String.valueOf(coste_actual_DI));        // guardamos en campo oculto coste_actual_DI
         jTextField43.setText(String.valueOf(ahorro));                 // guardamos en campo oculto ahorro
         jTextField44.setText(String.valueOf(ahorro_total));           // guardamos en campo oculto ahorro total
         jTextField45.setText(String.valueOf(coste_simulado));         // guardamos en campo oculto coste_simulado_AI
         jTextField46.setText(String.valueOf(porcentaje));              // guardamos en campo oculto porcentaje
         
         this.sMensajes = FramePrincipal.sMensajes + "............................... DATOS DE PARTIDA................................."+"\n" ;
         this.sMensajes = this.sMensajes + "Energía consumida en P1 = "+formatoNumero.format(eEP1)+" kWh" +"\n" ;
         this.sMensajes = this.sMensajes + "Energía consumida en P2 = "+formatoNumero.format(eEP2)+" kWh" +"\n" ;
         this.sMensajes = this.sMensajes + "Energía consumida en P3 = "+formatoNumero.format(eEP3)+" kWh" +"\n" ;
         this.sMensajes = this.sMensajes + "Potencia contratada actual P1= "+formatoNumero.format(pPC1)+" kW" +"\n" ;
         this.sMensajes = this.sMensajes + "Potencia contratada simulada P1= "+formatoNumero.format(psPC1)+" kW" +"\n" ;
         this.sMensajes = this.sMensajes + "Potencia contratada actual P2= "+formatoNumero.format(pPC2)+" kW" +"\n" ;
         this.sMensajes = this.sMensajes + "Potencia contratada simulada P2= "+formatoNumero.format(psPC2)+" kW" +"\n" ;
         this.sMensajes = this.sMensajes + "Potencia contratada actual P3= "+formatoNumero.format(pPC3)+" kW" +"\n" ;
         this.sMensajes = this.sMensajes + "Potencia contratada simulada P3= "+formatoNumero.format(psPC3)+" kW" +"\n" ;
         
         this.sMensajes = this.sMensajes + "Potencia de maximetro en P1= "+formatoNumero.format(P1M)+" kW" +"\n" ;
         this.sMensajes = this.sMensajes + "Potencia de maximetro en P2= "+formatoNumero.format(P2M)+" kW" +"\n" ;
         this.sMensajes = this.sMensajes + "Potencia de maximetro en P3= "+formatoNumero.format(P3M)+" kW" +"\n" ;
         
         this.sMensajes = this.sMensajes + "Potencia a facturar en P1 ACTUAL= "+formatoNumero.format(PF1a)+" kW" +"\n" ;
         this.sMensajes = this.sMensajes + "Potencia a facturar en P2 ACTUAL= "+formatoNumero.format(PF2a)+" kW" +"\n" ;
         this.sMensajes = this.sMensajes + "Potencia a facturar en P3 ACTUAL= "+formatoNumero.format(PF3a)+" kW" +"\n" ;
         
         this.sMensajes = this.sMensajes + "Potencia a facturar en P1 SIMULADA= "+formatoNumero.format(PF1s)+" kW" +"\n" ;
         this.sMensajes = this.sMensajes + "Potencia a facturar en P2 SIMULADA= "+formatoNumero.format(PF2s)+" kW" +"\n" ;
         this.sMensajes = this.sMensajes + "Potencia a facturar en P3 SIMULADA= "+formatoNumero.format(PF3s)+" kW" +"\n" ;
         
         this.sMensajes = this.sMensajes + "Precio en Energía en P1 con contrato actual = "+pEP1+" €/kWh" +"\n" ;
         this.sMensajes = this.sMensajes + "Precio en Energía en P1 Simulado (contrato anterior) = "+pEP1s+" €/kWh" +"\n \n" ; 
         this.sMensajes = this.sMensajes + "Precio en Energía en P2 con contrato actual = "+pEP2+" €/kWh" +"\n" ;
         this.sMensajes = this.sMensajes + "Precio en Energía en P2 Simulado (contrato anterior) = "+pEP2s+" €/kWh" +"\n \n" ; 
         this.sMensajes = this.sMensajes + "Precio en Energía en P3 con contrato actual = "+pEP3+" €/kWh" +"\n" ;
         this.sMensajes = this.sMensajes + "Precio en Energía en P3 Simulado (contrato anterior) = "+pEP3s+" €/kWh" +"\n \n" ; 
         this.sMensajes = this.sMensajes + "Impuesto eléctrico = "+impuesto_electrico+"\n \n" ;  
         this.sMensajes = this.sMensajes + "Precio en Potencia en P1 Actual = "+pPP1+" €/kWh" +"\n" ;
         this.sMensajes = this.sMensajes + "Precio en Potencia en P1 Simulado = "+pPP1s+" €/kWh" +"\n \n" ;   
         this.sMensajes = this.sMensajes + "Precio en Potencia en P2 Actual = "+pPP2+" €/kWh" +"\n" ;
         this.sMensajes = this.sMensajes + "Precio en Potencia en P2 Simulado = "+pPP2s+" €/kWh" +"\n \n" ;
         this.sMensajes = this.sMensajes + "Precio en Potencia en P3 Actual = "+pPP3+" €/kWh" +"\n" ;
         this.sMensajes = this.sMensajes + "Precio en Potencia en P3 Simulado = "+pPP3s+" €/kWh" +"\n \n" ;
         this.sMensajes = this.sMensajes + "Ahorro acumulado  = "+formatoImporte.format(ahorro_acumulado)+"\n \n" ; 
         this.sMensajes = this.sMensajes + "............................... CÁLCULOS ................................."+"\n" ;
         this.sMensajes = this.sMensajes + "Coste con tarifa actual   -> ( ((eEP1 * pEP1) + (eEP2 * pEP2) + (eEP3 * pEP3) ) + (dias * pPP1 * pPC1 ) + (dias * pPP2 * pPC2 ) +( dias * pPP3 * pPC3 )))= \n"+formatoImporte.format(coste_actual) +"\n" ;
         this.sMensajes = this.sMensajes + "Coste con tarifa simulada -> (impuesto_electrico * ((eEP1 * pEP1s) + (eEP2 * pEP2s) + (eEP3 * pEP3s) ) + (dias * pPP1s * pPC1s ) + (dias * pPP2s * pPC2s ) +( dias * pPP3s * pPC3s )))= \n"+formatoImporte.format(coste_simulado) +"\n" ;
         this.sMensajes = this.sMensajes + "Coste total de la factura después de impuestos. -> (coste_actual_DI    = impuesto_iva * coste_actual)= \n"+formatoImporte.format(coste_actual_DI) +"\n \n" ;
         this.sMensajes = this.sMensajes + "Ahorro en el consumo de energía = \n"+formatoImporte.format(aE) +"\n" ;
         this.sMensajes = this.sMensajes + "Ahorro en potencia contratada = \n"+formatoImporte.format(aP) +"\n" ;
         this.sMensajes = this.sMensajes + "Ahorro total Energia + Potencia (con impuesto eléctrico)= \n"+formatoImporte.format(ahorro) +"\n" ;
         this.sMensajes = this.sMensajes + "Ahorro acumulado total = \n"+formatoImporte.format(ahorro_total) +"\n" ;
         this.sMensajes = this.sMensajes + "Porcentaje de ahorro = \n"+formatoPorcentaje.format(porcentaje) +"\n" ;
     }
      // .......................................................................    
     // .......................................................................................................................................  
     // .....................................           CALCULO DE AHORRO     DE TARIFA 2.1DHA  a TARIFA 2.0DHA INDEXADO  o   DE TARIFA 2.1DHA  a TARIFA 2.1DHA INDEXADO  o   DE TARIFA 2.0DHA  a TARIFA 2.0DHA INDEXADO
            
     // .......................................................................
      if ((this.tipo_Act == 8 && this.tipo_Sim== 4) || (this.tipo_Act == 9 && this.tipo_Sim== 4) || (this.tipo_Act == 8 && this.tipo_Sim== 2)) {
         System.out.println("ESTAMOS EN  CALCULO DE AHORRO      DE TARIFA 2.1DHA  a TARIFA 2.0DHA INDEXADO  o   DE TARIFA 2.1DHA  a TARIFA 2.1DHA INDEXADO  o   DE TARIFA 2.0DHA  a TARIFA 2.0DHA INDEXADO") ;
         eEP1 = Double.parseDouble(energiaP1.getText());                                                    // Energía consumida en P1
         eEP2 = Double.parseDouble(energiaP2.getText());                                                    // Energía consumida en P2
        
         eEP = eEP1 + eEP2 ;   jTextField75.setText(String.valueOf(eEP));             // Energía de peaje                                                               // Energía de peaje
         
         pPC1 = Double.parseDouble(jTextField19.getText());                                                 // Potencia contratada en P1 Actual
         psPC1 = Double.parseDouble(jTextField26.getText());                                                // Potencia contratada en P1 Simulada
         
         pEP1  = Double.parseDouble(lCondicionesActuales[indice][14]) ;                                     // Precio en Energía en P1 con contrato actual
         pEP1s = Double.parseDouble(lCondicionesSimulacion[indice][14]) ;                                   // Precio en Energía en P1 Simulado (contrato anterior)
         pEP2  = Double.parseDouble(lCondicionesActuales[indice][15]) ;                                     // Precio en Energía en P2 con contrato actual
         pEP   = Double.parseDouble(jTextField73.getText());                                                // Precio en Energía de Peaje
         
         pPP1  = Double.parseDouble(lCondicionesActuales[indice][8]) ;                                      // Precio en Potencia en P1 Actual
         pPP1s = Double.parseDouble(lCondicionesSimulacion[indice][8]) ;                                    // Precio en Potencia en P1 Simulado
                                            
          // ..................................................................                              POTENCIA A FACTURAR
         
         P1M = Double.parseDouble(jTextField77.getText());                                                 // Potencia de maximetro P1
         P2M = Double.parseDouble(jTextField78.getText());                                                 // Potencia de maximetro P2
         
         
         aEP1 = (eEP1 * (pEP1s-pEP1)) + ( eEP2 * (pEP1s-pEP2)) - (eEP * pEP) ;                              // Ahorro en el consumo de energía
         aPP1 = (psPC1 * dias * pPP1s) - (pPC1 * dias * pPP1) ;                                             // Ahorro en potencia contratada
         
         ahorro = impuesto_electrico * (aEP1 + aPP1) ;                                                      // Ahorro total Energia + Potencia
         
         ahorro_total = ahorro_total + ahorro ;                                                             // Ahorro acumulado total
         
         coste_actual   = ((eEP1 * pEP1) + (pPC1 * dias * pPP1 ) + (eEP2 * pEP2) + (eEP * pEP) ) ;          // Coste con tarifa actual
        
         coste_simulado = ((eEP1 * pEP1s) + (psPC1 * dias * pPP1s ) + (eEP2 * pEP1s)) ;                             // Coste con tarifa simulada
         
         coste_actual_DI    = impuesto_electrico * impuesto_iva * coste_actual ;                                                 // Coste total de la factura después de impuestos.
         
         porcentaje       = 1 - ( coste_actual / coste_simulado ) ;                                         // Porcentaje de ahorro
         // ...................................................................         // CONTROL DE RESULTADO FINAL DE LA FACTURA
        pBIC    = impuesto_electrico * (coste_actual + PR) + pAlquiler ;                                         // Precio base de factura calculado
        spBIC   = formatoImporte.format(pBIC);
        pBIC    =Math.rint(pBIC*100)/100 ; 
         if ( pBIC == pBIF) { 
              jTextField82.setText(spBIC);
              jTextField82.setBackground(Color.green);
              jTextField80.setBackground(new Color(0xCCFFCC)); 
              jTextField81.setBackground(new Color(0xCCFFCC));  
             
         } else {                                                                       // Error de cálculo. No coinciden
              jTextField82.setText(spBIC);
              jTextField82.setBackground(Color.red);     
              jTextField80.setBackground(Color.orange); 
              jTextField81.setBackground(Color.orange); 
         }
         // ...................................................................
         sAhorro         = formatoImporte.format(ahorro);
         sCoste_Actual   = formatoImporte.format(coste_actual);
         sCoste_Simulado = formatoImporte.format(coste_simulado);
         sAhorro_Total   = formatoImporte.format(ahorro_total);
         sPorcentaje      = formatoPorcentaje.format(porcentaje);
         
         diasOptimizado  = diasOptimizado + dias ;
         jTextField40.setText(String.valueOf(diasOptimizado));    
              
         jTextField30.setText(sAhorro);
         jTextField15.setText(sCoste_Actual);
         jTextField27.setText(sCoste_Simulado);
         jTextField5.setText(sAhorro_Total);         
         jTextField9.setText(String.valueOf(dias));
         jTextField47.setText(sPorcentaje);
         
         jTextField41.setText(String.valueOf(coste_actual));           // guardamos en campo oculto coste_actual_AI
         jTextField42.setText(String.valueOf(coste_actual_DI));        // guardamos en campo oculto coste_actual_DI
         jTextField43.setText(String.valueOf(ahorro));                 // guardamos en campo oculto ahorro
         jTextField44.setText(String.valueOf(ahorro_total));           // guardamos en campo oculto ahorro total
         jTextField45.setText(String.valueOf(coste_simulado));         // guardamos en campo oculto coste_simulado_AI
         jTextField46.setText(String.valueOf(porcentaje));              // guardamos en campo oculto porcentaje
         
         
         
         this.sMensajes = FramePrincipal.sMensajes + "............................... DATOS DE PARTIDA................................."+"\n" ;
         this.sMensajes = this.sMensajes + "Energía consumida en P1 = "+formatoNumero.format(eEP1)+" kWh" +"\n" ;
         this.sMensajes = this.sMensajes + "Energía consumida en P2 = "+formatoNumero.format(eEP2)+" kWh" +"\n" ;
         this.sMensajes = this.sMensajes + "Energía de Peaje = "+formatoNumero.format(eEP)+" kWh" +"\n" ;
         this.sMensajes = this.sMensajes + "Potencia contratada actual P1-P2= "+formatoNumero.format(pPC1)+" kW" +"\n" ;       
         this.sMensajes = this.sMensajes + "Potencia contratada simulada P1 = "+formatoNumero.format(psPC1)+" kW" +"\n" ;
         this.sMensajes = this.sMensajes + "Precio en Energía en P1 con contrato actual = "+pEP1+" €/kWh" +"\n" ;
         this.sMensajes = this.sMensajes + "Precio en Energía en P1 Simulado (contrato anterior) = "+pEP1s+" €/kWh" +"\n \n" ; 
         this.sMensajes = this.sMensajes + "Precio en Energía en P2 con contrato actual = "+pEP2+" €/kWh" +"\n" ;
         this.sMensajes = this.sMensajes + "Precio en Energía en P2 Simulado (contrato anterior) = "+pEP1s+" €/kWh" +"\n \n" ; 
         this.sMensajes = this.sMensajes + "Precio en Energía en Energia de Peaje con contrato actual = "+pEP+" €/kWh" +"\n" ;
         this.sMensajes = this.sMensajes + "Impuesto eléctrico = "+impuesto_electrico+"\n \n" ;  
         this.sMensajes = this.sMensajes + "Precio en Potencia en P1-P2 Actual = "+pPP1+" €/kWh" +"\n" ;
         this.sMensajes = this.sMensajes + "Precio en Potencia en P1 Simulado = "+pPP1s+" €/kWh" +"\n \n" ;         
         this.sMensajes = this.sMensajes + "Ahorro acumulado  = "+formatoImporte.format(ahorro_acumulado)+"\n \n" ; 
         this.sMensajes = this.sMensajes + "............................... CÁLCULOS ................................."+"\n" ;
         
         this.sMensajes = this.sMensajes + "Coste Enegia de peaje ->(eEP * pEP)= \n"+formatoImporte.format(eEP * pEP) +"\n" ;
         
         this.sMensajes = this.sMensajes + "Coste con tarifa actual  ->(impuesto_electrico * ((eEP1 * pEP1) + (dias * pPP1 ) + (eEP2 * pEP2) +  (eEP * pEP)))= \n"+formatoImporte.format(coste_actual) +"\n" ;
         this.sMensajes = this.sMensajes + "Coste con tarifa simulada -> (impuesto_electrico * ((eEP1 * pEP1s) + (dias * pPP1s ) + (eEP2 * pEP1s)))= \n"+formatoImporte.format(coste_simulado) +"\n" ;
         this.sMensajes = this.sMensajes + "Coste total de la factura después de impuestos. -> (coste_actual_DI    = impuesto_iva * coste_actual)= \n"+formatoImporte.format(coste_actual_DI) +"\n \n" ;
         this.sMensajes = this.sMensajes + "Ahorro en el consumo de energía = \n"+formatoImporte.format(aEP1) +"\n" ;
         this.sMensajes = this.sMensajes + "Ahorro en potencia contratada = \n"+formatoImporte.format(aPP1) +"\n" ;
         this.sMensajes = this.sMensajes + "Ahorro total Energia + Potencia (con impuesto eléctrico)= \n"+formatoImporte.format(ahorro) +"\n" ;
         this.sMensajes = this.sMensajes + "Ahorro acumulado total = \n"+formatoImporte.format(ahorro_total) +"\n" ;
         this.sMensajes = this.sMensajes + "Porcentaje de ahorro = \n"+formatoPorcentaje.format(porcentaje) +"\n" ;
     }
     // .......................................................................    
     // .......................................................................................................................................  
     // .....................................           CALCULO DE AHORRO     DE TARIFA 3.0A INDX a TARIFA 3.0A INDX
            
     // .......................................................................
     
      
     if ( this.tipo_Act == 10 && this.tipo_Sim== 10) {
         System.out.println("ESTAMOS EN  CALCULO DE AHORRO DE TARIFA 3.0A INDEX a TARIFA 3.0A INDX") ;
         
         eEP1 = Double.parseDouble(energiaP1.getText());                                                    // Energía consumida en P1
         eEP2 = Double.parseDouble(energiaP2.getText());                                                    // Energía consumida en P2
         eEP3 = Double.parseDouble(energiaP3.getText());                                                    // Energía consumida en P3
         
         eEP = eEP1 + eEP2 + eEP3 ;   jTextField75.setText(String.valueOf(eEP));     // Energía de peaje    
         
          eEP1s= Double.parseDouble(energiaP1s.getText());                                                    // Energía simulada consumida en P1
         eEP2s= Double.parseDouble(energiaP2s.getText());                                                    // Energía simulada consumida en P2
         eEP3s= Double.parseDouble(energiaP3s.getText());                                                    // Energía simulada consumida en P3
       
         eEPs= eEP1s + eEP2s + eEP3s ;   jTextField124.setText(String.valueOf(eEPs));                        // Energía de peaje simulada
         
         
         pPC1 = Double.parseDouble(jTextField19.getText());                                                 // Potencia contratada en P1 Actual
         psPC1 = Double.parseDouble(jTextField26.getText());                                                // Potencia contratada en P1 Simulada
         
         pPC2 = Double.parseDouble(jTextField35.getText());                                                 // Potencia contratada en P2 Actual
         psPC2 = Double.parseDouble(jTextField37.getText());                                                // Potencia contratada en P2 Simulada
         
         pPC3 = Double.parseDouble(jTextField36.getText());                                                 // Potencia contratada en P3 Actual
         psPC3 = Double.parseDouble(jTextField38.getText());                                                // Potencia contratada en P3 Simulada
         
          // ..................................................................                              COMPENSACIÓN DE REACTIVA
         costeReactivaSim = 0 ;
         if (jCheckBox1.isSelected() && diasCond>0 ) {
           
            cosfiP1 = Double.parseDouble(jTextField118.getText());                                            // cos fi P1
            cosfiP2 = Double.parseDouble(jTextField120.getText());                                            // cos fi P1
            
            eRSP1   = (Math.tan(Math.acos(cosfiP1)) * eEP1) - 0.33 * eEP1 ;                                 // KVAr P1 simulada 
            eRSP2   = (Math.tan(Math.acos(cosfiP2)) * eEP2) - 0.33 * eEP2 ;                                 // KVAr P2 simulada
            
            if (eRSP1 < 0) eRSP1 = 0 ;
            if (eRSP2 < 0) eRSP2 = 0 ;
            
            seRSP1 = formatoNumero.format(eRSP1); System.out.println(String.valueOf(Math.tan(Math.acos(cosfiP1))));
            seRSP2 = formatoNumero.format(eRSP2);
            
            costeReactivaSim = (eRSP1 * costeReactiva) + (eRSP2 * costeReactiva) ; sCRS = formatoImporte.format(costeReactivaSim);
            
            
            jTextField121.setText(String.valueOf(redondear(eRSP1,2))) ;
            jTextField122.setText(String.valueOf(redondear(eRSP2,2))) ;
            jTextField123.setText(sCRS) ;
            
         }
         
       
         
         // ..................................................................                              POTENCIA A FACTURAR
         
         P1M = Double.parseDouble(jTextField77.getText());                                                 // Potencia de maximetro P1
         P2M = Double.parseDouble(jTextField78.getText());                                                 // Potencia de maximetro P2
         P3M = Double.parseDouble(jTextField79.getText());                                                 // Potencia de maximetro P3
         
         PR  = Double.parseDouble(jTextField85.getText());                                                 // Penalización de reactiva
        
        if (this.fPotenciaFacturada == 0) {                                      // Si se factura por maximetro, aplicamos cálculos formulas 
         
        if ( jCheckBox5.isSelected()) fReglaPotenciaActual=0 ; else fReglaPotenciaActual=1; 
        if (fReglaPotenciaActual == 1 ) {                                                                     // Si la compañia aplica regla de potencia
         
        if ((P1M/pPC1)>= 1.05 ) {   PF1a = P1M + 2 * ( P1M - 1.05 * pPC1); } else {                   // Potencia a facturar P1 actual
        if ((P1M/pPC1)>= 0.85 )   { PF1a =  P1M ;                                } else {
                                    PF1a = 0.85 * pPC1 ;
        } }  
        
        if ((P2M/pPC2)>= 1.05 ) {   PF2a =  P2M + 2 * ( P2M - 1.05 * pPC2); } else {                   // Potencia a facturar P2 actual
        if((P2M/pPC2)>= 0.85 )   {  PF2a =  P2M ;                                 } else {    
                                    PF2a = 0.85 * pPC2 ;
        }}
        
        if ((P3M/pPC3)>= 1.05 ) {   PF3a =  P3M + 2 * ( P3M - 1.05 * pPC3); } else {                   // Potencia a facturar P3 actual
        if ((P3M/pPC3)>= 0.85 )   { PF3a =  P3M ;                                } else {        
                                    PF3a = 0.85 * pPC3 ;
        }}  
        } else {
                                    PF1a = pPC1 ; PF2a = pPC2 ; PF3a = pPC3 ;
        }
          // ...................................................................
                                                                            // Si no se asigna directamente la potencia facturada.
        } else {
            System.out.println("-> Voy a utilizar las potencias tal cual aparecen en la factura... ¡Aviso!");
            PF1a = P1M ;
            PF2a = P2M ;
            PF3a = P3M ;
        }
        
        
        
        if ( jCheckBox6.isSelected()) fReglaPotenciaSimulado=0 ; else fReglaPotenciaSimulado=1; 
         if (fReglaPotenciaSimulado == 1 ) {    
         if ((P1M/psPC1)>= 1.05 ) {  PF1s =  P1M + 2 * ( P1M - 1.05 * psPC1); } else {                   // Potencia a facturar P1 simulada
         if ((P1M/psPC1)>= 0.85 )   {PF1s =  P1M ;                                  } else {   
                                    PF1s = 0.85 * psPC1 ;
        }   }
        
        if ((P2M/psPC2)>= 1.05 ) {   PF2s =  P2M + 2 * ( P2M - 1.05 * psPC2); } else {                   // Potencia a facturar P2 simulada
        if ((P2M/psPC2)>= 0.85 )    {PF2s =  P2M ;                                  } else {    
                                    PF2s = 0.85 * psPC2 ;
        }}
        
        if ((P3M/psPC3)>= 1.05 ) {   PF3s =  P3M + 2 * ( P3M - 1.05 * psPC3); } else {                   // Potencia a facturar P3 simulada
        if ((P3M/psPC3)>= 0.85 )   { PF3s =  P3M ;                                  } else {        
                                     PF3s = 0.85 * psPC3 ;
        }}
        } else {
                                    PF1s = psPC1 ; PF2s = psPC2 ; PF3s = psPC3 ;
        } 
         
        // ..................................................................  
        
        PF1a = redondear(PF1a,2);
        PF2a = redondear(PF2a,2);
        PF3a = redondear(PF3a,2); 
        PF1s = redondear(PF1s,2);
        PF2s = redondear(PF2s,2);
        PF3s = redondear(PF3s,2);
         
        // .................................................................. 
           
        jTextField106.setText(String.valueOf(PF1a));                                  // Potencia a facturar P1 actual 
        jTextField107.setText(String.valueOf(PF2a));                                  // Potencia a facturar P2 actual
        jTextField108.setText(String.valueOf(PF3a));                                  // Potencia a facturar P3 actual
        jTextField113.setText(String.valueOf(PF1s));                                  // Potencia a facturar P1 simulada 
        jTextField114.setText(String.valueOf(PF2s));                                  // Potencia a facturar P2 simulada
        jTextField115.setText(String.valueOf(PF3s));                                  // Potencia a facturar P3 simulada
        
         // .................................................................. 
         pEP1  = Double.parseDouble(lCondicionesActuales[indice][14]) ;                                     // Precio en Energía en P1 con contrato actual
         pEP1s = Double.parseDouble(lCondicionesSimulacion[indice][14]) ;                                   // Precio en Energía en P1 Simulado (contrato anterior)
         
         pEP2  = Double.parseDouble(lCondicionesActuales[indice][15]) ;                                     // Precio en Energía en P2 con contrato actual
         pEP2s  = Double.parseDouble(lCondicionesSimulacion[indice][15]) ;                                  // Precio en Energía en P2 con contrato simulado
         
         pEP3  = Double.parseDouble(lCondicionesActuales[indice][16]) ;                                     // Precio en Energía en P3 con contrato actual
         pEP3s  = Double.parseDouble(lCondicionesSimulacion[indice][16]) ;                                  // Precio en Energía en P3 con contrato simulado
         
         pEPa   = Double.parseDouble(jTextField73.getText());                                               // Precio de energía de peaje ACTUAL
         pEPs   = Double.parseDouble(jTextField74.getText());                                               // Precio de energía de peaje SIMULADO
         
         pPP1  = Double.parseDouble(lCondicionesActuales[indice][8]) ;                                      // Precio en Potencia en P1 Actual
         pPP1s = Double.parseDouble(lCondicionesSimulacion[indice][8]) ;                                    // Precio en Potencia en P1 Simulado
         
         pPP2  = Double.parseDouble(lCondicionesActuales[indice][9]) ;                                      // Precio en Potencia en P2 Actual
         pPP2s = Double.parseDouble(lCondicionesSimulacion[indice][9]) ;                                    // Precio en Potencia en P2 Simulado
         
         pPP3  = Double.parseDouble(lCondicionesActuales[indice][10]) ;                                      // Precio en Potencia en P3 Actual
         pPP3s = Double.parseDouble(lCondicionesSimulacion[indice][10]) ;                                    // Precio en Potencia en P3 Simulado
         
         
        // .........................................................................
         
         if (this.fEnergiaSimulada == 0) {                                                                   // Si no se han hecho mejoras de ahorro...
            
             aEP1 = (eEP1 * (pEP1s-pEP1))  ;                                                                     // Ahorro en el consumo de energía P1
             aEP2 = (eEP2 * (pEP2s-pEP2))  ;                                                                     // Ahorro en el consumo de energía P2
             aEP3 = (eEP3 * (pEP3s-pEP3))  ;                                                                     // Ahorro en el consumo de energía P3
             aE   = aEP1 + aEP2 + aEP3 + (eEP * (pEPs-pEPa));       
         } else {                                                                                            // Sino hay que utilar una energía simulada
            aEP1 = (eEP1s * pEP1s ) - ( pEP1 * eEP1)  ;                                                       // Ahorro en el consumo de energía P1
            aEP2 = (eEP2s * pEP2s ) - ( pEP2 * eEP2)  ;                                                       // Ahorro en el consumo de energía P2
            aEP3 = (eEP3s * pEP3s ) - ( pEP3 * eEP3)  ;                                                       // Ahorro en el consumo de energía P3  
            aE   = aEP1 + aEP2 + aEP3 + ((eEPs * pEPs) -(eEP * pEPa));       
             
         }
        
        
        // aPP1 = (psPC1 * dias * pPP1s) - (pPC1 * dias * pPP1) ;                                          // Ahorro en potencia contratada P1
        // aPP2 = (psPC2 * dias * pPP2s) - (pPC2 * dias * pPP2) ;                                          // Ahorro en potencia contratada P2
        // aPP3 = (psPC3 * dias * pPP3s) - (pPC3 * dias * pPP3) ;                                          // Ahorro en potencia contratada P3
         
         aPP1 = (PF1s * dias * pPP1s) - (PF1a * dias * pPP1) ;                                             // Ahorro en potencia contratada P1
         aPP2 = (PF2s * dias * pPP2s) - (PF2a * dias * pPP2) ;                                             // Ahorro en potencia contratada P2
         aPP3 = (PF3s * dias * pPP3s) - (PF3a * dias * pPP3) ;                                             // Ahorro en potencia contratada P3
         
         aP   = aPP1+aPP2+aPP3 ;
         
         ahorro = impuesto_electrico * ((aE + aP ) + costeReactivaSim);                                      // Ahorro total Energia + Potencia
         
         System.out.println("impuesto electrico="+impuesto_electrico) ;
         System.out.println("aP ="+aP) ;
         System.out.println("(aE + aP )="+aE + aP) ;
         
         
         ahorro_total = ahorro_total + ahorro ;                                                             // Ahorro acumulado total
         
         coste_actual   = (eEP1 * pEP1) + (PF1a * dias * pPP1 )  ;                                          // Coste con tarifa actual 
         coste_actual  += (eEP2 * pEP2) + (PF2a * dias * pPP2 )  ;
         coste_actual  += (eEP3 * pEP3) + (PF3a * dias * pPP3 )  ;
         coste_actual  += (eEP * pEPa) ;
        
         // ...................................................................
        
         if (this.fEnergiaSimulada == 0) {                                                                   // Si no se han hecho mejoras de ahorro...
        
            coste_simulado =  (eEP1 * pEP1s) + (PF1s * dias * pPP1s ) ;                                       // Coste con tarifa simulada
            coste_simulado += (eEP2 * pEP2s) + (PF2s * dias * pPP2s ) ;
            coste_simulado += (eEP3 * pEP3s) + (PF3s * dias * pPP3s ) ;
            coste_simulado += (eEP * pEPs) ;
         
         } else {
            coste_simulado =  (eEP1s * pEP1s) + (PF1s * dias * pPP1s ) ;                                       // Coste con tarifa simulada
            coste_simulado += (eEP2s * pEP2s) + (PF2s * dias * pPP2s ) ;
            coste_simulado += (eEP3s * pEP3s) + (PF3s * dias * pPP3s ) ;
            coste_simulado += (eEPs * pEPs) ;
             
         }
         
         // ...................................................................
        
         coste_actual_DI    = impuesto_electrico * impuesto_iva * coste_actual ;                                                 // Coste total de la factura después de impuestos.
         
         porcentaje       = 1 - ( coste_actual / coste_simulado ) ;                                                  // Porcentaje de ahorro
         // ...................................................................                                      // CONTROL DE RESULTADO FINAL DE LA FACTURA
         pBIC    = impuesto_electrico * (coste_actual + PR) + pAlquiler ;                                            // Precio base de factura calculado
         spBIC   = formatoImporte.format(pBIC);
         pBIC    =Math.rint(pBIC*100)/100 ;
         if ( pBIC == pBIF) { 
              jTextField82.setText(spBIC);
              jTextField82.setBackground(Color.green);
              jTextField80.setBackground(new Color(0xCCFFCC)); 
              jTextField81.setBackground(new Color(0xCCFFCC)); 
             
         } else {                                                                       // Error de cálculo. No coinciden
              jTextField82.setText(spBIC);
              jTextField82.setBackground(Color.red);     
              jTextField80.setBackground(Color.orange); 
              jTextField81.setBackground(Color.orange); 
         }
         // ...................................................................
         sAhorro         = formatoImporte.format(ahorro);
         sCoste_Actual   = formatoImporte.format(coste_actual);
         sCoste_Simulado = formatoImporte.format(coste_simulado);
         sAhorro_Total   = formatoImporte.format(ahorro_total);
         sPorcentaje     = formatoPorcentaje.format(porcentaje);
         
         diasOptimizado  = diasOptimizado + dias ;
         jTextField40.setText(String.valueOf(diasOptimizado));    
              
         jTextField30.setText(sAhorro);
         jTextField15.setText(sCoste_Actual);
         jTextField27.setText(sCoste_Simulado);
         jTextField5.setText(sAhorro_Total);         
         jTextField9.setText(String.valueOf(dias));
         jTextField47.setText(sPorcentaje);
         
         jTextField41.setText(String.valueOf(coste_actual));           // guardamos en campo oculto coste_actual_AI
         jTextField42.setText(String.valueOf(coste_actual_DI));        // guardamos en campo oculto coste_actual_DI
         jTextField43.setText(String.valueOf(ahorro));                 // guardamos en campo oculto ahorro
         jTextField44.setText(String.valueOf(ahorro_total));           // guardamos en campo oculto ahorro total
         jTextField45.setText(String.valueOf(coste_simulado));         // guardamos en campo oculto coste_simulado_AI
         jTextField46.setText(String.valueOf(porcentaje));              // guardamos en campo oculto porcentaje
         
         this.sMensajes = FramePrincipal.sMensajes + "............................... DATOS DE PARTIDA................................."+"\n" ;
         this.sMensajes = this.sMensajes + "Energía consumida en P1 = "+formatoNumero.format(eEP1)+" kWh" +"\n" ;
         this.sMensajes = this.sMensajes + "Energía consumida en P2 = "+formatoNumero.format(eEP2)+" kWh" +"\n" ;
         this.sMensajes = this.sMensajes + "Energía consumida en P3 = "+formatoNumero.format(eEP3)+" kWh" +"\n" ;
         
         if (this.fEnergiaSimulada == 1) {    
            this.sMensajes = this.sMensajes + "Energía consumida en P1 SIMULADA = "+formatoNumero.format(eEP1s)+" kWh" +"\n" ;
            this.sMensajes = this.sMensajes + "Energía consumida en P2 SIMULADA = "+formatoNumero.format(eEP2s)+" kWh" +"\n" ;
            this.sMensajes = this.sMensajes + "Energía consumida en P3 SIMULADA = "+formatoNumero.format(eEP3s)+" kWh" +"\n" ;
         }
                 
         this.sMensajes = this.sMensajes + "Potencia contratada actual P1= "+formatoNumero.format(pPC1)+" kW" +"\n" ;
         this.sMensajes = this.sMensajes + "Potencia contratada simulada P1= "+formatoNumero.format(psPC1)+" kW" +"\n" ;
         this.sMensajes = this.sMensajes + "Potencia contratada actual P2= "+formatoNumero.format(pPC2)+" kW" +"\n" ;
         this.sMensajes = this.sMensajes + "Potencia contratada simulada P2= "+formatoNumero.format(psPC2)+" kW" +"\n" ;
         this.sMensajes = this.sMensajes + "Potencia contratada actual P3= "+formatoNumero.format(pPC3)+" kW" +"\n" ;
         this.sMensajes = this.sMensajes + "Potencia contratada simulada P3= "+formatoNumero.format(psPC3)+" kW" +"\n" ;
         
         this.sMensajes = this.sMensajes + "Potencia de maximetro en P1= "+formatoNumero.format(P1M)+" kW" +"\n" ;
         this.sMensajes = this.sMensajes + "Potencia de maximetro en P2= "+formatoNumero.format(P2M)+" kW" +"\n" ;
         this.sMensajes = this.sMensajes + "Potencia de maximetro en P3= "+formatoNumero.format(P3M)+" kW" +"\n" ;
         
         this.sMensajes = this.sMensajes + "Potencia a facturar en P1 ACTUAL= "+formatoNumero.format(PF1a)+" kW" +"\n" ;
         this.sMensajes = this.sMensajes + "Potencia a facturar en P2 ACTUAL= "+formatoNumero.format(PF2a)+" kW" +"\n" ;
         this.sMensajes = this.sMensajes + "Potencia a facturar en P3 ACTUAL= "+formatoNumero.format(PF3a)+" kW" +"\n" ;
         
         this.sMensajes = this.sMensajes + "Potencia a facturar en P1 SIMULADA= "+formatoNumero.format(PF1s)+" kW" +"\n" ;
         this.sMensajes = this.sMensajes + "Potencia a facturar en P2 SIMULADA= "+formatoNumero.format(PF2s)+" kW" +"\n" ;
         this.sMensajes = this.sMensajes + "Potencia a facturar en P3 SIMULADA= "+formatoNumero.format(PF3s)+" kW" +"\n" ;
         
         this.sMensajes = this.sMensajes + "Precio en Energía en P1 con contrato actual = "+pEP1+" €/kWh" +"\n" ;
         this.sMensajes = this.sMensajes + "Precio en Energía en P1 Simulado (contrato anterior) = "+pEP1s+" €/kWh" +"\n \n" ; 
         this.sMensajes = this.sMensajes + "Precio en Energía en P2 con contrato actual = "+pEP2+" €/kWh" +"\n" ;
         this.sMensajes = this.sMensajes + "Precio en Energía en P2 Simulado (contrato anterior) = "+pEP2s+" €/kWh" +"\n \n" ; 
         this.sMensajes = this.sMensajes + "Precio en Energía en P3 con contrato actual = "+pEP3+" €/kWh" +"\n" ;
         this.sMensajes = this.sMensajes + "Precio en Energía en P3 Simulado (contrato anterior) = "+pEP3s+" €/kWh" +"\n \n" ; 
         this.sMensajes = this.sMensajes + "Impuesto eléctrico = "+impuesto_electrico+"\n \n" ;  
         this.sMensajes = this.sMensajes + "Precio en Potencia en P1 Actual = "+pPP1+" €/kWh" +"\n" ;
         this.sMensajes = this.sMensajes + "Precio en Potencia en P1 Simulado = "+pPP1s+" €/kWh" +"\n \n" ;   
         this.sMensajes = this.sMensajes + "Precio en Potencia en P2 Actual = "+pPP2+" €/kWh" +"\n" ;
         this.sMensajes = this.sMensajes + "Precio en Potencia en P2 Simulado = "+pPP2s+" €/kWh" +"\n \n" ;
         this.sMensajes = this.sMensajes + "Precio en Potencia en P3 Actual = "+pPP3+" €/kWh" +"\n" ;
         this.sMensajes = this.sMensajes + "Precio en Potencia en P3 Simulado = "+pPP3s+" €/kWh" +"\n \n" ;
         this.sMensajes = this.sMensajes + "Ahorro acumulado  = "+formatoImporte.format(ahorro_acumulado)+"\n \n" ; 
         this.sMensajes = this.sMensajes + "............................... CÁLCULOS ................................."+"\n" ;
         this.sMensajes = this.sMensajes + "Coste con tarifa actual   -> (impuesto_electrico * ((eEP1 * pEP1) + (eEP2 * pEP2) + (eEP3 * pEP3) ) + (dias * pPP1 * pPC1 ) + (dias * pPP2 * pPC2 ) +( dias * pPP3 * pPC3 )))= \n"+formatoImporte.format(coste_actual) +"\n" ;
         this.sMensajes = this.sMensajes + "Coste con tarifa simulada -> (impuesto_electrico * ((eEP1 * pEP1s) + (eEP2 * pEP2s) + (eEP3 * pEP3s) ) + (dias * pPP1s * pPC1s ) + (dias * pPP2s * pPC2s ) +( dias * pPP3s * pPC3s )))= \n"+formatoImporte.format(coste_simulado) +"\n" ;
         this.sMensajes = this.sMensajes + "Coste total de la factura después de impuestos. -> (coste_actual_DI    = impuesto_iva * coste_actual)= \n"+formatoImporte.format(coste_actual_DI) +"\n \n" ;
         this.sMensajes = this.sMensajes + "Ahorro en el consumo de energía = \n"+formatoImporte.format(aE) +"\n" ;
         this.sMensajes = this.sMensajes + "Ahorro en potencia contratada = \n"+formatoImporte.format(aP) +"\n" ;
         this.sMensajes = this.sMensajes + "Ahorro total Energia + Potencia (con impuesto eléctrico)= \n"+formatoImporte.format(ahorro) +"\n" ;
         this.sMensajes = this.sMensajes + "Ahorro acumulado total = \n"+formatoImporte.format(ahorro_total) +"\n" ;
         this.sMensajes = this.sMensajes + "Porcentaje de ahorro = \n"+formatoPorcentaje.format(porcentaje) +"\n" ;
     }
      // .......................................................................    
     // .......................................................................................................................................  
     // .....................................           CALCULO DE AHORRO     DE TARIFA 3.0A  a TARIFA 3.0A INDX (CASO 11)
            
     // .......................................................................
     
      
     if ( this.tipo_Act == 10 && this.tipo_Sim== 5) {
         System.out.println("ESTAMOS EN  CALCULO DE AHORRO DE TARIFA 3.0A a TARIFA 3.0A indx") ;
         
         eEP1 = Double.parseDouble(energiaP1.getText());                                                    // Energía consumida en P1
         eEP2 = Double.parseDouble(energiaP2.getText());                                                    // Energía consumida en P2
         eEP3 = Double.parseDouble(energiaP3.getText());                                                    // Energía consumida en P3
         
         eEP = eEP1 + eEP2 + eEP3 ;   jTextField75.setText(String.valueOf(eEP));     // Energía de peaje    
         
         eEP1s= Double.parseDouble(energiaP1s.getText());                                                    // Energía simulada consumida en P1
         eEP2s= Double.parseDouble(energiaP2s.getText());                                                    // Energía simulada consumida en P2
         eEP3s= Double.parseDouble(energiaP3s.getText());                                                    // Energía simulada consumida en P3
       
         eEPs= eEP1s + eEP2s + eEP3s ;   jTextField124.setText(String.valueOf(eEPs));                        // Energía de peaje simulada
         
         
         pPC1 = Double.parseDouble(jTextField19.getText());                                                 // Potencia contratada en P1 Actual
         psPC1 = Double.parseDouble(jTextField26.getText());                                                // Potencia contratada en P1 Simulada
         
         pPC2 = Double.parseDouble(jTextField35.getText());                                                 // Potencia contratada en P2 Actual
         psPC2 = Double.parseDouble(jTextField37.getText());                                                // Potencia contratada en P2 Simulada
         
         pPC3 = Double.parseDouble(jTextField36.getText());                                                 // Potencia contratada en P3 Actual
         psPC3 = Double.parseDouble(jTextField38.getText());                                                // Potencia contratada en P3 Simulada
         
         // ..................................................................                              POTENCIA A FACTURAR
         
         P1M = Double.parseDouble(jTextField77.getText());                                                 // Potencia de maximetro P1
         P2M = Double.parseDouble(jTextField78.getText());                                                 // Potencia de maximetro P2
         P3M = Double.parseDouble(jTextField79.getText());                                                 // Potencia de maximetro P3
         
         PR  = Double.parseDouble(jTextField85.getText());                                                 // Penalización de reactiva
         
         // ..................................................................
         
         pBonificacion = Double.parseDouble(jTextField126.getText());                                        // Bonficación en IE por ejemplo
         
         
         // ..................................................................                              COMPENSACIÓN DE REACTIVA
         costeReactivaSim = 0 ;
         if (jCheckBox1.isSelected() && diasCond>0) {
           
            cosfiP1 = Double.parseDouble(jTextField118.getText());                                            // cos fi P1
            cosfiP2 = Double.parseDouble(jTextField120.getText());                                            // cos fi P1
            
            eRSP1   = (Math.tan(Math.acos(cosfiP1)) * eEP1) - 0.33 * eEP1 ;                                 // KVAr P1 simulada 
            eRSP2   = (Math.tan(Math.acos(cosfiP2)) * eEP2) - 0.33 * eEP2 ;                                 // KVAr P2 simulada
            
            if (eRSP1 < 0) eRSP1 = 0 ;
            if (eRSP2 < 0) eRSP2 = 0 ;
            
            seRSP1 = formatoNumero.format(eRSP1); System.out.println(String.valueOf(Math.tan(Math.acos(cosfiP1))));
            seRSP2 = formatoNumero.format(eRSP2);
            
            costeReactivaSim = (eRSP1 * costeReactiva) + (eRSP2 * costeReactiva) ; sCRS = formatoImporte.format(costeReactivaSim);
            
            
            jTextField121.setText(String.valueOf(redondear(eRSP1,2))) ;
            jTextField122.setText(String.valueOf(redondear(eRSP2,2))) ;
            jTextField123.setText(sCRS) ;
            
         }
         
        // ..................................................................
        if (this.fPotenciaFacturada == 0) {                                      // Si se factura por maximetro, aplicamos cálculos formulas 
        if ( jCheckBox5.isSelected()) fReglaPotenciaActual=0 ; else fReglaPotenciaActual=1; 
        if (fReglaPotenciaActual == 1 ) {                                                                     // Si la compañia aplica regla de potencia

                if ((P1M/pPC1)>= 1.05 ) {   PF1a =  P1M + 2 * ( P1M - 1.05 * pPC1); } else {                   // Potencia a facturar P1 actual
                if ((P1M/pPC1)>= 0.85 )   { PF1a =  P1M ;                                } else {
                                            PF1a = 0.85 * pPC1 ;
                } }  

                if ((P2M/pPC2)>= 1.05 ) {   PF2a =  P2M + 2 * ( P2M - 1.05 * pPC2); } else {                   // Potencia a facturar P2 actual
                if((P2M/pPC2)>= 0.85 )   {  PF2a =  P2M ;                                 } else {    
                                            PF2a = 0.85 * pPC2 ;
                }}

                if ((P3M/pPC3)>= 1.05 ) {   PF3a =  P3M + 2 * ( P3M - 1.05 * pPC3); } else {                   // Potencia a facturar P3 actual
                if ((P3M/pPC3)>= 0.85 )   { PF3a =  P3M ;                                } else {        
                                            PF3a = 0.85 * pPC3 ;
                }}
            } else {
                                        PF1a = pPC1 ; PF2a = pPC2 ; PF3a = pPC3 ;
            }
         // ...................................................................
                                                                            // Si no se asigna directamente la potencia facturada.
        } else {
            System.out.println("-> Voy a utilizar las potencias tal cual aparecen en la factura... ¡Aviso!");
            PF1a = P1M ;
            PF2a = P2M ;
            PF3a = P3M ;
        }
        
        
        if ( jCheckBox6.isSelected()) fReglaPotenciaSimulado=0 ; else fReglaPotenciaSimulado=1; 
         if (fReglaPotenciaSimulado == 1 ) {    
         if ((P1M/psPC1)>= 1.05 ) {  PF1s =  P1M + 2 * ( P1M - 1.05 * psPC1); } else {                   // Potencia a facturar P1 simulada
         if ((P1M/psPC1)>= 0.85 )   {PF1s =  P1M ;                                  } else {   
                                    PF1s = 0.85 * psPC1 ;
        }   }
        
        if ((P2M/psPC2)>= 1.05 ) {   PF2s =  P2M + 2 * ( P2M - 1.05 * psPC2); } else {                   // Potencia a facturar P2 simulada
        if ((P2M/psPC2)>= 0.85 )    {PF2s =  P2M ;                            } else {    
                                     PF2s = 0.85 * psPC2 ;
        }}
        
        if ((P3M/psPC3)>= 1.05 ) {   PF3s =  P3M + 2 * ( P3M - 1.05 * psPC3); } else {                   // Potencia a facturar P3 simulada
        if ((P3M/psPC3)>= 0.85 )   { PF3s =  P3M ;                                  } else {        
                                     PF3s = 0.85 * psPC3 ;
        }}
        } else {
                                    PF1s = psPC1 ; PF2s = psPC2 ; PF3s = psPC3 ;
        } 
         
        // ..................................................................  
        
        PF1a = redondear(PF1a,2);
        PF2a = redondear(PF2a,2);
        PF3a = redondear(PF3a,2); 
        PF1s = redondear(PF1s,2);
        PF2s = redondear(PF2s,2);
        PF3s = redondear(PF3s,2);
         
         
         // .................................................................. 
           
        jTextField106.setText(String.valueOf(PF1a));                                  // Potencia a facturar P1 actual 
        jTextField107.setText(String.valueOf(PF2a));                                  // Potencia a facturar P2 actual
        jTextField108.setText(String.valueOf(PF3a));                                  // Potencia a facturar P3 actual
        jTextField113.setText(String.valueOf(PF1s));                                  // Potencia a facturar P1 simulada 
        jTextField114.setText(String.valueOf(PF2s));                                  // Potencia a facturar P2 simulada
        jTextField115.setText(String.valueOf(PF3s));                                  // Potencia a facturar P3 simulada
        
        
        
         // .................................................................. 
         pEP1  = Double.parseDouble(lCondicionesActuales[indice][14]) ;                                     // Precio en Energía en P1 con contrato actual
         pEP1s = Double.parseDouble(lCondicionesSimulacion[indice][14]) ;                                   // Precio en Energía en P1 Simulado (contrato anterior)
         
         pEP2  = Double.parseDouble(lCondicionesActuales[indice][15]) ;                                     // Precio en Energía en P2 con contrato actual
         pEP2s  = Double.parseDouble(lCondicionesSimulacion[indice][15]) ;                                  // Precio en Energía en P2 con contrato simulado
         
         pEP3  = Double.parseDouble(lCondicionesActuales[indice][16]) ;                                     // Precio en Energía en P3 con contrato actual
         pEP3s  = Double.parseDouble(lCondicionesSimulacion[indice][16]) ;                                  // Precio en Energía en P3 con contrato simulado
         
         pEPa   = Double.parseDouble(jTextField73.getText());                                               // Precio de energía de peaje ACTUAL
          
         pPP1  = Double.parseDouble(lCondicionesActuales[indice][8]) ;                                      // Precio en Potencia en P1 Actual
         pPP1s = Double.parseDouble(lCondicionesSimulacion[indice][8]) ;                                    // Precio en Potencia en P1 Simulado
         
         pPP2  = Double.parseDouble(lCondicionesActuales[indice][9]) ;                                      // Precio en Potencia en P2 Actual
         pPP2s = Double.parseDouble(lCondicionesSimulacion[indice][9]) ;                                    // Precio en Potencia en P2 Simulado
         
         pPP3  = Double.parseDouble(lCondicionesActuales[indice][10]) ;                                      // Precio en Potencia en P3 Actual
         pPP3s = Double.parseDouble(lCondicionesSimulacion[indice][10]) ;                                    // Precio en Potencia en P3 Simulado
                                            
        
          // .........................................................................
         
         if (this.fEnergiaSimulada == 0) {                                                                   // Si no se han hecho mejoras de ahorro...
            
             aEP1 = (eEP1 * (pEP1s-pEP1))  ;                                                                     // Ahorro en el consumo de energía P1
             aEP2 = (eEP2 * (pEP2s-pEP2))  ;                                                                     // Ahorro en el consumo de energía P2
             aEP3 = (eEP3 * (pEP3s-pEP3))  ;                                                                     // Ahorro en el consumo de energía P3
             aE   = aEP1 + aEP2 + aEP3 + (eEP * (pEPs-pEPa)) ;       
         } else {                                                                                            // Sino hay que utilar una energía simulada
            aEP1 = (eEP1s * pEP1s ) - ( pEP1 * eEP1)  ;                                                       // Ahorro en el consumo de energía P1
            aEP2 = (eEP2s * pEP2s ) - ( pEP2 * eEP2)  ;                                                       // Ahorro en el consumo de energía P2
            aEP3 = (eEP3s * pEP3s ) - ( pEP3 * eEP3)  ;                                                       // Ahorro en el consumo de energía P3  
            aE   = aEP1 + aEP2 + aEP3 - (eEP * pEPa) ;       
             
         }
         
         // .........................................................................
         
         aPP1 = (PF1s * dias * pPP1s) - (PF1a * dias * pPP1) ;                                             // Ahorro en potencia contratada P1
         aPP2 = (PF2s * dias * pPP2s) - (PF2a * dias * pPP2) ;                                             // Ahorro en potencia contratada P2
         aPP3 = (PF3s * dias * pPP3s) - (PF3a * dias * pPP3) ;                                             // Ahorro en potencia contratada P3
         
         aP   = aPP1+aPP2+aPP3 ;
         
         ahorro = pBonificacion + (impuesto_electrico * ((aE + aP) + costeReactivaSim)) ;                   // Ahorro total Energia + Potencia
         
         ahorro_total = ahorro_total + ahorro ;                                                             // Ahorro acumulado total
         
         coste_actual   = (eEP1 * pEP1) + (PF1a * dias * pPP1 )  ;                                          // Coste con tarifa actual 
         coste_actual  += (eEP2 * pEP2) + (PF2a * dias * pPP2 )  ;
         coste_actual  += (eEP3 * pEP3) + (PF3a * dias * pPP3 )  ;
         coste_actual  += (eEP * pEPa) ;
         
          // ...................................................................
         if (this.fEnergiaSimulada == 0) {                                                                   // Si no se han hecho mejoras de ahorro...
        
            coste_simulado =  (eEP1 * pEP1s) + (PF1s * dias * pPP1s ) ;                                       // Coste con tarifa simulada
            coste_simulado += (eEP2 * pEP2s) + (PF2s * dias * pPP2s ) ;
            coste_simulado += (eEP3 * pEP3s) + (PF3s * dias * pPP3s ) ;
            coste_simulado += costeReactivaSim ;
                              
         } else {
            coste_simulado =  (eEP1s * pEP1s) + (PF1s * dias * pPP1s ) ;                                       // Coste con tarifa simulada
            coste_simulado += (eEP2s * pEP2s) + (PF2s * dias * pPP2s ) ;
            coste_simulado += (eEP3s * pEP3s) + (PF3s * dias * pPP3s ) ;
            coste_simulado += costeReactivaSim ;
         //   coste_simulado += (eEPs * pEPs) ;
             
         }
         
         // ...................................................................
        
         coste_actual_DI    = impuesto_electrico * impuesto_iva * coste_actual ;                                                 // Coste total de la factura después de impuestos.
         
         porcentaje       = 1 - ( coste_actual / coste_simulado ) ;                                         // Porcentaje de ahorro
         // ...................................................................                             // CONTROL DE RESULTADO FINAL DE LA FACTURA
         pBIC    = impuesto_electrico * (coste_actual + PR) + pAlquiler -  pBonificacion;                  // Precio base de factura calculado
         System.out.println("impuesto_electrico * (coste_actual + PR) + pAlquiler -  pBonificacion ->"+impuesto_electrico+" * ("+coste_actual+" + "+PR+") + "+pAlquiler+" -  "+pBonificacion);
         spBIC   = formatoImporte.format(pBIC);
         pBIC    =Math.rint(pBIC*100)/100 ;
         if ( pBIC == pBIF) { 
              jTextField82.setText(spBIC);
              jTextField82.setBackground(Color.green);
              jTextField80.setBackground(new Color(0xCCFFCC)); 
              jTextField81.setBackground(new Color(0xCCFFCC)); 
             
         } else {                                                                       // Error de cálculo. No coinciden
              jTextField82.setText(spBIC);
              jTextField82.setBackground(Color.red);     
              jTextField80.setBackground(Color.orange); 
              jTextField81.setBackground(Color.orange); 
         }
         // ...................................................................
         sAhorro         = formatoImporte.format(ahorro);
         sCoste_Actual   = formatoImporte.format(coste_actual);
         sCoste_Simulado = formatoImporte.format(coste_simulado);
         sAhorro_Total   = formatoImporte.format(ahorro_total);
         sPorcentaje     = formatoPorcentaje.format(porcentaje);
         
         diasOptimizado  = diasOptimizado + dias ;
         jTextField40.setText(String.valueOf(diasOptimizado));    
              
         jTextField30.setText(sAhorro);
         jTextField15.setText(sCoste_Actual);
         jTextField27.setText(sCoste_Simulado);
         jTextField5.setText(sAhorro_Total);         
         jTextField9.setText(String.valueOf(dias));
         jTextField47.setText(sPorcentaje);
         
         jTextField41.setText(String.valueOf(coste_actual));           // guardamos en campo oculto coste_actual_AI
         jTextField42.setText(String.valueOf(coste_actual_DI));        // guardamos en campo oculto coste_actual_DI
         jTextField43.setText(String.valueOf(ahorro));                 // guardamos en campo oculto ahorro
         jTextField44.setText(String.valueOf(ahorro_total));           // guardamos en campo oculto ahorro total
         jTextField45.setText(String.valueOf(coste_simulado));         // guardamos en campo oculto coste_simulado_AI
         jTextField46.setText(String.valueOf(porcentaje));              // guardamos en campo oculto porcentaje
         
         this.sMensajes = FramePrincipal.sMensajes + "............................... DATOS DE PARTIDA................................."+"\n" ;
         this.sMensajes = this.sMensajes + "Energía consumida en P1 = "+formatoNumero.format(eEP1)+" kWh" +"\n" ;
         this.sMensajes = this.sMensajes + "Energía consumida en P2 = "+formatoNumero.format(eEP2)+" kWh" +"\n" ;
         this.sMensajes = this.sMensajes + "Energía consumida en P3 = "+formatoNumero.format(eEP3)+" kWh" +"\n" ;
         
          if (this.fEnergiaSimulada == 1) {    
            this.sMensajes = this.sMensajes + "Energía consumida en P1 SIMULADA = "+formatoNumero.format(eEP1s)+" kWh" +"\n" ;
            this.sMensajes = this.sMensajes + "Energía consumida en P2 SIMULADA = "+formatoNumero.format(eEP2s)+" kWh" +"\n" ;
            this.sMensajes = this.sMensajes + "Energía consumida en P3 SIMULADA = "+formatoNumero.format(eEP3s)+" kWh" +"\n" ;
          }
         
         this.sMensajes = this.sMensajes + "Potencia contratada actual P1= "+formatoNumero.format(pPC1)+" kW" +"\n" ;
         this.sMensajes = this.sMensajes + "Potencia contratada simulada P1= "+formatoNumero.format(psPC1)+" kW" +"\n" ;
         this.sMensajes = this.sMensajes + "Potencia contratada actual P2= "+formatoNumero.format(pPC2)+" kW" +"\n" ;
         this.sMensajes = this.sMensajes + "Potencia contratada simulada P2= "+formatoNumero.format(psPC2)+" kW" +"\n" ;
         this.sMensajes = this.sMensajes + "Potencia contratada actual P3= "+formatoNumero.format(pPC3)+" kW" +"\n" ;
         this.sMensajes = this.sMensajes + "Potencia contratada simulada P3= "+formatoNumero.format(psPC3)+" kW" +"\n" ;
         
         this.sMensajes = this.sMensajes + "Potencia de maximetro en P1= "+formatoNumero.format(P1M)+" kW" +"\n" ;
         this.sMensajes = this.sMensajes + "Potencia de maximetro en P2= "+formatoNumero.format(P2M)+" kW" +"\n" ;
         this.sMensajes = this.sMensajes + "Potencia de maximetro en P3= "+formatoNumero.format(P3M)+" kW" +"\n" ;
         
         this.sMensajes = this.sMensajes + "Potencia a facturar en P1 ACTUAL= "+formatoNumero.format(PF1a)+" kW" +"\n" ;
         this.sMensajes = this.sMensajes + "Potencia a facturar en P2 ACTUAL= "+formatoNumero.format(PF2a)+" kW" +"\n" ;
         this.sMensajes = this.sMensajes + "Potencia a facturar en P3 ACTUAL= "+formatoNumero.format(PF3a)+" kW" +"\n" ;
         
         this.sMensajes = this.sMensajes + "Potencia a facturar en P1 SIMULADA= "+formatoNumero.format(PF1s)+" kW" +"\n" ;
         this.sMensajes = this.sMensajes + "Potencia a facturar en P2 SIMULADA= "+formatoNumero.format(PF2s)+" kW" +"\n" ;
         this.sMensajes = this.sMensajes + "Potencia a facturar en P3 SIMULADA= "+formatoNumero.format(PF3s)+" kW" +"\n" ;
         
         this.sMensajes = this.sMensajes + "Precio en Energía en P1 con contrato actual = "+pEP1+" €/kWh" +"\n" ;
         this.sMensajes = this.sMensajes + "Precio en Energía en P1 Simulado (contrato anterior) = "+pEP1s+" €/kWh" +"\n \n" ; 
         this.sMensajes = this.sMensajes + "Precio en Energía en P2 con contrato actual = "+pEP2+" €/kWh" +"\n" ;
         this.sMensajes = this.sMensajes + "Precio en Energía en P2 Simulado (contrato anterior) = "+pEP2s+" €/kWh" +"\n \n" ; 
         this.sMensajes = this.sMensajes + "Precio en Energía en P3 con contrato actual = "+pEP3+" €/kWh" +"\n" ;
         this.sMensajes = this.sMensajes + "Precio en Energía en P3 Simulado (contrato anterior) = "+pEP3s+" €/kWh" +"\n \n" ; 
         this.sMensajes = this.sMensajes + "Impuesto eléctrico = "+impuesto_electrico+"\n \n" ;  
         this.sMensajes = this.sMensajes + "Precio en Potencia en P1 Actual = "+pPP1+" €/kWh" +"\n" ;
         this.sMensajes = this.sMensajes + "Precio en Potencia en P1 Simulado = "+pPP1s+" €/kWh" +"\n \n" ;   
         this.sMensajes = this.sMensajes + "Precio en Potencia en P2 Actual = "+pPP2+" €/kWh" +"\n" ;
         this.sMensajes = this.sMensajes + "Precio en Potencia en P2 Simulado = "+pPP2s+" €/kWh" +"\n \n" ;
         this.sMensajes = this.sMensajes + "Precio en Potencia en P3 Actual = "+pPP3+" €/kWh" +"\n" ;
         this.sMensajes = this.sMensajes + "Precio en Potencia en P3 Simulado = "+pPP3s+" €/kWh" +"\n \n" ;
         this.sMensajes = this.sMensajes + "Ahorro acumulado  = "+formatoImporte.format(ahorro_acumulado)+"\n \n" ; 
         this.sMensajes = this.sMensajes + "............................... CÁLCULOS ................................."+"\n" ;
         this.sMensajes = this.sMensajes + "Coste con tarifa actual   -> (((eEP1 * pEP1) + (eEP2 * pEP2) + (eEP3 * pEP3) ) + (dias * pPP1 * pPC1 ) + (dias * pPP2 * pPC2 ) +( dias * pPP3 * pPC3 )))= \n"+formatoImporte.format(coste_actual) +"\n" ;
         this.sMensajes = this.sMensajes + "Coste con tarifa simulada -> (((eEP1 * pEP1s) + (eEP2 * pEP2s) + (eEP3 * pEP3s) ) + (dias * pPP1s * pPC1s ) + (dias * pPP2s * pPC2s ) +( dias * pPP3s * pPC3s )))= \n"+formatoImporte.format(coste_simulado) +"\n" ;
         this.sMensajes = this.sMensajes + "Coste total de la factura después de impuestos. -> (coste_actual_DI    = impuesto_iva * coste_actual)= \n"+formatoImporte.format(coste_actual_DI) +"\n \n" ;
         this.sMensajes = this.sMensajes + "Ahorro en el consumo de energía = \n"+formatoImporte.format(aE) +"\n" ;
         this.sMensajes = this.sMensajes + "Ahorro en potencia contratada = \n"+formatoImporte.format(aP) +"\n" ;
         this.sMensajes = this.sMensajes + "Ahorro total Energia + Potencia (con impuesto eléctrico)= \n"+formatoImporte.format(ahorro) +"\n" ;
         this.sMensajes = this.sMensajes + "Ahorro acumulado total = \n"+formatoImporte.format(ahorro_total) +"\n" ;
         this.sMensajes = this.sMensajes + "Porcentaje de ahorro = \n"+formatoPorcentaje.format(porcentaje) +"\n" ;
     }
     // .......................................................................................................................................  
     // .....................................           CALCULO DE AHORRO     DE TARIFA 2.0A a TARIFA 2.0A INDX o DE TARIFA 2.1A a TARIFA 2.1A INDX
     //                                                                       o DE TARIFA 2.1A a TARIFA 2.0A INDX       
     // .......................................................................
     if ( (this.tipo_Act == 11 && this.tipo_Sim== 1) || (this.tipo_Act == 12 && this.tipo_Sim== 3) || (this.tipo_Act == 11 && this.tipo_Sim== 3)) {
         
         eEP1 = Double.parseDouble(energiaP1.getText());                                 // Energía consumida en P1
         
         pEP1  = Double.parseDouble(lCondicionesActuales[indice][14]) ;                  // Precio en Energía en P1 con contrato actual
         pEP1s = Double.parseDouble(lCondicionesSimulacion[indice][14]) ;                // Precio en Energía en P1 Simulado (contrato anterior)
         pEP   = Double.parseDouble(jTextField73.getText());                             // Precio en Energía de Peaje
        
         
         pPP1  = Double.parseDouble(lCondicionesActuales[indice][8]) ;                   // Precio en Potencia en P1 Actual
         pPP1s = Double.parseDouble(lCondicionesSimulacion[indice][8]) ;                 // Precio en Potencia en P1 Simulado
        
         psPC1 = Double.parseDouble(jTextField26.getText());                             // Potencia contratada en P1 Simulada
         
          // ..................................................................                              POTENCIA A FACTURAR
         
         P1M = Double.parseDouble(jTextField77.getText());                                                 // Potencia de maximetro P1
         P2M = Double.parseDouble(jTextField78.getText());                                                 // Potencia de maximetro P2

        // ..................................................................
        if (this.fPotenciaFacturada == 0) {                                      // Si se factura por maximetro, aplicamos cálculos formulas
         
            pPC1 = Double.parseDouble(jTextField19.getText());                              // Potencia contratada en P1 Actual
            System.out.println("-> Si se factura por maximetro, aplicamos cálculos potencias de contrato");
        // ...................................................................
                                                                            // Si no se asigna directamente la potencia facturada.
        } else {
            System.out.println("-> Voy a utilizar las potencias tal cual aparecen en la factura... ¡Aviso!");
            pPC1 = P1M ;                    
        }
        
         // .................................................................. 
         
        jTextField106.setText(String.valueOf(pPC1));                                  // Potencia a facturar P1 actual 
       
        jTextField113.setText(String.valueOf(psPC1));                                  // Potencia a facturar P1 simulada 
       
        // ..................................................................
        
         
         
         
         
         
         aEP1 = (eEP1 * (pEP1s-pEP1) -(pEP * eEP1) ) ;                                  // Ahorro en el consumo de energía
         aPP1 = (dias * ((psPC1*pPP1s)-(pPC1*pPP1)) ) ;                                 // Ahorro en potencia contratada
         
         
         ahorro = impuesto_electrico * (aEP1 + aPP1) ;                                  // Ahorro total Energia + Potencia
        
         ahorro_total = ahorro_total + ahorro ;                                         // Ahorro acumulado total
         
         coste_actual   = ((eEP1 * pEP1) + (dias * pPP1 * pPC1) + (pEP * eEP1)) ;       // Coste con tarifa actual
         
         coste_simulado = impuesto_electrico * ((eEP1 * pEP1s) + (dias * pPP1s * psPC1)) ;     // Coste con tarifa simulada
         
         coste_actual_DI    = impuesto_iva * coste_actual ;                             // Coste total de la factura después de impuestos.
         
         porcentaje       = 1 - ( coste_actual / coste_simulado ) ;                     // Porcentaje de ahorro
         
         // ...................................................................         // CONTROL DE RESULTADO FINAL DE LA FACTURA
         pBIC    = impuesto_electrico * (coste_actual) + pAlquiler ;                                         // Precio base de factura calculado
         
         spBIC   = formatoImporte.format(pBIC);
         pBIC    =Math.rint(pBIC*100)/100 ;
         if ( pBIC == pBIF) { 
              jTextField82.setText(spBIC);
              jTextField82.setBackground(Color.green);
              jTextField80.setBackground(new Color(0xCCFFCC)); 
              jTextField81.setBackground(new Color(0xCCFFCC)); 
             
         } else {                                                                       // Error de cálculo. No coinciden
              jTextField82.setText(spBIC);
              jTextField82.setBackground(Color.red);     
              jTextField80.setBackground(Color.orange); 
              jTextField81.setBackground(Color.orange); 
         }
         // ...................................................................
         sAhorro         = formatoImporte.format(ahorro);
         sCoste_Actual   = formatoImporte.format(coste_actual);
         sCoste_Simulado = formatoImporte.format(coste_simulado);
         sAhorro_Total   = formatoImporte.format(ahorro_total);
         sPorcentaje      = formatoPorcentaje.format(porcentaje);
         
         diasOptimizado  = diasOptimizado + dias ;
         jTextField40.setText(String.valueOf(diasOptimizado));     
         jTextField30.setText(sAhorro);
         jTextField15.setText(sCoste_Actual);
         jTextField27.setText(sCoste_Simulado);
         jTextField5.setText(sAhorro_Total);         
         jTextField9.setText(String.valueOf(dias));
         jTextField47.setText(sPorcentaje);
         
         
         jTextField41.setText(String.valueOf(coste_actual));           // guardamos en campo oculto coste_actual_AI
         jTextField42.setText(String.valueOf(coste_actual_DI));        // guardamos en campo oculto coste_actual_DI
         jTextField43.setText(String.valueOf(ahorro));                 // guardamos en campo oculto ahorro
         jTextField44.setText(String.valueOf(ahorro_total));           // guardamos en campo oculto ahorro total
         jTextField45.setText(String.valueOf(coste_simulado));         // guardamos en campo oculto coste_simulado_AI
         jTextField46.setText(String.valueOf(porcentaje));              // guardamos en campo oculto porcentaje
         
         this.sMensajes = FramePrincipal.sMensajes + "............................... DATOS DE PARTIDA................................."+"\n" ;
         this.sMensajes = this.sMensajes + "Energía consumida en P1 (eEP1)= "+formatoNumero.format(eEP1)+" kWh" +"\n" ;
         this.sMensajes = this.sMensajes + "Energía de Peaje (eEP1)= "+formatoNumero.format(eEP1)+" kWh" +"\n" ;
         this.sMensajes = this.sMensajes + "Precio en Energía en P1 con contrato actual (pEP1)= "+pEP1+" €/kWh" +"\n" ;
         this.sMensajes = this.sMensajes + "Precio en Energía en P1 Simulado (contrato anterior) (pEP1s)= "+pEP1s+" €/kWh" +"\n \n" ;    
         this.sMensajes = this.sMensajes + "Potencia contratada actual P1= "+formatoNumero.format(pPC1)+" kW" +"\n" ;
         this.sMensajes = this.sMensajes + "Potencia contratada simulada P1= "+formatoNumero.format(psPC1)+" kW" +"\n" ;
         this.sMensajes = this.sMensajes + "Precio de Energia de Peaje con contrato actual = "+pEP+" €/kWh" +"\n" ;
         
         this.sMensajes = this.sMensajes + "Impuesto eléctrico = "+impuesto_electrico+"\n \n" ;   
         this.sMensajes = this.sMensajes + "Precio en Potencia en P1 Actual = "+pPP1+" €/kWh" +"\n" ;
         this.sMensajes = this.sMensajes + "Precio en Potencia en P1 Simulado = "+pPP1s+" €/kWh" +"\n \n" ;
         this.sMensajes = this.sMensajes + "Ahorro acumulado  = "+formatoImporte.format(ahorro_acumulado)+"\n \n" ;
         this.sMensajes = this.sMensajes + "............................... CÁLCULOS ................................."+"\n" ;
         this.sMensajes = this.sMensajes + "Coste con tarifa actual  ->(impuesto_electrico * ((eEP1 * pEP1)  + (pEP * eEP1) + (dias * pPP1 *pPC1))= \n"+formatoImporte.format(coste_actual) +"\n" ;
         this.sMensajes = this.sMensajes + "Coste con tarifa simulada -> (impuesto_electrico * ((eEP1 * pEP1) + (dias * pPP1 *pPC1 )))= \n"+formatoImporte.format(coste_simulado) +"\n" ;
         this.sMensajes = this.sMensajes + "Coste total de la factura después de impuestos. -> (coste_actual_DI    = impuesto_iva * coste_actual)= \n"+formatoImporte.format(coste_actual_DI) +"\n \n" ;
         this.sMensajes = this.sMensajes + "Ahorro en el consumo de energía = \n"+formatoImporte.format(aEP1) +"\n" ;
         this.sMensajes = this.sMensajes + "Ahorro en potencia contratada = \n"+formatoImporte.format(aPP1) +"\n" ;
         this.sMensajes = this.sMensajes + "Ahorro total Energia + Potencia (con impuesto eléctrico)= \n"+formatoImporte.format(ahorro) +"\n" ;
         this.sMensajes = this.sMensajes + "Ahorro acumulado total = \n"+formatoImporte.format(ahorro_total) +"\n" ;
         this.sMensajes = this.sMensajes + "Porcentaje de ahorro = \n"+formatoPorcentaje.format(porcentaje) +"\n" ;
     }
       // .......................................................................    
     // .......................................................................................................................................  
     // .....................................           CALCULO DE AHORRO     DE TARIFA 2.0DHA a TARIFA 2.0DHA INDEXADO
            
     // .......................................................................
      if ( this.tipo_Act == 8 && this.tipo_Sim== 2) {
         System.out.println("ESTAMOS EN  CALCULO DE AHORRO     DE TARIFA 2.0DHA Indexado a TARIFA 2.0A") ;
         eEP1 = Double.parseDouble(energiaP1.getText());                                                    // Energía consumida en P1
         eEP2 = Double.parseDouble(energiaP2.getText());                                                    // Energía consumida en P2
        
         eEP = eEP1 + eEP2 ;   jTextField75.setText(String.valueOf(eEP));                                   // Energía de peaje                                                               // Energía de peaje
         
         pPC1 = Double.parseDouble(jTextField19.getText());                                                 // Potencia contratada en P1 Actual
         psPC1 = Double.parseDouble(jTextField26.getText());                                                // Potencia contratada en P1 Simulada
         
         pEP1  = Double.parseDouble(lCondicionesActuales[indice][14]) ;                                     // Precio en Energía en P1 con contrato actual
         pEP1s = Double.parseDouble(lCondicionesSimulacion[indice][14]) ;                                   // Precio en Energía en P1 Simulado (contrato anterior)
         pEP2  = Double.parseDouble(lCondicionesActuales[indice][15]) ;                                     // Precio en Energía en P2 con contrato actual
         pEP   = Double.parseDouble(jTextField73.getText());                                                // Precio en Energía de Peaje
         
         pPP1  = Double.parseDouble(lCondicionesActuales[indice][8]) ;                                      // Precio en Potencia en P1 Actual
         pPP1s = Double.parseDouble(lCondicionesSimulacion[indice][8]) ;                                    // Precio en Potencia en P1 Simulado
                                            
        // ..................................................................                              POTENCIA A FACTURAR
         
         P1M = Double.parseDouble(jTextField77.getText());                                                 // Potencia de maximetro P1
         P2M = Double.parseDouble(jTextField78.getText());                                                 // Potencia de maximetro P2
                
         
         aEP1 = (eEP1 * (pEP1s-pEP1)) + ( eEP2 * (pEP1s-pEP2)) - (eEP * pEP) ;                              // Ahorro en el consumo de energía
         aPP1 = (psPC1 * dias * pPP1s) - (pPC1 * dias * pPP1) ;                                             // Ahorro en potencia contratada
         
         ahorro = impuesto_electrico * (aEP1 + aPP1) ;                                                      // Ahorro total Energia + Potencia
         
         ahorro_total = ahorro_total + ahorro ;                                                             // Ahorro acumulado total
         
         coste_actual   = ((eEP1 * pEP1) + (pPC1 * dias * pPP1 ) + (eEP2 * pEP2) + (eEP * pEP) ) ;          // Coste con tarifa actual
        
         coste_simulado = ((eEP1 * pEP1s) + (psPC1 * dias * pPP1s ) + (eEP2 * pEP1s)) ;                             // Coste con tarifa simulada
         
         coste_actual_DI    = impuesto_electrico * impuesto_iva * coste_actual ;                                                 // Coste total de la factura después de impuestos.
         
         porcentaje       = 1 - ( coste_actual / coste_simulado ) ;                                         // Porcentaje de ahorro
         // ...................................................................         // CONTROL DE RESULTADO FINAL DE LA FACTURA
        pBIC    = impuesto_electrico * (coste_actual + PR) + pAlquiler ;                                         // Precio base de factura calculado
        spBIC   = formatoImporte.format(pBIC);
        pBIC    =Math.rint(pBIC*100)/100 ; 
         if ( pBIC == pBIF) { 
              jTextField82.setText(spBIC);
              jTextField82.setBackground(Color.green);
              jTextField80.setBackground(new Color(0xCCFFCC)); 
              jTextField81.setBackground(new Color(0xCCFFCC));  
             
         } else {                                                                       // Error de cálculo. No coinciden
              jTextField82.setText(spBIC);
              jTextField82.setBackground(Color.red);     
              jTextField80.setBackground(Color.orange); 
              jTextField81.setBackground(Color.orange); 
         }
         // ...................................................................
         sAhorro         = formatoImporte.format(ahorro);
         sCoste_Actual   = formatoImporte.format(coste_actual);
         sCoste_Simulado = formatoImporte.format(coste_simulado);
         sAhorro_Total   = formatoImporte.format(ahorro_total);
         sPorcentaje      = formatoPorcentaje.format(porcentaje);
         
         diasOptimizado  = diasOptimizado + dias ;
         jTextField40.setText(String.valueOf(diasOptimizado));    
              
         jTextField30.setText(sAhorro);
         jTextField15.setText(sCoste_Actual);
         jTextField27.setText(sCoste_Simulado);
         jTextField5.setText(sAhorro_Total);         
         jTextField9.setText(String.valueOf(dias));
         jTextField47.setText(sPorcentaje);
         
         jTextField41.setText(String.valueOf(coste_actual));           // guardamos en campo oculto coste_actual_AI
         jTextField42.setText(String.valueOf(coste_actual_DI));        // guardamos en campo oculto coste_actual_DI
         jTextField43.setText(String.valueOf(ahorro));                 // guardamos en campo oculto ahorro
         jTextField44.setText(String.valueOf(ahorro_total));           // guardamos en campo oculto ahorro total
         jTextField45.setText(String.valueOf(coste_simulado));         // guardamos en campo oculto coste_simulado_AI
         jTextField46.setText(String.valueOf(porcentaje));              // guardamos en campo oculto porcentaje
         
         
         
         this.sMensajes = FramePrincipal.sMensajes + "............................... DATOS DE PARTIDA................................."+"\n" ;
         this.sMensajes = this.sMensajes + "Energía consumida en P1 = "+formatoNumero.format(eEP1)+" kWh" +"\n" ;
         this.sMensajes = this.sMensajes + "Energía consumida en P2 = "+formatoNumero.format(eEP2)+" kWh" +"\n" ;
         this.sMensajes = this.sMensajes + "Energía de Peaje = "+formatoNumero.format(eEP)+" kWh" +"\n" ;
         this.sMensajes = this.sMensajes + "Potencia contratada actual P1-P2= "+formatoNumero.format(pPC1)+" kW" +"\n" ;       
         this.sMensajes = this.sMensajes + "Potencia contratada simulada P1 = "+formatoNumero.format(psPC1)+" kW" +"\n" ;
         this.sMensajes = this.sMensajes + "Precio en Energía en P1 con contrato actual = "+pEP1+" €/kWh" +"\n" ;
         this.sMensajes = this.sMensajes + "Precio en Energía en P1 Simulado (contrato anterior) = "+pEP1s+" €/kWh" +"\n \n" ; 
         this.sMensajes = this.sMensajes + "Precio en Energía en P2 con contrato actual = "+pEP2+" €/kWh" +"\n" ;
         this.sMensajes = this.sMensajes + "Precio en Energía en P2 Simulado (contrato anterior) = "+pEP1s+" €/kWh" +"\n \n" ; 
         this.sMensajes = this.sMensajes + "Precio en Energía en Energia de Peaje con contrato actual = "+pEP+" €/kWh" +"\n" ;
         this.sMensajes = this.sMensajes + "Impuesto eléctrico = "+impuesto_electrico+"\n \n" ;  
         this.sMensajes = this.sMensajes + "Precio en Potencia en P1-P2 Actual = "+pPP1+" €/kWh" +"\n" ;
         this.sMensajes = this.sMensajes + "Precio en Potencia en P1 Simulado = "+pPP1s+" €/kWh" +"\n \n" ;         
         this.sMensajes = this.sMensajes + "Ahorro acumulado  = "+formatoImporte.format(ahorro_acumulado)+"\n \n" ; 
         this.sMensajes = this.sMensajes + "............................... CÁLCULOS ................................."+"\n" ;
         
         this.sMensajes = this.sMensajes + "Coste Enegia de peaje ->(eEP * pEP)= \n"+formatoImporte.format(eEP * pEP) +"\n" ;
         
         this.sMensajes = this.sMensajes + "Coste con tarifa actual  ->(impuesto_electrico * ((eEP1 * pEP1) + (dias * pPP1 ) + (eEP2 * pEP2) +  (eEP * pEP)))= \n"+formatoImporte.format(coste_actual) +"\n" ;
         this.sMensajes = this.sMensajes + "Coste con tarifa simulada -> (impuesto_electrico * ((eEP1 * pEP1s) + (dias * pPP1s ) + (eEP2 * pEP1s)))= \n"+formatoImporte.format(coste_simulado) +"\n" ;
         this.sMensajes = this.sMensajes + "Coste total de la factura después de impuestos. -> (coste_actual_DI    = impuesto_iva * coste_actual)= \n"+formatoImporte.format(coste_actual_DI) +"\n \n" ;
         this.sMensajes = this.sMensajes + "Ahorro en el consumo de energía = \n"+formatoImporte.format(aEP1) +"\n" ;
         this.sMensajes = this.sMensajes + "Ahorro en potencia contratada = \n"+formatoImporte.format(aPP1) +"\n" ;
         this.sMensajes = this.sMensajes + "Ahorro total Energia + Potencia (con impuesto eléctrico)= \n"+formatoImporte.format(ahorro) +"\n" ;
         this.sMensajes = this.sMensajes + "Ahorro acumulado total = \n"+formatoImporte.format(ahorro_total) +"\n" ;
         this.sMensajes = this.sMensajes + "Porcentaje de ahorro = \n"+formatoPorcentaje.format(porcentaje) +"\n" ;
     }
       // .......................................................................    
     // .......................................................................................................................................  
     // .....................................           CALCULO DE AHORRO     DE TARIFA 2.1A  a TARIFA 3.0A INDX
            
     // .......................................................................
     
      
     if ( this.tipo_Act == 10 && this.tipo_Sim== 3 ) {
         System.out.println("ESTAMOS EN  CALCULO DE AHORRO DE TARIFA 2.1A  a TARIFA 3.0A INDX") ;
         
         eEP1 = Double.parseDouble(energiaP1.getText());                                                    // Energía consumida en P1
         eEP2 = Double.parseDouble(energiaP2.getText());                                                    // Energía consumida en P2
         eEP3 = Double.parseDouble(energiaP3.getText());                                                    // Energía consumida en P3
         
         eEP = eEP1 + eEP2 + eEP3 ;   jTextField75.setText(String.valueOf(eEP));     // Energía de peaje 
         
         eEP1s= Double.parseDouble(energiaP1s.getText());                                                    // Energía simulada consumida en P1
         eEP2s= Double.parseDouble(energiaP2s.getText());                                                    // Energía simulada consumida en P2
         eEP3s= Double.parseDouble(energiaP3s.getText());                                                    // Energía simulada consumida en P3
       
         eEPs= eEP1s + eEP2s + eEP3s ;   jTextField124.setText(String.valueOf(eEPs));                        // Energía de peaje simulada
         
         
         pPC1 = Double.parseDouble(jTextField19.getText());                                                 // Potencia contratada en P1 Actual
         psPC1 = Double.parseDouble(jTextField26.getText());                                                // Potencia contratada en P1 Simulada
         
         pPC2 = Double.parseDouble(jTextField35.getText());                                                 // Potencia contratada en P2 Actual
        
         
         pPC3 = Double.parseDouble(jTextField36.getText());                                                 // Potencia contratada en P3 Actual
         
         
         // ..................................................................                              POTENCIA A FACTURAR
         
         P1M = Double.parseDouble(jTextField77.getText());                                                 // Potencia de maximetro P1
         P2M = Double.parseDouble(jTextField78.getText());                                                 // Potencia de maximetro P2
         P3M = Double.parseDouble(jTextField79.getText());                                                 // Potencia de maximetro P3
         
         PR  = Double.parseDouble(jTextField85.getText());                                                 // Penalización de reactiva
         
         // ..................................................................                              COMPENSACIÓN DE REACTIVA
         costeReactivaSim = 0 ;
         
         jTextField121.setText("0");
         jTextField122.setText("0");
         jTextField123.setText("0") ;
         
         if (jCheckBox1.isSelected()) {
           
            cosfiP1 = Double.parseDouble(jTextField118.getText());                                            // cos fi P1
            cosfiP2 = Double.parseDouble(jTextField120.getText());                                            // cos fi P1
            
            eRSP1   = (Math.tan(Math.acos(cosfiP1)) * eEP1) - 0.33 * eEP1 ;                                 // KVAr P1 simulada 
            eRSP2   = (Math.tan(Math.acos(cosfiP2)) * eEP2) - 0.33 * eEP2 ;                                 // KVAr P2 simulada
            
            if (eRSP1 < 0) eRSP1 = 0 ;
            if (eRSP2 < 0) eRSP2 = 0 ;
            
            seRSP1 = formatoNumero.format(eRSP1); System.out.println(String.valueOf(Math.tan(Math.acos(cosfiP1))));
            seRSP2 = formatoNumero.format(eRSP2);
            
            costeReactivaSim = (eRSP1 * costeReactiva) + (eRSP2 * costeReactiva) ; sCRS = formatoImporte.format(costeReactivaSim);
            
            
            jTextField121.setText(String.valueOf(redondear(eRSP1,2))) ;
            jTextField122.setText(String.valueOf(redondear(eRSP2,2))) ;
            jTextField123.setText(sCRS) ;
            
         }
         
        // ..................................................................
        if (this.fPotenciaFacturada == 0) {                                      // Si se factura por maximetro, aplicamos cálculos formulas  
        if (fReglaPotenciaActual == 1 ) {                                                                     // Si la compañia aplica regla de potencia
         
        if ((P1M/pPC1)>= 1.05 ) {   PF1a =  P1M + 2 * ( P1M - 1.05 * pPC1); } else {                   // Potencia a facturar P1 actual
        if ((P1M/pPC1)>= 0.85 )   { PF1a =  P1M ;                                } else {
                                    PF1a = 0.85 * pPC1 ;
        } }  
        
        if ((P2M/pPC2)>= 1.05 ) {   PF2a =  P2M + 2 * ( P2M - 1.05 * pPC2); } else {                   // Potencia a facturar P2 actual
        if((P2M/pPC2)>= 0.85 )   {  PF2a =  P2M ;                                 } else {    
                                    PF2a = 0.85 * pPC2 ;
        }}
        
        if ((P3M/pPC3)>= 1.05 ) {   PF3a =  P3M + 2 * ( P3M - 1.05 * pPC3); } else {                   // Potencia a facturar P3 actual
        if ((P3M/pPC3)>= 0.85 )   { PF3a =  P3M ;                                } else {        
                                    PF3a = 0.85 * pPC3 ;
        }}
        } else {
                                    PF1a = pPC1 ; PF2a = pPC2 ; PF3a = pPC3 ;
        }
            // ...................................................................
                                                                            // Si no se asigna directamente la potencia facturada.
        } else {
            System.out.println("-> Voy a utilizar las potencias tal cual aparecen en la factura... ¡Aviso!");
            PF1a = P1M ;
            PF2a = P2M ;
            PF3a = P3M ;
        }
        
        
        
                                    PF1s =  psPC1 ;
        
        
         // .................................................................. 
           
        jTextField106.setText(String.valueOf(PF1a));                                  // Potencia a facturar P1 actual 
        jTextField107.setText(String.valueOf(PF2a));                                  // Potencia a facturar P2 actual
        jTextField108.setText(String.valueOf(PF3a));                                  // Potencia a facturar P3 actual
        jTextField113.setText(String.valueOf(PF1s));                                  // Potencia a facturar P1 simulada 
        jTextField114.setText("0"); 
        jTextField115.setText("0"); 
        
         // .................................................................. 
         pEP1  = Double.parseDouble(lCondicionesActuales[indice][14]) ;                                     // Precio en Energía en P1 con contrato actual
         pEP1s = Double.parseDouble(lCondicionesSimulacion[indice][14]) ;                                   // Precio en Energía en P1 Simulado (contrato anterior)
         
         pEP2  = Double.parseDouble(lCondicionesActuales[indice][15]) ;                                     // Precio en Energía en P2 con contrato actual
        
         pEP3  = Double.parseDouble(lCondicionesActuales[indice][16]) ;                                     // Precio en Energía en P3 con contrato actual
         
         pEPa   = Double.parseDouble(jTextField73.getText());                                               // Precio de energía de peaje ACTUAL
          
         pPP1  = Double.parseDouble(lCondicionesActuales[indice][8]) ;                                      // Precio en Potencia en P1 Actual
         pPP1s = Double.parseDouble(lCondicionesSimulacion[indice][8]) ;                                    // Precio en Potencia en P1 Simulado
         
         pPP2  = Double.parseDouble(lCondicionesActuales[indice][9]) ;                                      // Precio en Potencia en P2 Actual
         
         pPP3  = Double.parseDouble(lCondicionesActuales[indice][10]) ;                                      // Precio en Potencia en P3 Actual
                                  
         
          // .........................................................................
         
         if (this.fEnergiaSimulada == 0) {                                                                   // Si no se han hecho mejoras de ahorro...
            
            aEP1 = (eEP1 * (pEP1s-pEP1))  ;                                                                     // Ahorro en el consumo de energía P1
            aEP2 = (eEP2 * (pEP1s-pEP2))  ;                                                                     // Ahorro en el consumo de energía P2
            aEP3 = (eEP3 * (pEP1s-pEP3))  ;                                                                     // Ahorro en el consumo de energía P3
            aE   = aEP1 + aEP2 + aEP3 - (eEP * pEPa); System.out.println("aE="+aE);
            
         } else {                                                                                            // Sino hay que utilar una energía simulada
            aEP1 = (eEP1s * pEP1s ) - ( pEP1 * eEP1)  ;                                                       // Ahorro en el consumo de energía P1
            aEP2 = (eEP2s * pEP1s ) - ( pEP2 * eEP2)  ;                                                       // Ahorro en el consumo de energía P2
            aEP3 = (eEP3s * pEP1s ) - ( pEP3 * eEP3)  ;                                                       // Ahorro en el consumo de energía P3  
            aE   = aEP1 + aEP2 + aEP3 - (eEP * pEPa) ;       
             
         }         
                  
      
         aPP1 = (PF1s * dias * pPP1s) - (PF1a * dias * pPP1) - (PF2a * dias * pPP2) - (PF3a * dias * pPP3) ; // Ahorro en potencia contratada P1
      
         
         aP   = aPP1 ; System.out.println("aP="+aP);
         
         ahorro = impuesto_electrico * ((aE + aP) - PR ) + (psAlquiler - pAlquiler) ;                                                // Ahorro total Energia + Potencia - Penalización Reactiva
         
         ahorro_total = ahorro_total + ahorro ;                                                             // Ahorro acumulado total
         
         coste_actual   = (eEP1 * pEP1) + (PF1a * dias * pPP1 )  ;                                          // Coste con tarifa actual 
         coste_actual  += (eEP2 * pEP2) + (PF2a * dias * pPP2 )  ;
         coste_actual  += (eEP3 * pEP3) + (PF3a * dias * pPP3 )  ;
         coste_actual  += (eEP * pEPa)  + PR ;
         
         
          // ...................................................................
         if (this.fEnergiaSimulada == 0) {                                                                   // Si no se han hecho mejoras de ahorro...
        
            coste_simulado =  (eEP1 * pEP1s) + (PF1s * dias * pPP1s ) ;                                       // Coste con tarifa simulada
            coste_simulado += (eEP2 * pEP1s) ;
            coste_simulado += (eEP3 * pEP1s) ;
            coste_simulado -= (PR) ;
                              
         } else {
            coste_simulado =  (eEP1s * pEP1s) + (PF1s * dias * pPP1s ) ;                                       // Coste con tarifa simulada
            coste_simulado += (eEP2s * pEP1s)  ;
            coste_simulado += (eEP3s * pEP1s)  ;
            coste_simulado += costeReactivaSim ;
         //   coste_simulado += (eEPs * pEPs) ;
             
         }
         
        
                         
         coste_actual_DI    = impuesto_electrico * impuesto_iva * coste_actual ;                           // Coste total de la factura después de impuestos.
         
         porcentaje       = 1 - ( coste_actual / coste_simulado ) ;                                         // Porcentaje de ahorro
         // ...................................................................         // CONTROL DE RESULTADO FINAL DE LA FACTURA
         pBIC    = impuesto_electrico * (coste_actual ) + pAlquiler ;                                         // Precio base de factura calculado
         spBIC   = formatoImporte.format(pBIC);
         pBIC    =Math.rint(pBIC*100)/100 ;
       
         if ( pBIC == pBIF) { 
              jTextField82.setText(spBIC);
              jTextField82.setBackground(Color.green);
              jTextField80.setBackground(new Color(0xCCFFCC)); 
              jTextField81.setBackground(new Color(0xCCFFCC)); 
             
         } else {                                                                       // Error de cálculo. No coinciden
              jTextField82.setText(spBIC);
              jTextField82.setBackground(Color.red);     
              jTextField80.setBackground(Color.orange); 
              jTextField81.setBackground(Color.orange); 
         }
         // ...................................................................
      
         sAhorro         = formatoImporte.format(ahorro);
         sCoste_Actual   = formatoImporte.format(coste_actual);
         sCoste_Simulado = formatoImporte.format(coste_simulado);
         sAhorro_Total   = formatoImporte.format(ahorro_total);
         sPorcentaje     = formatoPorcentaje.format(porcentaje);
         
         diasOptimizado  = diasOptimizado + dias ;
         jTextField40.setText(String.valueOf(diasOptimizado));    
              
         jTextField30.setText(sAhorro);
         jTextField15.setText(sCoste_Actual);
         jTextField27.setText(sCoste_Simulado);
         jTextField5.setText(sAhorro_Total);         
         jTextField9.setText(String.valueOf(dias));
         jTextField47.setText(sPorcentaje);
         
         jTextField41.setText(String.valueOf(coste_actual));           // guardamos en campo oculto coste_actual_AI
         jTextField42.setText(String.valueOf(coste_actual_DI));        // guardamos en campo oculto coste_actual_DI
         jTextField43.setText(String.valueOf(ahorro));                 // guardamos en campo oculto ahorro
         jTextField44.setText(String.valueOf(ahorro_total));           // guardamos en campo oculto ahorro total
         jTextField45.setText(String.valueOf(coste_simulado));         // guardamos en campo oculto coste_simulado_AI
         jTextField46.setText(String.valueOf(porcentaje));              // guardamos en campo oculto porcentaje
         
         this.sMensajes = FramePrincipal.sMensajes + "............................... DATOS DE PARTIDA................................."+"\n" ;
         this.sMensajes = this.sMensajes + "Energía consumida en P1 = "+formatoNumero.format(eEP1)+" kWh" +"\n" ;
         this.sMensajes = this.sMensajes + "Energía consumida en P2 = "+formatoNumero.format(eEP2)+" kWh" +"\n" ;
         this.sMensajes = this.sMensajes + "Energía consumida en P3 = "+formatoNumero.format(eEP3)+" kWh" +"\n" ;
         this.sMensajes = this.sMensajes + "Potencia contratada actual P1= "+formatoNumero.format(pPC1)+" kW" +"\n" ;
         this.sMensajes = this.sMensajes + "Potencia contratada simulada P1= "+formatoNumero.format(psPC1)+" kW" +"\n" ;
         this.sMensajes = this.sMensajes + "Potencia contratada actual P2= "+formatoNumero.format(pPC2)+" kW" +"\n" ;
        
         this.sMensajes = this.sMensajes + "Potencia contratada actual P3= "+formatoNumero.format(pPC3)+" kW" +"\n" ;
        
        if (this.fEnergiaSimulada == 1) {    
            this.sMensajes = this.sMensajes + "Energía consumida en P1 SIMULADA = "+formatoNumero.format(eEP1s)+" kWh" +"\n" ;
            this.sMensajes = this.sMensajes + "Energía consumida en P2 SIMULADA = "+formatoNumero.format(eEP2s)+" kWh" +"\n" ;
            this.sMensajes = this.sMensajes + "Energía consumida en P3 SIMULADA = "+formatoNumero.format(eEP3s)+" kWh" +"\n" ;
        }
         
         this.sMensajes = this.sMensajes + "Potencia de maximetro en P1= "+formatoNumero.format(P1M)+" kW" +"\n" ;
         this.sMensajes = this.sMensajes + "Potencia de maximetro en P2= "+formatoNumero.format(P2M)+" kW" +"\n" ;
         this.sMensajes = this.sMensajes + "Potencia de maximetro en P3= "+formatoNumero.format(P3M)+" kW" +"\n" ;
         
         this.sMensajes = this.sMensajes + "Potencia a facturar en P1 ACTUAL= "+formatoNumero.format(PF1a)+" kW" +"\n" ;
         this.sMensajes = this.sMensajes + "Potencia a facturar en P2 ACTUAL= "+formatoNumero.format(PF2a)+" kW" +"\n" ;
         this.sMensajes = this.sMensajes + "Potencia a facturar en P3 ACTUAL= "+formatoNumero.format(PF3a)+" kW" +"\n" ;
         
         this.sMensajes = this.sMensajes + "Potencia a facturar en P1 SIMULADA= "+formatoNumero.format(PF1s)+" kW" +"\n" ;
                
         this.sMensajes = this.sMensajes + "Precio en Energía en P1 con contrato actual = "+pEP1+" €/kWh" +"\n" ;
         this.sMensajes = this.sMensajes + "Precio en Energía en P1 Simulado (contrato anterior) = "+pEP1s+" €/kWh" +"\n \n" ; 
         this.sMensajes = this.sMensajes + "Precio en Energía en P2 con contrato actual = "+pEP2+" €/kWh" +"\n" ;
         this.sMensajes = this.sMensajes + "Precio en Energía en P2 Simulado (contrato anterior) = "+pEP1s+" €/kWh" +"\n \n" ; 
         this.sMensajes = this.sMensajes + "Precio en Energía en P3 con contrato actual = "+pEP3+" €/kWh" +"\n" ;
         this.sMensajes = this.sMensajes + "Precio en Energía en P3 Simulado (contrato anterior) = "+pEP1s+" €/kWh" +"\n \n" ; 
         this.sMensajes = this.sMensajes + "Precio en Energía de peaje con contrato actual = "+pEPa+" €/kWh" +"\n" ;
         this.sMensajes = this.sMensajes + "Penalización Reactiva con contrato actual = "+PR+" €" +"\n" ;
         this.sMensajes = this.sMensajes + "Impuesto eléctrico = "+impuesto_electrico+"\n \n" ;  
         this.sMensajes = this.sMensajes + "Precio en Potencia en P1 Actual = "+pPP1+" €/kWh" +"\n" ;
         this.sMensajes = this.sMensajes + "Precio en Potencia en P1 Simulado = "+pPP1s+" €/kWh" +"\n \n" ;   
         this.sMensajes = this.sMensajes + "Precio en Potencia en P2 Actual = "+pPP2+" €/kWh" +"\n" ;
        
         this.sMensajes = this.sMensajes + "Precio en Potencia en P3 Actual = "+pPP3+" €/kWh" +"\n" ;
       
         this.sMensajes = this.sMensajes + "Ahorro acumulado  = "+formatoImporte.format(ahorro_acumulado)+"\n \n" ; 
         this.sMensajes = this.sMensajes + "............................... CÁLCULOS ................................."+"\n" ;
         this.sMensajes = this.sMensajes + "Coste con tarifa actual   -> (impuesto_electrico * ((eEP1 * pEP1) + (eEP2 * pEP2) + (eEP3 * pEP3) ) + (eEP * pEPa) ) + (dias * pPP1 * pPC1 ) + (dias * pPP2 * pPC2 ) +( dias * pPP3 * pPC3 ))) + (PR)= \n"+formatoImporte.format(coste_actual) +"\n" ;
         this.sMensajes = this.sMensajes + "Coste con tarifa simulada -> (impuesto_electrico * ((eEP1 * pEP1s) + (eEP2 * pEP2s) + (eEP3 * pEP3s) ) + (dias * pPP1s * pPC1s ) + (dias * pPP2s * pPC2s ) +( dias * pPP3s * pPC3s )))= \n"+formatoImporte.format(coste_simulado) +"\n" ;
         this.sMensajes = this.sMensajes + "Coste total de la factura después de impuestos. -> (coste_actual_DI    = impuesto_iva * coste_actual)= \n"+formatoImporte.format(coste_actual_DI) +"\n \n" ;
         this.sMensajes = this.sMensajes + "Ahorro en el consumo de energía = \n"+formatoImporte.format(aE) +"\n" ;
         this.sMensajes = this.sMensajes + "Ahorro en potencia contratada = \n"+formatoImporte.format(aP) +"\n" ;
         this.sMensajes = this.sMensajes + "Ahorro total Energia + Potencia (con impuesto eléctrico)= \n"+formatoImporte.format(ahorro) +"\n" ;
         this.sMensajes = this.sMensajes + "Ahorro acumulado total = \n"+formatoImporte.format(ahorro_total) +"\n" ;
         this.sMensajes = this.sMensajes + "Porcentaje de ahorro = \n"+formatoPorcentaje.format(porcentaje) +"\n" ;
     }
     // .......................................................................    
     // .......................................................................................................................................  
     // .....................................           CALCULO DE AHORRO     DE TARIFA 3.1A INDX a TARIFA 3.1A INDX (CASO 19) (CASO 21) (CASO 18)
            
     // .......................................................................
     
      
     if ( this.tipo_Act == 13 && (this.tipo_Sim== 13 || this.tipo_Sim== 5 || this.tipo_Sim== 6)) {
         System.out.println("ESTAMOS EN  (CASO 19) (CASO 21) (CASO 18)") ;
         
         eEP1 = Double.parseDouble(energiaP1.getText());                                                    // Energía consumida en P1
         eEP2 = Double.parseDouble(energiaP2.getText());                                                    // Energía consumida en P2
         eEP3 = Double.parseDouble(energiaP3.getText());                                                    // Energía consumida en P3
         eEP = eEP1 + eEP2 + eEP3 ;   jTextField75.setText(String.valueOf(eEP));                            // Energía de peaje    
        
         // .....................................................
         
         eEP1s= Double.parseDouble(energiaP1s.getText());                                                    // Energía simulada consumida en P1
         eEP2s= Double.parseDouble(energiaP2s.getText());                                                    // Energía simulada consumida en P2
         eEP3s= Double.parseDouble(energiaP3s.getText());                                                    // Energía simulada consumida en P3
       
         eEPs= eEP1s + eEP2s + eEP3s ;   jTextField124.setText(String.valueOf(eEPs));                        // Energía de peaje simulada
         
         pPC1 = Double.parseDouble(jTextField19.getText());                                                 // Potencia contratada en P1 Actual
         psPC1 = Double.parseDouble(jTextField26.getText());                                                // Potencia contratada en P1 Simulada
         
         pPC2 = Double.parseDouble(jTextField35.getText());                                                 // Potencia contratada en P2 Actual
         psPC2 = Double.parseDouble(jTextField37.getText());                                                // Potencia contratada en P2 Simulada
         
         pPC3 = Double.parseDouble(jTextField36.getText());                                                 // Potencia contratada en P3 Actual
         psPC3 = Double.parseDouble(jTextField38.getText());                                                // Potencia contratada en P3 Simulada
         
         // ..................................................................
         
         pBonificacion = Double.parseDouble(jTextField126.getText());                                        // Bonficación en IE por ejemplo
         
         
          // ..................................................................                              COMPENSACIÓN DE REACTIVA
         costeReactivaSim = 0 ;
         if (jCheckBox1.isSelected() && diasCond>0 ) {
           
            cosfiP1 = Double.parseDouble(jTextField118.getText());                                            // cos fi P1
            cosfiP2 = Double.parseDouble(jTextField120.getText());                                            // cos fi P1
            
            eRSP1   = (Math.tan(Math.acos(cosfiP1)) * eEP1) - 0.33 * eEP1 ;                                 // KVAr P1 simulada 
            eRSP2   = (Math.tan(Math.acos(cosfiP2)) * eEP2) - 0.33 * eEP2 ;                                 // KVAr P2 simulada
            
            if (eRSP1 < 0) eRSP1 = 0 ;
            if (eRSP2 < 0) eRSP2 = 0 ;
            
            seRSP1 = formatoNumero.format(eRSP1); System.out.println(String.valueOf(Math.tan(Math.acos(cosfiP1))));
            seRSP2 = formatoNumero.format(eRSP2);
            
            costeReactivaSim = (eRSP1 * costeReactiva) + (eRSP2 * costeReactiva) ; sCRS = formatoImporte.format(costeReactivaSim);
            
            
            jTextField121.setText(String.valueOf(redondear(eRSP1,2))) ;
            jTextField122.setText(String.valueOf(redondear(eRSP2,2))) ;
            jTextField123.setText(sCRS) ;
            
         }
         
       
         
         // ..................................................................                              POTENCIA A FACTURAR
         
         P1M = Double.parseDouble(jTextField77.getText());                                                 // Potencia de maximetro P1
         P2M = Double.parseDouble(jTextField78.getText());                                                 // Potencia de maximetro P2
         P3M = Double.parseDouble(jTextField79.getText());                                                 // Potencia de maximetro P3
         
         PR  = Double.parseDouble(jTextField85.getText());                                                 // Penalización de reactiva
        
        if (this.fPotenciaFacturada == 0) {                                      // Si se factura por maximetro, aplicamos cálculos formulas  
            
        
        if ( jCheckBox5.isSelected()) fReglaPotenciaActual=0 ; else fReglaPotenciaActual=1; 
        if (fReglaPotenciaActual == 1 ) {                                                                     // Si la compañia aplica regla de potencia
         
        if ((P1M/pPC1)>= 1.05 ) {   PF1a = P1M + 2 * ( P1M - 1.05 * pPC1); } else {                   // Potencia a facturar P1 actual
        if ((P1M/pPC1)>= 0.85 )   { PF1a =  P1M ;                                } else {
                                    PF1a = 0.85 * pPC1 ;
        } }  
        
        if ((P2M/pPC2)>= 1.05 ) {   PF2a =  P2M + 2 * ( P2M - 1.05 * pPC2); } else {                   // Potencia a facturar P2 actual
        if((P2M/pPC2)>= 0.85 )   {  PF2a =  P2M ;                                 } else {    
                                    PF2a = 0.85 * pPC2 ;
        }}
        
        if ((P3M/pPC3)>= 1.05 ) {   PF3a =  P3M + 2 * ( P3M - 1.05 * pPC3); } else {                   // Potencia a facturar P3 actual
        if ((P3M/pPC3)>= 0.85 )   { PF3a =  P3M ;                                } else {        
                                    PF3a = 0.85 * pPC3 ;
        }}
        } else {
                                    PF1a = pPC1 ; PF2a = pPC2 ; PF3a = pPC3 ;
        }
             // ...................................................................
                                                                            // Si no se asigna directamente la potencia facturada.
        } else {
            System.out.println("-> Voy a utilizar las potencias tal cual aparecen en la factura... ¡Aviso!");
            PF1a = P1M ;
            PF2a = P2M ;
            PF3a = P3M ;
        }
        
       
        
        
        if ( jCheckBox6.isSelected()) fReglaPotenciaSimulado=0 ; else fReglaPotenciaSimulado=1; 
         if (fReglaPotenciaSimulado == 1 ) {    
         if ((P1M/psPC1)>= 1.05 ) {  PF1s =  P1M + 2 * ( P1M - 1.05 * psPC1); } else {                   // Potencia a facturar P1 simulada
         if ((P1M/psPC1)>= 0.85 )   {PF1s =  P1M ;                                  } else {   
                                    PF1s = 0.85 * psPC1 ;
        }   }
        
        if ((P2M/psPC2)>= 1.05 ) {   PF2s =  P2M + 2 * ( P2M - 1.05 * psPC2); } else {                   // Potencia a facturar P2 simulada
        if ((P2M/psPC2)>= 0.85 )    {PF2s =  P2M ;                                  } else {    
                                    PF2s = 0.85 * psPC2 ;
        }}
        
        if ((P3M/psPC3)>= 1.05 ) {   PF3s =  P3M + 2 * ( P3M - 1.05 * psPC3); } else {                   // Potencia a facturar P3 simulada
        if ((P3M/psPC3)>= 0.85 )   { PF3s =  P3M ;                                  } else {        
                                     PF3s = 0.85 * psPC3 ;
        }}
        } else {
                                    PF1s = psPC1 ; PF2s = psPC2 ; PF3s = psPC3 ;
        } 
        
         // ..................................................................  
        
        PF1a = redondear(PF1a,2);
        PF2a = redondear(PF2a,2);
        PF3a = redondear(PF3a,2); 
        PF1s = redondear(PF1s,2);
        PF2s = redondear(PF2s,2);
        PF3s = redondear(PF3s,2);
        
         // .................................................................. 
           
        jTextField106.setText(String.valueOf(PF1a));                                  // Potencia a facturar P1 actual 
        jTextField107.setText(String.valueOf(PF2a));                                  // Potencia a facturar P2 actual
        jTextField108.setText(String.valueOf(PF3a));                                  // Potencia a facturar P3 actual
        jTextField113.setText(String.valueOf(PF1s));                                  // Potencia a facturar P1 simulada 
        jTextField114.setText(String.valueOf(PF2s));                                  // Potencia a facturar P2 simulada
        jTextField115.setText(String.valueOf(PF3s));                                  // Potencia a facturar P3 simulada
        
         // .................................................................. 
         pEP1  = Double.parseDouble(lCondicionesActuales[indice][14]) ;                                     // Precio en Energía en P1 con contrato actual
         pEP1s = Double.parseDouble(lCondicionesSimulacion[indice][14]) ;                                   // Precio en Energía en P1 Simulado (contrato anterior)
         
         pEP2  = Double.parseDouble(lCondicionesActuales[indice][15]) ;                                     // Precio en Energía en P2 con contrato actual
         pEP2s  = Double.parseDouble(lCondicionesSimulacion[indice][15]) ;                                  // Precio en Energía en P2 con contrato simulado
         
         pEP3  = Double.parseDouble(lCondicionesActuales[indice][16]) ;                                     // Precio en Energía en P3 con contrato actual
         pEP3s  = Double.parseDouble(lCondicionesSimulacion[indice][16]) ;                                  // Precio en Energía en P3 con contrato simulado
         
         pEPa   = Double.parseDouble(jTextField73.getText());                                               // Precio de energía de peaje ACTUAL
         pEPs   = Double.parseDouble(jTextField74.getText());                                               // Precio de energía de peaje SIMULADO
         
         pPP1  = Double.parseDouble(lCondicionesActuales[indice][8]) ;                                      // Precio en Potencia en P1 Actual
         pPP1s = Double.parseDouble(lCondicionesSimulacion[indice][8]) ;                                    // Precio en Potencia en P1 Simulado
         
         pPP2  = Double.parseDouble(lCondicionesActuales[indice][9]) ;                                      // Precio en Potencia en P2 Actual
         pPP2s = Double.parseDouble(lCondicionesSimulacion[indice][9]) ;                                    // Precio en Potencia en P2 Simulado
         
         pPP3  = Double.parseDouble(lCondicionesActuales[indice][10]) ;                                      // Precio en Potencia en P3 Actual
         pPP3s = Double.parseDouble(lCondicionesSimulacion[indice][10]) ;                                    // Precio en Potencia en P3 Simulado
        
         // .........................................................................
         
         if (this.fEnergiaSimulada == 0) {                                                                   // Si no se han hecho mejoras de ahorro...
            
             aEP1 = (eEP1 * (pEP1s-pEP1))  ;                                                                     // Ahorro en el consumo de energía P1
             aEP2 = (eEP2 * (pEP2s-pEP2))  ;                                                                     // Ahorro en el consumo de energía P2
             aEP3 = (eEP3 * (pEP3s-pEP3))  ;                                                                     // Ahorro en el consumo de energía P3
             aE   = aEP1 + aEP2 + aEP3 + (eEP * (pEPs-pEPa));       
         } else {                                                                                            // Sino hay que utilar una energía simulada
            aEP1 = (eEP1s * pEP1s ) - ( pEP1 * eEP1)  ;                                                       // Ahorro en el consumo de energía P1
            aEP2 = (eEP2s * pEP2s ) - ( pEP2 * eEP2)  ;                                                       // Ahorro en el consumo de energía P2
            aEP3 = (eEP3s * pEP3s ) - ( pEP3 * eEP3)  ;                                                       // Ahorro en el consumo de energía P3  
            aE   = aEP1 + aEP2 + aEP3 + ((eEPs * pEPs) -(eEP * pEPa));       
             
         }
         
                                                      // Ahorro en energía
         
          // .........................................................................
                                                  // Precio en Energía de Peaje
         
        
        // aPP1 = (psPC1 * dias * pPP1s) - (pPC1 * dias * pPP1) ;                                          // Ahorro en potencia contratada P1
        // aPP2 = (psPC2 * dias * pPP2s) - (pPC2 * dias * pPP2) ;                                          // Ahorro en potencia contratada P2
        // aPP3 = (psPC3 * dias * pPP3s) - (pPC3 * dias * pPP3) ;                                          // Ahorro en potencia contratada P3
         
         aPP1 = (PF1s * dias * pPP1s) - (PF1a * dias * pPP1) ;                                             // Ahorro en potencia contratada P1
         aPP2 = (PF2s * dias * pPP2s) - (PF2a * dias * pPP2) ;                                             // Ahorro en potencia contratada P2
         aPP3 = (PF3s * dias * pPP3s) - (PF3a * dias * pPP3) ;                                             // Ahorro en potencia contratada P3
         
         aP   = aPP1+aPP2+aPP3 ;
         
         ahorro = pBonificacion + impuesto_electrico * ((aE + aP ) + costeReactivaSim );                                      // Ahorro total Energia + Potencia
         
         System.out.println("impuesto electrico="+impuesto_electrico) ;
         System.out.println("aP ="+aP) ;
         System.out.println("(aE + aP )="+aE + aP) ;
         
         
         ahorro_total = ahorro_total + ahorro ;                                                             // Ahorro acumulado total
         
         coste_actual   = (eEP1 * pEP1) + (PF1a * dias * pPP1 )  ;                                          // Coste con tarifa actual 
         coste_actual  += (eEP2 * pEP2) + (PF2a * dias * pPP2 )  ;
         coste_actual  += (eEP3 * pEP3) + (PF3a * dias * pPP3 )  ;
         coste_actual  += (eEP * pEPa) ;
         // ...................................................................
         if (this.fEnergiaSimulada == 0) {                                                                   // Si no se han hecho mejoras de ahorro...
        
            coste_simulado =  (eEP1 * pEP1s) + (PF1s * dias * pPP1s ) ;                                       // Coste con tarifa simulada
            coste_simulado += (eEP2 * pEP2s) + (PF2s * dias * pPP2s ) ;
            coste_simulado += (eEP3 * pEP3s) + (PF3s * dias * pPP3s ) ;
            coste_simulado += (eEP * pEPs) ;
         
         } else {
            coste_simulado =  (eEP1s * pEP1s) + (PF1s * dias * pPP1s ) ;                                       // Coste con tarifa simulada
            coste_simulado += (eEP2s * pEP2s) + (PF2s * dias * pPP2s ) ;
            coste_simulado += (eEP3s * pEP3s) + (PF3s * dias * pPP3s ) ;
            coste_simulado += (eEPs * pEPs) ;
             
         }
         
         coste_actual_DI    = impuesto_electrico * impuesto_iva * coste_actual ;                                                 // Coste total de la factura después de impuestos.
         
         porcentaje       = 1 - ( coste_actual / coste_simulado ) ;                                         // Porcentaje de ahorro
         // ...................................................................         // CONTROL DE RESULTADO FINAL DE LA FACTURA
         pBIC    = impuesto_electrico * (coste_actual + PR) + pAlquiler -  pBonificacion ;                                         // Precio base de factura calculado
         spBIC   = formatoImporte.format(pBIC);
         pBIC    =Math.rint(pBIC*100)/100 ;
         if ( pBIC == pBIF) { 
              jTextField82.setText(spBIC);
              jTextField82.setBackground(Color.green);
              jTextField80.setBackground(new Color(0xCCFFCC)); 
              jTextField81.setBackground(new Color(0xCCFFCC)); 
             
         } else {                                                                       // Error de cálculo. No coinciden
              jTextField82.setText(spBIC);
              jTextField82.setBackground(Color.red);     
              jTextField80.setBackground(Color.orange); 
              jTextField81.setBackground(Color.orange); 
         }
         // ...................................................................
         sAhorro         = formatoImporte.format(ahorro);
         sCoste_Actual   = formatoImporte.format(coste_actual);
         sCoste_Simulado = formatoImporte.format(coste_simulado);
         sAhorro_Total   = formatoImporte.format(ahorro_total);
         sPorcentaje     = formatoPorcentaje.format(porcentaje);
         
         diasOptimizado  = diasOptimizado + dias ;
         jTextField40.setText(String.valueOf(diasOptimizado));    
              
         jTextField30.setText(sAhorro);
         jTextField15.setText(sCoste_Actual);
         jTextField27.setText(sCoste_Simulado);
         jTextField5.setText(sAhorro_Total);         
         jTextField9.setText(String.valueOf(dias));
         jTextField47.setText(sPorcentaje);
         
         jTextField41.setText(String.valueOf(coste_actual));           // guardamos en campo oculto coste_actual_AI
         jTextField42.setText(String.valueOf(coste_actual_DI));        // guardamos en campo oculto coste_actual_DI
         jTextField43.setText(String.valueOf(ahorro));                 // guardamos en campo oculto ahorro
         jTextField44.setText(String.valueOf(ahorro_total));           // guardamos en campo oculto ahorro total
         jTextField45.setText(String.valueOf(coste_simulado));         // guardamos en campo oculto coste_simulado_AI
         jTextField46.setText(String.valueOf(porcentaje));              // guardamos en campo oculto porcentaje
         
         this.sMensajes = FramePrincipal.sMensajes + "............................... DATOS DE PARTIDA................................."+"\n" ;
         this.sMensajes = this.sMensajes + "Energía consumida en P1 = "+formatoNumero.format(eEP1)+" kWh" +"\n" ;
         this.sMensajes = this.sMensajes + "Energía consumida en P2 = "+formatoNumero.format(eEP2)+" kWh" +"\n" ;
         this.sMensajes = this.sMensajes + "Energía consumida en P3 = "+formatoNumero.format(eEP3)+" kWh" +"\n" ;
        
         if (this.fEnergiaSimulada == 1) {    
            this.sMensajes = this.sMensajes + "Energía consumida en P1 SIMULADA = "+formatoNumero.format(eEP1s)+" kWh" +"\n" ;
            this.sMensajes = this.sMensajes + "Energía consumida en P2 SIMULADA = "+formatoNumero.format(eEP2s)+" kWh" +"\n" ;
            this.sMensajes = this.sMensajes + "Energía consumida en P3 SIMULADA = "+formatoNumero.format(eEP3s)+" kWh" +"\n" ;
          }
         
         this.sMensajes = this.sMensajes + "Potencia contratada actual P1= "+formatoNumero.format(pPC1)+" kW" +"\n" ;
         this.sMensajes = this.sMensajes + "Potencia contratada simulada P1= "+formatoNumero.format(psPC1)+" kW" +"\n" ;
         this.sMensajes = this.sMensajes + "Potencia contratada actual P2= "+formatoNumero.format(pPC2)+" kW" +"\n" ;
         this.sMensajes = this.sMensajes + "Potencia contratada simulada P2= "+formatoNumero.format(psPC2)+" kW" +"\n" ;
         this.sMensajes = this.sMensajes + "Potencia contratada actual P3= "+formatoNumero.format(pPC3)+" kW" +"\n" ;
         this.sMensajes = this.sMensajes + "Potencia contratada simulada P3= "+formatoNumero.format(psPC3)+" kW" +"\n" ;
         
         this.sMensajes = this.sMensajes + "Potencia de maximetro en P1= "+formatoNumero.format(P1M)+" kW" +"\n" ;
         this.sMensajes = this.sMensajes + "Potencia de maximetro en P2= "+formatoNumero.format(P2M)+" kW" +"\n" ;
         this.sMensajes = this.sMensajes + "Potencia de maximetro en P3= "+formatoNumero.format(P3M)+" kW" +"\n" ;
         
         this.sMensajes = this.sMensajes + "Potencia a facturar en P1 ACTUAL= "+formatoNumero.format(PF1a)+" kW" +"\n" ;
         this.sMensajes = this.sMensajes + "Potencia a facturar en P2 ACTUAL= "+formatoNumero.format(PF2a)+" kW" +"\n" ;
         this.sMensajes = this.sMensajes + "Potencia a facturar en P3 ACTUAL= "+formatoNumero.format(PF3a)+" kW" +"\n" ;
         
         this.sMensajes = this.sMensajes + "Potencia a facturar en P1 SIMULADA= "+formatoNumero.format(PF1s)+" kW" +"\n" ;
         this.sMensajes = this.sMensajes + "Potencia a facturar en P2 SIMULADA= "+formatoNumero.format(PF2s)+" kW" +"\n" ;
         this.sMensajes = this.sMensajes + "Potencia a facturar en P3 SIMULADA= "+formatoNumero.format(PF3s)+" kW" +"\n" ;
         
         this.sMensajes = this.sMensajes + "Precio en Energía en P1 con contrato actual = "+pEP1+" €/kWh" +"\n" ;
         this.sMensajes = this.sMensajes + "Precio en Energía en P1 Simulado (contrato anterior) = "+pEP1s+" €/kWh" +"\n \n" ; 
         this.sMensajes = this.sMensajes + "Precio en Energía en P2 con contrato actual = "+pEP2+" €/kWh" +"\n" ;
         this.sMensajes = this.sMensajes + "Precio en Energía en P2 Simulado (contrato anterior) = "+pEP2s+" €/kWh" +"\n \n" ; 
         this.sMensajes = this.sMensajes + "Precio en Energía en P3 con contrato actual = "+pEP3+" €/kWh" +"\n" ;
         this.sMensajes = this.sMensajes + "Precio en Energía en P3 Simulado (contrato anterior) = "+pEP3s+" €/kWh" +"\n \n" ; 
         this.sMensajes = this.sMensajes + "Impuesto eléctrico = "+impuesto_electrico+"\n \n" ;  
         this.sMensajes = this.sMensajes + "Precio en Potencia en P1 Actual = "+pPP1+" €/kWh" +"\n" ;
         this.sMensajes = this.sMensajes + "Precio en Potencia en P1 Simulado = "+pPP1s+" €/kWh" +"\n \n" ;   
         this.sMensajes = this.sMensajes + "Precio en Potencia en P2 Actual = "+pPP2+" €/kWh" +"\n" ;
         this.sMensajes = this.sMensajes + "Precio en Potencia en P2 Simulado = "+pPP2s+" €/kWh" +"\n \n" ;
         this.sMensajes = this.sMensajes + "Precio en Potencia en P3 Actual = "+pPP3+" €/kWh" +"\n" ;
         this.sMensajes = this.sMensajes + "Precio en Potencia en P3 Simulado = "+pPP3s+" €/kWh" +"\n \n" ;
         this.sMensajes = this.sMensajes + "Ahorro acumulado  = "+formatoImporte.format(ahorro_acumulado)+"\n \n" ; 
         this.sMensajes = this.sMensajes + "............................... CÁLCULOS ................................."+"\n" ;
         this.sMensajes = this.sMensajes + "Coste con tarifa actual   -> (impuesto_electrico * ((eEP1 * pEP1) + (eEP2 * pEP2) + (eEP3 * pEP3) ) + (dias * pPP1 * pPC1 ) + (dias * pPP2 * pPC2 ) +( dias * pPP3 * pPC3 )))= \n"+formatoImporte.format(coste_actual) +"\n" ;
         this.sMensajes = this.sMensajes + "Coste con tarifa simulada -> (impuesto_electrico * ((eEP1 * pEP1s) + (eEP2 * pEP2s) + (eEP3 * pEP3s) ) + (dias * pPP1s * pPC1s ) + (dias * pPP2s * pPC2s ) +( dias * pPP3s * pPC3s )))= \n"+formatoImporte.format(coste_simulado) +"\n" ;
         this.sMensajes = this.sMensajes + "Coste total de la factura después de impuestos. -> (coste_actual_DI    = impuesto_iva * coste_actual)= \n"+formatoImporte.format(coste_actual_DI) +"\n \n" ;
         this.sMensajes = this.sMensajes + "Ahorro en el consumo de energía = \n"+formatoImporte.format(aE) +"\n" ;
         this.sMensajes = this.sMensajes + "Ahorro en potencia contratada = \n"+formatoImporte.format(aP) +"\n" ;
         this.sMensajes = this.sMensajes + "Ahorro total Energia + Potencia (con impuesto eléctrico)= \n"+formatoImporte.format(ahorro) +"\n" ;
         this.sMensajes = this.sMensajes + "Ahorro acumulado total = \n"+formatoImporte.format(ahorro_total) +"\n" ;
         this.sMensajes = this.sMensajes + "Porcentaje de ahorro = \n"+formatoPorcentaje.format(porcentaje) +"\n" ;
     }
 }
 // ------------------------------------------------------------------------------------------------------------------------
 public void insertarFilaAhorro() {
     String sqlStr,sFech1,sFech2,sFech3 ;
     Double importe_AI, importe_DI ;
     int estadoInsert=0, id_tF=0,id_tipo_actual, id_tipo_sim,id_cond_actuales, id_cond_sim  ;
     
       sFech1 = jTextField6.getText(); sFech1.trim();
       sFech1 = dateToMySQLDate(sFech1);       
       
       sFech2 = jTextField7.getText(); sFech2.trim();
       sFech2 = dateToMySQLDate(sFech2);    
       
       sFech3 = jTextField8.getText(); sFech3.trim();
       sFech3 = dateToMySQLDate(sFech3);    
     
       
       
                    
       importe_AI = Double.valueOf(jTextField41.getText());
       importe_DI = Double.valueOf(jTextField42.getText());
       
       saepDao misaepDao3 = new saepDao();
       saepDao misaepDao4 = new saepDao();
     
       // .....................................
       try {
        id_tipo_actual      = Integer.parseInt(this.lCondicionesActuales[this.indGen][22]) ;
        id_tipo_sim         = Integer.parseInt(this.lCondicionesSimulacion[this.indGen][22]) ;
        
        id_cond_actuales    = Integer.parseInt(this.lCondicionesActuales[this.indGen][21]) ;
        id_cond_sim         = Integer.parseInt(this.lCondicionesSimulacion[this.indGen][21]) ; 
        
       } catch (NumberFormatException e) {
           
            id_tipo_actual      = this.id_tipo_Actual;
            id_tipo_sim         = this.id_tipo_Sim ;
            
            this.lCondicionesActuales[this.indGen][22]      = Integer.toString(id_tipo_actual);
            this.lCondicionesSimulacion[this.indGen][22]    = Integer.toString(id_tipo_sim) ;
            
            id_cond_actuales    = Integer.parseInt(this.lCondicionesActuales[this.indGen][21]) ;
            id_cond_sim         = Integer.parseInt(this.lCondicionesSimulacion[this.indGen][21]) ;
                    
       }   
       // .....................................
       int resp=JOptionPane.showConfirmDialog(null,"¿Quieres validar e insertar la línea de Ahorro?");
       
       if (JOptionPane.OK_OPTION == resp){  
        
        // .......................................................................................................................................  
        // .....................................         INSERTA FILA  DE TARIFA 2.0A a TARIFA 2.0A
        
       if ( this.tipo_Act == 1 && this.tipo_Sim== 1) {                               // .................................   INSERTAMOS EN t_f_20a
          
            // .....................................
          
            sqlStr  ="INSERT INTO t_f20a (id_cliente,id_punto,p1_energia,p1_potencia,recargos,alquiler,p1_energia_simulada,fecha_factura,fecha_inicio,fecha_fin,importe_AI,importe_DI) VALUES (";
            sqlStr += this.id_cliente_actual+",";
            sqlStr += this.id_punto_actual+",";
            sqlStr += energiaP1.getText()+",";
            sqlStr += jTextField19.getText()+",";
            sqlStr += jTextField85.getText()+",";
            sqlStr += jTextField80.getText()+",";
            sqlStr += energiaP1s.getText()+",";
            sqlStr += "'"+sFech1+"',";
            sqlStr += "'"+sFech2+"',";
            sqlStr += "'"+sFech3+"',";            
            sqlStr += importe_AI+",";
            sqlStr += importe_DI+")";
            
            System.out.println(sqlStr);
            estadoInsert= misaepDao3.registrarFila(sqlStr);
            
            // .....................................
            if (estadoInsert==0){
                
                // .....................................                                consultamos el último id que se ha asignado
                
                sqlStr = "SELECT id FROM t_f20a ORDER BY id DESC LIMIT 1 ";
                
                estadoInsert= misaepDao3.ultimoIdentificador(sqlStr);
                
                id_tF               = misaepDao3.id ;
               
                
                // .....................................   
                
                if (estadoInsert==0){
                    
                     // .....................................                                actualizo el estado de la tabla de condiciones de facturacion

                     sqlStr = "UPDATE t_ahorros_historico SET fUltimCalc=0 WHERE id_punto="+this.id_punto_actual ;

                     estadoInsert= misaepDao3.registrarFila(sqlStr);
                    
                    // .....................................  
                  
                    
                    sqlStr  ="INSERT INTO t_ahorros_historico (id_cliente,id_punto,fecha,dias_facturacion_optimizada,ahorro_conseguido,ahorro_total,coste_actual," ;
                    sqlStr +="coste_simulado,porcentaje,id_factura,id_cond_actual,id_cond_sim,id_tipo_actual,fUltimCalc,id_tipo_sim) VALUES (" ;
                    
                    sqlStr += this.id_cliente_actual+",";                   // id cliente
                    sqlStr += this.id_punto_actual+",";                     // id punto
                    sqlStr += "'"+sFech1+"',";                              // fecha
                    sqlStr += jTextField40.getText()+",";                    // dias de facturacion
                    sqlStr += jTextField43.getText()+",";                   // ahorro conseguido
                    sqlStr += jTextField44.getText()+",";                   // ahorro total conseguido
                    sqlStr += importe_AI+",";                               // coste actual
                    sqlStr += jTextField45.getText()+",";                   // coste simulado
                    sqlStr += jTextField46.getText()+",";                   // porcentaje
                    sqlStr += id_tF+",";                                    // identificador de factura
                    sqlStr += id_cond_actuales+",";                         // identificador de condiciones actuales
                    sqlStr += id_cond_sim+",";                              // identificador de condiciones simuladas
                    sqlStr += this.tipo_Act+",";                            // tipo de condiciones actuales
                    sqlStr += "1,";                                          // tipo de condiciones actuales
                    sqlStr += id_tipo_sim+")";                              // tipo de condiciones simuladas

                    System.out.println(sqlStr);
                    estadoInsert= misaepDao4.registrarFila(sqlStr);
                    
                    
                } else {
                JOptionPane.showMessageDialog(null,
                                                     "\nError identificador factura no valido, revisa los datos de entrada por favor.",
                                                     "ADVERTENCIA!!!",JOptionPane.WARNING_MESSAGE);    
                }
                
                // .....................................
                
            }   else {
                JOptionPane.showMessageDialog(null,
                                                     "\nNo se ha realizado validación, error insertado en tabla histórico, revisa los datos de entrada por favor.",
                                                     "ADVERTENCIA!!!",JOptionPane.WARNING_MESSAGE);
                
            }       
            
            // .....................................
            
       }
        // .......................................................................................................................................  
        // .....................................         INSERTA FILA  DE TARIFA 2.1A a TARIFA 2.1A
        
       if ( this.tipo_Act == 3 && this.tipo_Sim== 3) {                               // .................................   INSERTAMOS EN t_f_20a
          
            // .....................................
          
            sqlStr  ="INSERT INTO t_f21a (id_cliente,id_punto,p1_energia,p1_potencia,recargos,alquiler,p1_energia_simulada,fecha_factura,fecha_inicio,fecha_fin,importe_AI,importe_DI) VALUES (";
            sqlStr += this.id_cliente_actual+",";
            sqlStr += this.id_punto_actual+",";
            sqlStr += energiaP1.getText()+",";
            sqlStr += jTextField19.getText()+",";
            sqlStr += jTextField85.getText()+",";
            sqlStr += jTextField80.getText()+",";
            sqlStr += energiaP1s.getText()+",";
            sqlStr += "'"+sFech1+"',";
            sqlStr += "'"+sFech2+"',";
            sqlStr += "'"+sFech3+"',";            
            sqlStr += importe_AI+",";
            sqlStr += importe_DI+")";
            
            System.out.println(sqlStr);
            estadoInsert= misaepDao3.registrarFila(sqlStr);
            
            // .....................................
            if (estadoInsert==0){
                
                // .....................................                                consultamos el último id que se ha asignado
                
                sqlStr = "SELECT id FROM t_f21a ORDER BY id DESC LIMIT 1 ";
                
                estadoInsert= misaepDao3.ultimoIdentificador(sqlStr);
                
                id_tF               = misaepDao3.id ;
               
                
                // .....................................   
                
                if (estadoInsert==0){
                    
                     // .....................................                                actualizo el estado de la tabla de condiciones de facturacion

                     sqlStr = "UPDATE t_ahorros_historico SET fUltimCalc=0 WHERE id_punto="+this.id_punto_actual ;

                     estadoInsert= misaepDao3.registrarFila(sqlStr);
                    
                    // .....................................  
                    
                    
                    sqlStr  ="INSERT INTO t_ahorros_historico (id_cliente,id_punto,fecha,dias_facturacion_optimizada,ahorro_conseguido,ahorro_total,coste_actual," ;
                    sqlStr +="coste_simulado,porcentaje,id_factura,id_cond_actual,id_cond_sim,id_tipo_actual,fUltimCalc,id_tipo_sim) VALUES (" ;
                    
                    sqlStr += this.id_cliente_actual+",";                   // id cliente
                    sqlStr += this.id_punto_actual+",";                     // id punto
                    sqlStr += "'"+sFech1+"',";                              // fecha
                    sqlStr += jTextField40.getText()+",";                    // dias de facturacion
                    sqlStr += jTextField43.getText()+",";                   // ahorro conseguido
                    sqlStr += jTextField44.getText()+",";                   // ahorro total conseguido
                    sqlStr += importe_AI+",";                               // coste actual
                    sqlStr += jTextField45.getText()+",";                   // coste simulado
                    sqlStr += jTextField46.getText()+",";                   // porcentaje
                    sqlStr += id_tF+",";                                    // identificador de factura
                    sqlStr += id_cond_actuales+",";                         // identificador de condiciones actuales
                    sqlStr += id_cond_sim+",";                              // identificador de condiciones simuladas
                    sqlStr += this.tipo_Act+",";                            // tipo de condiciones actuales
                    sqlStr += "1,";                                          // tipo de condiciones actuales
                    sqlStr += id_tipo_sim+")";                              // tipo de condiciones simuladas

                    System.out.println(sqlStr);
                    estadoInsert= misaepDao4.registrarFila(sqlStr);
                    
                    
                } else {
                JOptionPane.showMessageDialog(null,
                                                     "\nError identificador factura no valido, revisa los datos de entrada por favor.",
                                                     "ADVERTENCIA!!!",JOptionPane.WARNING_MESSAGE);    
                }
                
                // .....................................
                
            }   else {
                JOptionPane.showMessageDialog(null,
                                                     "\nNo se ha realizado validación, error insertado en tabla histórico, revisa los datos de entrada por favor.",
                                                     "ADVERTENCIA!!!",JOptionPane.WARNING_MESSAGE);
                
            }       
            
            // .....................................
            
       }   
            
            
      
     // .......................................................................................................................................  
        // .....................................         INSERTA FILA  DE TARIFA 2.0A a TARIFA 2.0ADH
        
       if ( this.tipo_Act == 2 && this.tipo_Sim== 1) {                               // .................................   INSERTAMOS EN t_f_20a
          
            // .....................................
          
            sqlStr  ="INSERT INTO t_f20dha (id_cliente,id_punto,p1_energia,p2_energia,fecha_factura,fecha_inicio,fecha_fin,importe_AI,importe_DI) VALUES (";
            sqlStr += this.id_cliente_actual+",";
            sqlStr += this.id_punto_actual+",";
            sqlStr += energiaP1.getText()+",";
            sqlStr += energiaP2.getText()+",";
            sqlStr += "'"+sFech1+"',";
            sqlStr += "'"+sFech2+"',";
            sqlStr += "'"+sFech3+"',";            
            sqlStr += importe_AI+",";
            sqlStr += importe_DI+")";
            
            System.out.println(sqlStr);
            estadoInsert= misaepDao3.registrarFila(sqlStr);
            
            // .....................................
            if (estadoInsert==0){
                
                // .....................................                                consultamos el último id que se ha asignado
                
                sqlStr = "SELECT id FROM t_f20dha ORDER BY id DESC LIMIT 1 ";
                
                estadoInsert= misaepDao3.ultimoIdentificador(sqlStr);
                
                id_tF               = misaepDao3.id ;
               
                
                // .....................................   
                
                if (estadoInsert==0){
                    
                     // .....................................                                actualizo el estado de la tabla de condiciones de facturacion

                     sqlStr = "UPDATE t_ahorros_historico SET fUltimCalc=0 WHERE id_punto="+this.id_punto_actual ;

                     estadoInsert= misaepDao3.registrarFila(sqlStr);
                    
                    // .....................................  
                    
                    
                    sqlStr  ="INSERT INTO t_ahorros_historico (id_cliente,id_punto,fecha,dias_facturacion_optimizada,ahorro_conseguido,ahorro_total,coste_actual," ;
                    sqlStr +="coste_simulado,porcentaje,id_factura,id_cond_actual,id_cond_sim,id_tipo_actual,fUltimCalc,id_tipo_sim) VALUES (" ;
                    
                    sqlStr += this.id_cliente_actual+",";                   // id cliente
                    sqlStr += this.id_punto_actual+",";                     // id punto
                    sqlStr += "'"+sFech1+"',";                              // fecha
                    sqlStr += jTextField40.getText()+",";                    // dias de facturacion
                    sqlStr += jTextField43.getText()+",";                   // ahorro conseguido
                    sqlStr += jTextField44.getText()+",";                   // ahorro total conseguido
                    sqlStr += importe_AI+",";                               // coste actual
                    sqlStr += jTextField45.getText()+",";                   // coste simulado
                    sqlStr += jTextField46.getText()+",";                   // porcentaje
                    sqlStr += id_tF+",";                                    // identificador de factura
                    sqlStr += id_cond_actuales+",";                         // identificador de condiciones actuales
                    sqlStr += id_cond_sim+",";                              // identificador de condiciones simuladas
                    sqlStr += this.tipo_Act+",";                            // tipo de condiciones actuales
                    sqlStr += "1,";                                          // tipo de condiciones actuales
                    sqlStr += id_tipo_sim+")";                              // tipo de condiciones simuladas

                    System.out.println(sqlStr);
                    estadoInsert= misaepDao4.registrarFila(sqlStr);
                    
                    
                } else {
                JOptionPane.showMessageDialog(null,
                                                     "\nError identificador factura no valido, revisa los datos de entrada por favor.",
                                                     "ADVERTENCIA!!!",JOptionPane.WARNING_MESSAGE);    
                }
                
                // .....................................
                
            }   else {
                JOptionPane.showMessageDialog(null,
                                                     "\nNo se ha realizado validación, error insertado en tabla histórico, revisa los datos de entrada por favor.",
                                                     "ADVERTENCIA!!!",JOptionPane.WARNING_MESSAGE);
                
            }       
            
            // .....................................
            
       }
       // .......................................................................................................................................  
        // .....................................         INSERTA  TARIFA 2.0DHA INDX
        
       if ( this.tipo_Act == 8 ) {                               // .................................   INSERTAMOS EN t_f_21dhaIndx
          
            // .....................................
          
            sqlStr  ="INSERT INTO t_f20dhaindx (id_cliente,id_punto,p1_energia,p2_energia,energia_peaje,fecha_factura,fecha_inicio,fecha_fin,importe_AI,importe_DI) VALUES (";
            sqlStr += this.id_cliente_actual+",";
            sqlStr += this.id_punto_actual+",";
            sqlStr += energiaP1.getText()+",";
            sqlStr += energiaP2.getText()+",";
            sqlStr += jTextField75.getText()+",";
            sqlStr += "'"+sFech1+"',";
            sqlStr += "'"+sFech2+"',";
            sqlStr += "'"+sFech3+"',";            
            sqlStr += importe_AI+",";
            sqlStr += importe_DI+")";
            
            System.out.println(sqlStr);
            estadoInsert= misaepDao3.registrarFila(sqlStr);
            
            // .....................................
            if (estadoInsert==0){
                
                  // .....................................                                actualizo el estado de la tabla de condiciones de facturacion

                     sqlStr = "UPDATE t_ahorros_historico SET fUltimCalc=0 WHERE id_punto="+this.id_punto_actual ;

                     estadoInsert= misaepDao3.registrarFila(sqlStr);
                    
                 // .....................................  
                
                
                // .....................................                                consultamos el último id que se ha asignado
                
                sqlStr = "SELECT id FROM t_f20dhaindx ORDER BY id DESC LIMIT 1 ";
                
                estadoInsert= misaepDao3.ultimoIdentificador(sqlStr);
                
                id_tF               = misaepDao3.id ;
                
                // .....................................   
                
                if (estadoInsert==0){
                    
                    sqlStr  ="INSERT INTO t_ahorros_historico (id_cliente,id_punto,fecha,dias_facturacion_optimizada,ahorro_conseguido,ahorro_total,coste_actual," ;
                    sqlStr +="coste_simulado,porcentaje,id_factura,id_cond_actual,id_cond_sim,id_tipo_actual,fUltimCalc,id_tipo_sim) VALUES (" ;
                    
                    sqlStr += this.id_cliente_actual+",";                   // id cliente
                    sqlStr += this.id_punto_actual+",";                     // id punto
                    sqlStr += "'"+sFech1+"',";                              // fecha
                    sqlStr += jTextField40.getText()+",";                    // dias de facturacion
                    sqlStr += jTextField43.getText()+",";                   // ahorro conseguido
                    sqlStr += jTextField44.getText()+",";                   // ahorro total conseguido
                    sqlStr += importe_AI+",";                               // coste actual
                    sqlStr += jTextField45.getText()+",";                   // coste simulado
                    sqlStr += jTextField46.getText()+",";                   // porcentaje
                    sqlStr += id_tF+",";                                    // identificador de factura
                    sqlStr += id_cond_actuales+",";                         // identificador de condiciones actuales
                    sqlStr += id_cond_sim+",";                              // identificador de condiciones simuladas
                    sqlStr += this.tipo_Act+",";                            // tipo de condiciones actuales
                    sqlStr += "1,";                                          // 
                    sqlStr += id_tipo_sim+")";                              // tipo de condiciones simuladas

                    System.out.println(sqlStr);
                    estadoInsert= misaepDao4.registrarFila(sqlStr);
                    
                } else {
                JOptionPane.showMessageDialog(null,
                                                     "\nError identificador factura no valido, revisa los datos de entrada por favor.",
                                                     "ADVERTENCIA!!!",JOptionPane.WARNING_MESSAGE);    
                }
                
                // .....................................
                
            }   else {
                JOptionPane.showMessageDialog(null,
                                                     "\nNo se ha realizado validación, error insertado en tabla histórico, revisa los datos de entrada por favor.",
                                                     "ADVERTENCIA!!!",JOptionPane.WARNING_MESSAGE);
                
            }       
            
            // .....................................
            
       }
      // .......................................................................................................................................  
        // .....................................         INSERTA  TARIFA 2.1DHA INDX
        
       if ( this.tipo_Act == 9 ) {                               // .................................   INSERTAMOS EN t_f_21dhaIndx
          
            // .....................................
          
            sqlStr  ="INSERT INTO t_f21dhaindx (id_cliente,id_punto,p1_energia,p2_energia,energia_peaje,fecha_factura,fecha_inicio,fecha_fin,importe_AI,importe_DI) VALUES (";
            sqlStr += this.id_cliente_actual+",";
            sqlStr += this.id_punto_actual+",";
            sqlStr += energiaP1.getText()+",";
            sqlStr += energiaP2.getText()+",";
            sqlStr += jTextField75.getText()+",";
            sqlStr += "'"+sFech1+"',";
            sqlStr += "'"+sFech2+"',";
            sqlStr += "'"+sFech3+"',";            
            sqlStr += importe_AI+",";
            sqlStr += importe_DI+")";
            
            System.out.println(sqlStr);
            estadoInsert= misaepDao3.registrarFila(sqlStr);
            
            // .....................................
            if (estadoInsert==0){
                
                  // .....................................                                actualizo el estado de la tabla de condiciones de facturacion

                     sqlStr = "UPDATE t_ahorros_historico SET fUltimCalc=0 WHERE id_punto="+this.id_punto_actual ;

                     estadoInsert= misaepDao3.registrarFila(sqlStr);
                
                // .....................................                                consultamos el último id que se ha asignado
                
                sqlStr = "SELECT id FROM t_f21dhaindx ORDER BY id DESC LIMIT 1 ";
                
                estadoInsert= misaepDao3.ultimoIdentificador(sqlStr);
                
                id_tF               = misaepDao3.id ;
                
                // .....................................   
                
                if (estadoInsert==0){
                    
                    sqlStr  ="INSERT INTO t_ahorros_historico (id_cliente,id_punto,fecha,dias_facturacion_optimizada,ahorro_conseguido,ahorro_total,coste_actual," ;
                    sqlStr +="coste_simulado,porcentaje,id_factura,id_cond_actual,id_cond_sim,id_tipo_actual,fUltimCalc,id_tipo_sim) VALUES (" ;
                    
                    sqlStr += this.id_cliente_actual+",";                   // id cliente
                    sqlStr += this.id_punto_actual+",";                     // id punto
                    sqlStr += "'"+sFech1+"',";                              // fecha
                    sqlStr += jTextField40.getText()+",";                    // dias de facturacion
                    sqlStr += jTextField43.getText()+",";                   // ahorro conseguido
                    sqlStr += jTextField44.getText()+",";                   // ahorro total conseguido
                    sqlStr += importe_AI+",";                               // coste actual
                    sqlStr += jTextField45.getText()+",";                   // coste simulado
                    sqlStr += jTextField46.getText()+",";                   // porcentaje
                    sqlStr += id_tF+",";                                    // identificador de factura
                    sqlStr += id_cond_actuales+",";                         // identificador de condiciones actuales
                    sqlStr += id_cond_sim+",";                              // identificador de condiciones simuladas
                    sqlStr += this.tipo_Act+",";                            // tipo de condiciones actuales
                    sqlStr += "1,";                                          // tipo de condiciones actuales
                    sqlStr += id_tipo_sim+")";                              // tipo de condiciones simuladas

                    System.out.println(sqlStr);
                    estadoInsert= misaepDao4.registrarFila(sqlStr);
                    
                } else {
                JOptionPane.showMessageDialog(null,
                                                     "\nError identificador factura no valido, revisa los datos de entrada por favor.",
                                                     "ADVERTENCIA!!!",JOptionPane.WARNING_MESSAGE);    
                }
                
                // .....................................
                
            }   else {
                JOptionPane.showMessageDialog(null,
                                                     "\nNo se ha realizado validación, error insertado en tabla histórico, revisa los datos de entrada por favor.",
                                                     "ADVERTENCIA!!!",JOptionPane.WARNING_MESSAGE);
                
            }       
            
            // .....................................
            
       }
       // .......................................................................................................................................  
        // .....................................         INSERTA FILA  DE TARIFA 2.1DHA a TARIFA 2.0DHA
        
       if ( this.tipo_Act == 2 && this.tipo_Sim== 4) {                               // .................................   INSERTAMOS EN t_f_20a
          
            // .....................................
          
            sqlStr  ="INSERT INTO t_f20DHa (id_cliente,id_punto,p1_energia,p2_energia,fecha_factura,fecha_inicio,fecha_fin,importe_AI,importe_DI) VALUES (";
            sqlStr += this.id_cliente_actual+",";
            sqlStr += this.id_punto_actual+",";
            sqlStr += energiaP1.getText()+",";
            sqlStr += energiaP2.getText()+",";
            sqlStr += "'"+sFech1+"',";
            sqlStr += "'"+sFech2+"',";
            sqlStr += "'"+sFech3+"',";            
            sqlStr += importe_AI+",";
            sqlStr += importe_DI+")";
            
            System.out.println(sqlStr);
            estadoInsert= misaepDao3.registrarFila(sqlStr);
            
            // .....................................
            if (estadoInsert==0){
                
                // .....................................                                consultamos el último id que se ha asignado
                
                sqlStr = "SELECT id FROM t_f20dha ORDER BY id DESC LIMIT 1 ";
                
                estadoInsert= misaepDao3.ultimoIdentificador(sqlStr);
                
                id_tF               = misaepDao3.id ;
               
                
                // .....................................   
                
                if (estadoInsert==0){
                    
                     // .....................................                                actualizo el estado de la tabla de condiciones de facturacion

                     sqlStr = "UPDATE t_ahorros_historico SET fUltimCalc=0 WHERE id_punto="+this.id_punto_actual ;

                     estadoInsert= misaepDao3.registrarFila(sqlStr);
                    
                    // .....................................  
                    
                    
                    sqlStr  ="INSERT INTO t_ahorros_historico (id_cliente,id_punto,fecha,dias_facturacion_optimizada,ahorro_conseguido,ahorro_total,coste_actual," ;
                    sqlStr +="coste_simulado,porcentaje,id_factura,id_cond_actual,id_cond_sim,id_tipo_actual,fUltimCalc,id_tipo_sim) VALUES (" ;
                    
                    sqlStr += this.id_cliente_actual+",";                   // id cliente
                    sqlStr += this.id_punto_actual+",";                     // id punto
                    sqlStr += "'"+sFech1+"',";                              // fecha
                    sqlStr += jTextField40.getText()+",";                    // dias de facturacion
                    sqlStr += jTextField43.getText()+",";                   // ahorro conseguido
                    sqlStr += jTextField44.getText()+",";                   // ahorro total conseguido
                    sqlStr += importe_AI+",";                               // coste actual
                    sqlStr += jTextField45.getText()+",";                   // coste simulado
                    sqlStr += jTextField46.getText()+",";                   // porcentaje
                    sqlStr += id_tF+",";                                    // identificador de factura
                    sqlStr += id_cond_actuales+",";                         // identificador de condiciones actuales
                    sqlStr += id_cond_sim+",";                              // identificador de condiciones simuladas
                    sqlStr += this.tipo_Act+",";                            // tipo de condiciones actuales
                    sqlStr += "1,";                                          // tipo de condiciones actuales
                    sqlStr += id_tipo_sim+")";                              // tipo de condiciones simuladas

                    System.out.println(sqlStr);
                    estadoInsert= misaepDao4.registrarFila(sqlStr);
                    
                    
                } else {
                JOptionPane.showMessageDialog(null,
                                                     "\nError identificador factura no valido, revisa los datos de entrada por favor.",
                                                     "ADVERTENCIA!!!",JOptionPane.WARNING_MESSAGE);    
                }
                
                // .....................................
                
            }   else {
                JOptionPane.showMessageDialog(null,
                                                     "\nNo se ha realizado validación, error insertado en tabla histórico, revisa los datos de entrada por favor.",
                                                     "ADVERTENCIA!!!",JOptionPane.WARNING_MESSAGE);
                
            }       
            
            // .....................................
            
       }
        // .......................................................................................................................................  
        // .....................................         INSERTA FILA  DE TARIFA 2.1DHA a TARIFA 2.0DHA INDEX
        
       if ( this.tipo_Act == 8 && this.tipo_Sim== 4) {                               // .................................   INSERTAMOS EN t_f_20a
          
            // .....................................
          
            sqlStr  ="INSERT INTO t_f20dhaindx (id_cliente,id_punto,p1_energia,p2_energia,fecha_factura,fecha_inicio,fecha_fin,importe_AI,importe_DI) VALUES (";
            sqlStr += this.id_cliente_actual+",";
            sqlStr += this.id_punto_actual+",";
            sqlStr += energiaP1.getText()+",";
            sqlStr += energiaP2.getText()+",";
            sqlStr += "'"+sFech1+"',";
            sqlStr += "'"+sFech2+"',";
            sqlStr += "'"+sFech3+"',";            
            sqlStr += importe_AI+",";
            sqlStr += importe_DI+")";
            
            System.out.println(sqlStr);
            estadoInsert= misaepDao3.registrarFila(sqlStr);
            
            // .....................................
            if (estadoInsert==0){
                
                // .....................................                                consultamos el último id que se ha asignado
                
                sqlStr = "SELECT id FROM t_f20dhaindx ORDER BY id DESC LIMIT 1 ";
                
                estadoInsert= misaepDao3.ultimoIdentificador(sqlStr);
                
                id_tF               = misaepDao3.id ;
               
                
                // .....................................   
                
                if (estadoInsert==0){
                    
                     // .....................................                                actualizo el estado de la tabla de condiciones de facturacion

                     sqlStr = "UPDATE t_ahorros_historico SET fUltimCalc=0 WHERE id_punto="+this.id_punto_actual ;

                     estadoInsert= misaepDao3.registrarFila(sqlStr);
                    
                    // .....................................  
                    
                    
                    sqlStr  ="INSERT INTO t_ahorros_historico (id_cliente,id_punto,fecha,dias_facturacion_optimizada,ahorro_conseguido,ahorro_total,coste_actual," ;
                    sqlStr +="coste_simulado,porcentaje,id_factura,id_cond_actual,id_cond_sim,id_tipo_actual,fUltimCalc,id_tipo_sim) VALUES (" ;
                    
                    sqlStr += this.id_cliente_actual+",";                   // id cliente
                    sqlStr += this.id_punto_actual+",";                     // id punto
                    sqlStr += "'"+sFech1+"',";                              // fecha
                    sqlStr += jTextField40.getText()+",";                    // dias de facturacion
                    sqlStr += jTextField43.getText()+",";                   // ahorro conseguido
                    sqlStr += jTextField44.getText()+",";                   // ahorro total conseguido
                    sqlStr += importe_AI+",";                               // coste actual
                    sqlStr += jTextField45.getText()+",";                   // coste simulado
                    sqlStr += jTextField46.getText()+",";                   // porcentaje
                    sqlStr += id_tF+",";                                    // identificador de factura
                    sqlStr += id_cond_actuales+",";                         // identificador de condiciones actuales
                    sqlStr += id_cond_sim+",";                              // identificador de condiciones simuladas
                    sqlStr += this.tipo_Act+",";                            // tipo de condiciones actuales
                    sqlStr += "1,";                                          // tipo de condiciones actuales
                    sqlStr += id_tipo_sim+")";                              // tipo de condiciones simuladas

                    System.out.println(sqlStr);
                    estadoInsert= misaepDao4.registrarFila(sqlStr);
                    
                    
                } else {
                JOptionPane.showMessageDialog(null,
                                                     "\nError identificador factura no valido, revisa los datos de entrada por favor.",
                                                     "ADVERTENCIA!!!",JOptionPane.WARNING_MESSAGE);    
                }
                
                // .....................................
                
            }   else {
                JOptionPane.showMessageDialog(null,
                                                     "\nNo se ha realizado validación, error insertado en tabla histórico, revisa los datos de entrada por favor.",
                                                     "ADVERTENCIA!!!",JOptionPane.WARNING_MESSAGE);
                
            }       
            
            // .....................................
            
       }
        // .......................................................................................................................................  
        // .....................................         INSERTA FILA  DE TARIFA 3.0 INDEX a TARIFA 3.0 INDEX
        
       if ( this.tipo_Act == 10 && this.tipo_Sim== 10) {                               // .................................   INSERTAMOS EN t_f_30aindx
          
            // .....................................
          
            sqlStr  ="INSERT INTO t_f30aindx (id_cliente,id_punto,p1_energia,p2_energia,p3_energia,p1_potencia,p2_potencia,p3_potencia,energia_peaje,penalizacion_reactiva,fecha_factura,fecha_inicio,fecha_fin,importe_AI,importe_DI,alquiler,reactiva_facturada_p1,reactiva_facturada_p2,reactiva_simulada_p1,reactiva_simulada_p2,potencia_facturada_p1,potencia_facturada_p2,potencia_facturada_p3) VALUES (";
            sqlStr += this.id_cliente_actual+",";
            sqlStr += this.id_punto_actual+",";
            sqlStr += energiaP1.getText()+",";
            sqlStr += energiaP2.getText()+",";
            sqlStr += energiaP3.getText()+",";
            sqlStr += jTextField77.getText()+",";
            sqlStr += jTextField78.getText()+",";
            sqlStr += jTextField79.getText()+",";
            sqlStr += jTextField75.getText()+",";
            sqlStr += jTextField85.getText()+",";
            sqlStr += "'"+sFech1+"',";
            sqlStr += "'"+sFech2+"',";
            sqlStr += "'"+sFech3+"',";            
            sqlStr += importe_AI+",";
            sqlStr += importe_DI+",";
            sqlStr += jTextField80.getText()+",";
            sqlStr += jTextField109.getText()+",";
            sqlStr += jTextField110.getText()+",";
            
            sqlStr += jTextField121.getText()+",";
            sqlStr += jTextField122.getText()+",";
            
            sqlStr += jTextField113.getText()+",";
            sqlStr += jTextField114.getText()+",";
            sqlStr += jTextField115.getText()+")";
            
            System.out.println(sqlStr);
            estadoInsert= misaepDao3.registrarFila(sqlStr);
            
            // .....................................
            if (estadoInsert==0){
                
                // .....................................                                consultamos el último id que se ha asignado
                
                sqlStr = "SELECT id FROM t_f30aindx ORDER BY id DESC LIMIT 1 ";
                
                estadoInsert= misaepDao3.ultimoIdentificador(sqlStr);
                
                id_tF               = misaepDao3.id ;
               
                
                // .....................................   
                
                if (estadoInsert==0){
                    
                     // .....................................                                actualizo el estado de la tabla de condiciones de facturacion

                     sqlStr = "UPDATE t_ahorros_historico SET fUltimCalc=0 WHERE id_punto="+this.id_punto_actual ;

                     estadoInsert= misaepDao3.registrarFila(sqlStr);
                    
                    // .....................................  
                    
                    
                    sqlStr  ="INSERT INTO t_ahorros_historico (id_cliente,id_punto,fecha,dias_facturacion_optimizada,ahorro_conseguido,ahorro_total,coste_actual," ;
                    sqlStr +="coste_simulado,porcentaje,id_factura,id_cond_actual,id_cond_sim,id_tipo_actual,fUltimCalc,id_tipo_sim) VALUES (" ;
                    
                    sqlStr += this.id_cliente_actual+",";                   // id cliente
                    sqlStr += this.id_punto_actual+",";                     // id punto
                    sqlStr += "'"+sFech1+"',";                              // fecha
                    sqlStr += jTextField40.getText()+",";                    // dias de facturacion
                    sqlStr += jTextField43.getText()+",";                   // ahorro conseguido
                    sqlStr += jTextField44.getText()+",";                   // ahorro total conseguido
                    sqlStr += importe_AI+",";                               // coste actual
                    sqlStr += jTextField45.getText()+",";                   // coste simulado
                    sqlStr += jTextField46.getText()+",";                   // porcentaje
                    sqlStr += id_tF+",";                                    // identificador de factura
                    sqlStr += id_cond_actuales+",";                         // identificador de condiciones actuales
                    sqlStr += id_cond_sim+",";                              // identificador de condiciones simuladas
                    sqlStr += this.tipo_Act+",";                            // tipo de condiciones actuales
                    sqlStr += "1,";                                          // tipo de condiciones actuales
                    sqlStr += id_tipo_sim+")";                              // tipo de condiciones simuladas

                    System.out.println(sqlStr);
                    estadoInsert= misaepDao4.registrarFila(sqlStr);
                    
                    
                } else {
                JOptionPane.showMessageDialog(null,
                                                     "\nError identificador factura no valido, revisa los datos de entrada por favor.",
                                                     "ADVERTENCIA!!!",JOptionPane.WARNING_MESSAGE);    
                }
                
                // .....................................
                
            }   else {
                JOptionPane.showMessageDialog(null,
                                                     "\nNo se ha realizado validación, error insertado en tabla histórico, revisa los datos de entrada por favor.",
                                                     "ADVERTENCIA!!!",JOptionPane.WARNING_MESSAGE);
                
            }       
            
            // .....................................
            
       }
         // .......................................................................................................................................  
        // .....................................         INSERTA FILA  DE TARIFA 3.0 INDEX a TARIFA 3.0 INDEX 0 DE TARIFA 3.0 A a TARIFA 3.0 INDEX  
        
       if ( this.tipo_Act == 10 && ( this.tipo_Sim== 5   || this.tipo_Sim== 3 )) {                               // .................................   INSERTAMOS EN t_f_30aindx
          
            // .....................................
          
            sqlStr  ="INSERT INTO t_f30aindx (id_cliente,id_punto,p1_energia,p2_energia,p3_energia,p1_potencia,p2_potencia,p3_potencia,energia_peaje,penalizacion_reactiva,fecha_factura,fecha_inicio,fecha_fin,importe_AI,importe_DI,alquiler,reactiva_facturada_p1,reactiva_facturada_p2,reactiva_simulada_p1,reactiva_simulada_p2,p1_energia_simulada,p2_energia_simulada,p3_energia_simulada,potencia_facturada_p1,potencia_facturada_p2,potencia_facturada_p3) VALUES (";
            sqlStr += this.id_cliente_actual+",";
            sqlStr += this.id_punto_actual+",";
            sqlStr += energiaP1.getText()+",";
            sqlStr += energiaP2.getText()+",";
            sqlStr += energiaP3.getText()+",";
            sqlStr += jTextField77.getText()+",";
            sqlStr += jTextField78.getText()+",";
            sqlStr += jTextField79.getText()+",";
            sqlStr += jTextField75.getText()+",";
            sqlStr += jTextField85.getText()+",";
            sqlStr += "'"+sFech1+"',";
            sqlStr += "'"+sFech2+"',";
            sqlStr += "'"+sFech3+"',";            
            sqlStr += importe_AI+",";
            sqlStr += importe_DI+",";
            sqlStr += jTextField80.getText()+",";
            sqlStr += jTextField109.getText()+",";
            sqlStr += jTextField110.getText()+",";
            
            sqlStr += jTextField121.getText()+",";
            sqlStr += jTextField122.getText()+",";
            
            sqlStr += energiaP1s.getText()+",";
            sqlStr += energiaP2s.getText()+",";
            sqlStr += energiaP3s.getText()+",";
            
            sqlStr += jTextField113.getText()+",";
            sqlStr += jTextField114.getText()+",";
            sqlStr += jTextField115.getText()+")";
            
            System.out.println(sqlStr);
            estadoInsert= misaepDao3.registrarFila(sqlStr);
            
            // .....................................
            if (estadoInsert==0){
                
                // .....................................                                consultamos el último id que se ha asignado
                
                sqlStr = "SELECT id FROM t_f30aindx ORDER BY id DESC LIMIT 1 ";
                
                estadoInsert= misaepDao3.ultimoIdentificador(sqlStr);
                
                id_tF               = misaepDao3.id ;
               
                
                // .....................................   
                
                if (estadoInsert==0){
                    
                     // .....................................                                actualizo el estado de la tabla de condiciones de facturacion

                     sqlStr = "UPDATE t_ahorros_historico SET fUltimCalc=0 WHERE id_punto="+this.id_punto_actual ;

                     estadoInsert= misaepDao3.registrarFila(sqlStr);
                    
                    // .....................................  
                    
                    
                    sqlStr  ="INSERT INTO t_ahorros_historico (id_cliente,id_punto,fecha,dias_facturacion_optimizada,ahorro_conseguido,ahorro_total,coste_actual," ;
                    sqlStr +="coste_simulado,porcentaje,id_factura,id_cond_actual,id_cond_sim,id_tipo_actual,fUltimCalc,id_tipo_sim) VALUES (" ;
                    
                    sqlStr += this.id_cliente_actual+",";                   // id cliente
                    sqlStr += this.id_punto_actual+",";                     // id punto
                    sqlStr += "'"+sFech1+"',";                              // fecha
                    sqlStr += jTextField40.getText()+",";                    // dias de facturacion
                    sqlStr += jTextField43.getText()+",";                   // ahorro conseguido
                    sqlStr += jTextField44.getText()+",";                   // ahorro total conseguido
                    sqlStr += importe_AI+",";                               // coste actual
                    sqlStr += jTextField45.getText()+",";                   // coste simulado
                    sqlStr += jTextField46.getText()+",";                   // porcentaje
                    sqlStr += id_tF+",";                                    // identificador de factura
                    sqlStr += id_cond_actuales+",";                         // identificador de condiciones actuales
                    sqlStr += id_cond_sim+",";                              // identificador de condiciones simuladas
                    sqlStr += this.tipo_Act+",";                            // tipo de condiciones actuales
                    sqlStr += "1,";                                         // flag ultimo calculo
                    sqlStr += id_tipo_sim+")";                              // tipo de condiciones simuladas

                    System.out.println(sqlStr);
                    estadoInsert= misaepDao4.registrarFila(sqlStr);
                    
                    
                } else {
                JOptionPane.showMessageDialog(null,
                                                     "\nError identificador factura no valido, revisa los datos de entrada por favor.",
                                                     "ADVERTENCIA!!!",JOptionPane.WARNING_MESSAGE);    
                }
                
                // .....................................
                
            }   else {
                JOptionPane.showMessageDialog(null,
                                                     "\nNo se ha realizado validación, error insertado en tabla histórico, revisa los datos de entrada por favor.",
                                                     "ADVERTENCIA!!!",JOptionPane.WARNING_MESSAGE);
                
            }       
            
            // .....................................
            
       }
     
      // .......................................................................................................................................  
      // .....................................         INSERTA FILA  DE TARIFA 2.0A a TARIFA 2.0A INDX
        
       if ( this.tipo_Act == 11 && this.tipo_Sim== 1) {                               // .................................   INSERTAMOS EN t_F20INDX
          
            // .....................................
          
            sqlStr  ="INSERT INTO t_f20indx (id_cliente,id_punto,p1_energia,energia_peaje,fecha_factura,fecha_inicio,fecha_fin,importe_AI,importe_DI) VALUES (";
            sqlStr += this.id_cliente_actual+",";
            sqlStr += this.id_punto_actual+",";
            sqlStr += energiaP1.getText()+",";
            sqlStr += energiaP1.getText()+",";
            sqlStr += "'"+sFech1+"',";
            sqlStr += "'"+sFech2+"',";
            sqlStr += "'"+sFech3+"',";            
            sqlStr += importe_AI+",";
            sqlStr += importe_DI+")";
            
            System.out.println(sqlStr);
            estadoInsert= misaepDao3.registrarFila(sqlStr);
            
            // .....................................
            if (estadoInsert==0){
                
                // .....................................                                consultamos el último id que se ha asignado
                
                sqlStr = "SELECT id FROM t_f20indx ORDER BY id DESC LIMIT 1 ";
                
                estadoInsert= misaepDao3.ultimoIdentificador(sqlStr);
                
                id_tF               = misaepDao3.id ;
               
                
                // .....................................   
                
                if (estadoInsert==0){
                    
                     // .....................................                                actualizo el estado de la tabla de condiciones de facturacion

                     sqlStr = "UPDATE t_ahorros_historico SET fUltimCalc=0 WHERE id_punto="+this.id_punto_actual ;

                     estadoInsert= misaepDao3.registrarFila(sqlStr);
                    
                    // .....................................  
                  
                    
                    sqlStr  ="INSERT INTO t_ahorros_historico (id_cliente,id_punto,fecha,dias_facturacion_optimizada,ahorro_conseguido,ahorro_total,coste_actual," ;
                    sqlStr +="coste_simulado,porcentaje,id_factura,id_cond_actual,id_cond_sim,id_tipo_actual,fUltimCalc,id_tipo_sim) VALUES (" ;
                    
                    sqlStr += this.id_cliente_actual+",";                   // id cliente
                    sqlStr += this.id_punto_actual+",";                     // id punto
                    sqlStr += "'"+sFech1+"',";                              // fecha
                    sqlStr += jTextField40.getText()+",";                    // dias de facturacion
                    sqlStr += jTextField43.getText()+",";                   // ahorro conseguido
                    sqlStr += jTextField44.getText()+",";                   // ahorro total conseguido
                    sqlStr += importe_AI+",";                               // coste actual
                    sqlStr += jTextField45.getText()+",";                   // coste simulado
                    sqlStr += jTextField46.getText()+",";                   // porcentaje
                    sqlStr += id_tF+",";                                    // identificador de factura
                    sqlStr += id_cond_actuales+",";                         // identificador de condiciones actuales
                    sqlStr += id_cond_sim+",";                              // identificador de condiciones simuladas
                    sqlStr += this.tipo_Act+",";                            // tipo de condiciones actuales
                    sqlStr += "1,";                                        // tipo de condiciones actuales
                    sqlStr += id_tipo_sim+")";                              // tipo de condiciones simuladas

                    System.out.println(sqlStr);
                    estadoInsert= misaepDao4.registrarFila(sqlStr);
                    
                    
                } else {
                JOptionPane.showMessageDialog(null,
                                                     "\nError identificador factura no valido, revisa los datos de entrada por favor.",
                                                     "ADVERTENCIA!!!",JOptionPane.WARNING_MESSAGE);    
                }
                
                // .....................................
                
            }   else {
                JOptionPane.showMessageDialog(null,
                                                     "\nNo se ha realizado validación, error insertado en tabla histórico, revisa los datos de entrada por favor.",
                                                     "ADVERTENCIA!!!",JOptionPane.WARNING_MESSAGE);
                
            }       
            
            // .....................................
            
       }
         // .......................................................................................................................................  
        // .....................................         INSERTA FILA  DE TARIFA 2.10A a TARIFA 2.1A INDX
        
       if ( this.tipo_Act == 12 && this.tipo_Sim== 3) {                               // .................................   INSERTAMOS EN t_F20INDX
          
            // .....................................
          
            sqlStr  ="INSERT INTO t_f21indx (id_cliente,id_punto,p1_energia,energia_peaje,fecha_factura,fecha_inicio,fecha_fin,importe_AI,importe_DI) VALUES (";
            sqlStr += this.id_cliente_actual+",";
            sqlStr += this.id_punto_actual+",";
            sqlStr += energiaP1.getText()+",";
            sqlStr += energiaP1.getText()+",";
            sqlStr += "'"+sFech1+"',";
            sqlStr += "'"+sFech2+"',";
            sqlStr += "'"+sFech3+"',";            
            sqlStr += importe_AI+",";
            sqlStr += importe_DI+")";
            
            System.out.println(sqlStr);
            estadoInsert= misaepDao3.registrarFila(sqlStr);
            
            // .....................................
            if (estadoInsert==0){
                
                // .....................................                                consultamos el último id que se ha asignado
                
                sqlStr = "SELECT id FROM t_f21indx ORDER BY id DESC LIMIT 1 ";
                
                estadoInsert= misaepDao3.ultimoIdentificador(sqlStr);
                
                id_tF               = misaepDao3.id ;
               
                
                // .....................................   
                
                if (estadoInsert==0){
                    
                     // .....................................                                actualizo el estado de la tabla de condiciones de facturacion

                     sqlStr = "UPDATE t_ahorros_historico SET fUltimCalc=0 WHERE id_punto="+this.id_punto_actual ;

                     estadoInsert= misaepDao3.registrarFila(sqlStr);
                    
                    // .....................................  
                  
                    
                    sqlStr  ="INSERT INTO t_ahorros_historico (id_cliente,id_punto,fecha,dias_facturacion_optimizada,ahorro_conseguido,ahorro_total,coste_actual," ;
                    sqlStr +="coste_simulado,porcentaje,id_factura,id_cond_actual,id_cond_sim,id_tipo_actual,fUltimCalc,id_tipo_sim) VALUES (" ;
                    
                    sqlStr += this.id_cliente_actual+",";                   // id cliente
                    sqlStr += this.id_punto_actual+",";                     // id punto
                    sqlStr += "'"+sFech1+"',";                              // fecha
                    sqlStr += jTextField40.getText()+",";                    // dias de facturacion
                    sqlStr += jTextField43.getText()+",";                   // ahorro conseguido
                    sqlStr += jTextField44.getText()+",";                   // ahorro total conseguido
                    sqlStr += importe_AI+",";                               // coste actual
                    sqlStr += jTextField45.getText()+",";                   // coste simulado
                    sqlStr += jTextField46.getText()+",";                   // porcentaje
                    sqlStr += id_tF+",";                                    // identificador de factura
                    sqlStr += id_cond_actuales+",";                         // identificador de condiciones actuales
                    sqlStr += id_cond_sim+",";                              // identificador de condiciones simuladas
                    sqlStr += this.tipo_Act+",";                            // tipo de condiciones actuales
                    sqlStr += "1,";                                        // tipo de condiciones actuales
                    sqlStr += id_tipo_sim+")";                              // tipo de condiciones simuladas

                    System.out.println(sqlStr);
                    estadoInsert= misaepDao4.registrarFila(sqlStr);
                    
                    
                } else {
                JOptionPane.showMessageDialog(null,
                                                     "\nError identificador factura no valido, revisa los datos de entrada por favor.",
                                                     "ADVERTENCIA!!!",JOptionPane.WARNING_MESSAGE);    
                }
                
                // .....................................
                
            }   else {
                JOptionPane.showMessageDialog(null,
                                                     "\nNo se ha realizado validación, error insertado en tabla histórico, revisa los datos de entrada por favor.",
                                                     "ADVERTENCIA!!!",JOptionPane.WARNING_MESSAGE);
                
            }       
            
            // .....................................
            
       }
       // .......................................................................................................................................  
      // .....................................         INSERTA FILA  DE TARIFA 2.1A a TARIFA 2.0A INDX
        
       if ( this.tipo_Act == 11 && this.tipo_Sim== 3) {                               // .................................   INSERTAMOS EN t_F20INDX
          
            // .....................................
          
            sqlStr  ="INSERT INTO t_f20indx (id_cliente,id_punto,p1_energia,energia_peaje,fecha_factura,fecha_inicio,fecha_fin,importe_AI,importe_DI) VALUES (";
            sqlStr += this.id_cliente_actual+",";
            sqlStr += this.id_punto_actual+",";
            sqlStr += energiaP1.getText()+",";
            sqlStr += energiaP1.getText()+",";
            sqlStr += "'"+sFech1+"',";
            sqlStr += "'"+sFech2+"',";
            sqlStr += "'"+sFech3+"',";            
            sqlStr += importe_AI+",";
            sqlStr += importe_DI+")";
            
            System.out.println(sqlStr);
            estadoInsert= misaepDao3.registrarFila(sqlStr);
            
            // .....................................
            if (estadoInsert==0){
                
                // .....................................                                consultamos el último id que se ha asignado
                
                sqlStr = "SELECT id FROM t_f20indx ORDER BY id DESC LIMIT 1 ";
                
                estadoInsert= misaepDao3.ultimoIdentificador(sqlStr);
                
                id_tF               = misaepDao3.id ;
               
                
                // .....................................   
                
                if (estadoInsert==0){
                    
                     // .....................................                                actualizo el estado de la tabla de condiciones de facturacion

                     sqlStr = "UPDATE t_ahorros_historico SET fUltimCalc=0 WHERE id_punto="+this.id_punto_actual ;

                     estadoInsert= misaepDao3.registrarFila(sqlStr);
                    
                    // .....................................  
                  
                    
                    sqlStr  ="INSERT INTO t_ahorros_historico (id_cliente,id_punto,fecha,dias_facturacion_optimizada,ahorro_conseguido,ahorro_total,coste_actual," ;
                    sqlStr +="coste_simulado,porcentaje,id_factura,id_cond_actual,id_cond_sim,id_tipo_actual,fUltimCalc,id_tipo_sim) VALUES (" ;
                    
                    sqlStr += this.id_cliente_actual+",";                   // id cliente
                    sqlStr += this.id_punto_actual+",";                     // id punto
                    sqlStr += "'"+sFech1+"',";                              // fecha
                    sqlStr += jTextField40.getText()+",";                    // dias de facturacion
                    sqlStr += jTextField43.getText()+",";                   // ahorro conseguido
                    sqlStr += jTextField44.getText()+",";                   // ahorro total conseguido
                    sqlStr += importe_AI+",";                               // coste actual
                    sqlStr += jTextField45.getText()+",";                   // coste simulado
                    sqlStr += jTextField46.getText()+",";                   // porcentaje
                    sqlStr += id_tF+",";                                    // identificador de factura
                    sqlStr += id_cond_actuales+",";                         // identificador de condiciones actuales
                    sqlStr += id_cond_sim+",";                              // identificador de condiciones simuladas
                    sqlStr += this.tipo_Act+",";                            // tipo de condiciones actuales
                    sqlStr += "1,";                                        // tipo de condiciones actuales
                    sqlStr += id_tipo_sim+")";                              // tipo de condiciones simuladas

                    System.out.println(sqlStr);
                    estadoInsert= misaepDao4.registrarFila(sqlStr);
                    
                    
                } else {
                JOptionPane.showMessageDialog(null,
                                                     "\nError identificador factura no valido, revisa los datos de entrada por favor.",
                                                     "ADVERTENCIA!!!",JOptionPane.WARNING_MESSAGE);    
                }
                
                // .....................................
                
            }   else {
                JOptionPane.showMessageDialog(null,
                                                     "\nNo se ha realizado validación, error insertado en tabla histórico, revisa los datos de entrada por favor.",
                                                     "ADVERTENCIA!!!",JOptionPane.WARNING_MESSAGE);
                
            }       
            
            // .....................................
            
       }
         // .......................................................................................................................................  
        // .....................................         INSERTA FILA  DE TARIFA 3.1 INDEX (o 3.0  A) a TARIFA 3.0 INDEX
        
       if ( this.tipo_Act == 13 && (this.tipo_Sim== 13 || this.tipo_Sim== 5 || this.tipo_Sim== 6)) {                               // .................................   INSERTAMOS EN t_f_30aindx
          
            // .....................................
          
            sqlStr  ="INSERT INTO t_f31aindx (id_cliente,id_punto,p1_energia,p2_energia,p3_energia,p1_potencia,p2_potencia,p3_potencia,energia_peaje,penalizacion_reactiva,fecha_factura,fecha_inicio,fecha_fin,importe_AI,importe_DI,alquiler,reactiva_facturada_p1,reactiva_facturada_p2,reactiva_simulada_p1,reactiva_simulada_p2,p1_energia_simulada,p2_energia_simulada,p3_energia_simulada,potencia_facturada_p1,potencia_facturada_p2,potencia_facturada_p3) VALUES (";
            sqlStr += this.id_cliente_actual+",";
            sqlStr += this.id_punto_actual+",";
            sqlStr += energiaP1.getText()+",";
            sqlStr += energiaP2.getText()+",";
            sqlStr += energiaP3.getText()+",";
            sqlStr += jTextField77.getText()+",";
            sqlStr += jTextField78.getText()+",";
            sqlStr += jTextField79.getText()+",";
            sqlStr += jTextField75.getText()+",";
            sqlStr += jTextField85.getText()+",";
            sqlStr += "'"+sFech1+"',";
            sqlStr += "'"+sFech2+"',";
            sqlStr += "'"+sFech3+"',";            
            sqlStr += importe_AI+",";
            sqlStr += importe_DI+",";
            sqlStr += jTextField80.getText()+",";
            sqlStr += jTextField109.getText()+",";
            sqlStr += jTextField110.getText()+",";
            
            sqlStr += jTextField121.getText()+",";
            sqlStr += jTextField122.getText()+",";
            
            sqlStr += energiaP1s.getText()+",";
            sqlStr += energiaP2s.getText()+",";
            sqlStr += energiaP3s.getText()+",";
            
            sqlStr += jTextField113.getText()+",";
            sqlStr += jTextField114.getText()+",";
            sqlStr += jTextField115.getText()+")";
            
            System.out.println(sqlStr);
            estadoInsert= misaepDao3.registrarFila(sqlStr);
            
            // .....................................
            if (estadoInsert==0){
                
                // .....................................                                consultamos el último id que se ha asignado
                
                sqlStr = "SELECT id FROM t_f31aindx ORDER BY id DESC LIMIT 1 ";
                
                estadoInsert= misaepDao3.ultimoIdentificador(sqlStr);
                
                id_tF               = misaepDao3.id ;
               
                
                // .....................................   
                
                if (estadoInsert==0){
                    
                     // .....................................                                actualizo el estado de la tabla de condiciones de facturacion

                     sqlStr = "UPDATE t_ahorros_historico SET fUltimCalc=0 WHERE id_punto="+this.id_punto_actual ;

                     estadoInsert= misaepDao3.registrarFila(sqlStr);
                    
                    // .....................................  
                    
                    
                    sqlStr  ="INSERT INTO t_ahorros_historico (id_cliente,id_punto,fecha,dias_facturacion_optimizada,ahorro_conseguido,ahorro_total,coste_actual," ;
                    sqlStr +="coste_simulado,porcentaje,id_factura,id_cond_actual,id_cond_sim,id_tipo_actual,fUltimCalc,id_tipo_sim) VALUES (" ;
                    
                    sqlStr += this.id_cliente_actual+",";                   // id cliente
                    sqlStr += this.id_punto_actual+",";                     // id punto
                    sqlStr += "'"+sFech1+"',";                              // fecha
                    sqlStr += jTextField40.getText()+",";                    // dias de facturacion
                    sqlStr += jTextField43.getText()+",";                   // ahorro conseguido
                    sqlStr += jTextField44.getText()+",";                   // ahorro total conseguido
                    sqlStr += importe_AI+",";                               // coste actual
                    sqlStr += jTextField45.getText()+",";                   // coste simulado
                    sqlStr += jTextField46.getText()+",";                   // porcentaje
                    sqlStr += id_tF+",";                                    // identificador de factura
                    sqlStr += id_cond_actuales+",";                         // identificador de condiciones actuales
                    sqlStr += id_cond_sim+",";                              // identificador de condiciones simuladas
                    sqlStr += this.tipo_Act+",";                            // tipo de condiciones actuales
                    sqlStr += "1,";                                         // flag ultimo calculo
                    sqlStr += id_tipo_sim+")";                              // tipo de condiciones simuladas

                    System.out.println(sqlStr);
                    estadoInsert= misaepDao4.registrarFila(sqlStr);
                    
                    
                } else {
                JOptionPane.showMessageDialog(null,
                                                     "\nError identificador factura no valido, revisa los datos de entrada por favor.",
                                                     "ADVERTENCIA!!!",JOptionPane.WARNING_MESSAGE);    
                }
                
                // .....................................
                
            }   else {
                JOptionPane.showMessageDialog(null,
                                                     "\nNo se ha realizado validación, error insertado en tabla histórico, revisa los datos de entrada por favor.",
                                                     "ADVERTENCIA!!!",JOptionPane.WARNING_MESSAGE);
                
            }       
            
            // .....................................
            
       }
            // .......................................................................................................................................  
        // .....................................         INSERTA FILA  DE TARIFA 3.0  A a TARIFA 3.0 A
        
       if ( this.tipo_Act == 5 &&  this.tipo_Sim== 5 ) {                               // .................................   INSERTAMOS EN t_f_30a
          
            // .....................................
          
            sqlStr  ="INSERT INTO t_f30a (id_cliente,id_punto,p1_energia,p2_energia,p3_energia,p1_potencia,p2_potencia,p3_potencia,penalizacion_reactiva,fecha_factura,fecha_inicio,fecha_fin,importe_AI,importe_DI,alquiler,reactiva_facturada_p1,reactiva_facturada_p2,reactiva_simulada_p1,reactiva_simulada_p2,p1_energia_simulada,p2_energia_simulada,p3_energia_simulada,potencia_facturada_p1,potencia_facturada_p2,potencia_facturada_p3) VALUES (";
            sqlStr += this.id_cliente_actual+",";
            sqlStr += this.id_punto_actual+",";
            sqlStr += energiaP1.getText()+",";
            sqlStr += energiaP2.getText()+",";
            sqlStr += energiaP3.getText()+",";
            sqlStr += jTextField77.getText()+",";
            sqlStr += jTextField78.getText()+",";
            sqlStr += jTextField79.getText()+",";
 //           sqlStr += jTextField75.getText()+",";
            sqlStr += jTextField85.getText()+",";
            sqlStr += "'"+sFech1+"',";
            sqlStr += "'"+sFech2+"',";
            sqlStr += "'"+sFech3+"',";            
            sqlStr += importe_AI+",";
            sqlStr += importe_DI+",";
            sqlStr += jTextField80.getText()+",";
            sqlStr += jTextField109.getText()+",";
            sqlStr += jTextField110.getText()+",";
            
            sqlStr += jTextField121.getText()+",";
            sqlStr += jTextField122.getText()+",";
            
            sqlStr += energiaP1s.getText()+",";
            sqlStr += energiaP2s.getText()+",";
            sqlStr += energiaP3s.getText()+",";
            
            sqlStr += jTextField113.getText()+",";
            sqlStr += jTextField114.getText()+",";
            sqlStr += jTextField115.getText()+")";
            
            System.out.println(sqlStr);
            estadoInsert= misaepDao3.registrarFila(sqlStr);
            
            // .....................................
            if (estadoInsert==0){
                
                // .....................................                                consultamos el último id que se ha asignado
                
                sqlStr = "SELECT id FROM t_f30a ORDER BY id DESC LIMIT 1 ";
                
                estadoInsert= misaepDao3.ultimoIdentificador(sqlStr);
                
                id_tF               = misaepDao3.id ;
               
                
                // .....................................   
                
                if (estadoInsert==0){
                    
                     // .....................................                                actualizo el estado de la tabla de condiciones de facturacion

                     sqlStr = "UPDATE t_ahorros_historico SET fUltimCalc=0 WHERE id_punto="+this.id_punto_actual ;

                     estadoInsert= misaepDao3.registrarFila(sqlStr);
                    
                    // .....................................  
                    
                    
                    sqlStr  ="INSERT INTO t_ahorros_historico (id_cliente,id_punto,fecha,dias_facturacion_optimizada,ahorro_conseguido,ahorro_total,coste_actual," ;
                    sqlStr +="coste_simulado,porcentaje,id_factura,id_cond_actual,id_cond_sim,id_tipo_actual,fUltimCalc,id_tipo_sim) VALUES (" ;
                    
                    sqlStr += this.id_cliente_actual+",";                   // id cliente
                    sqlStr += this.id_punto_actual+",";                     // id punto
                    sqlStr += "'"+sFech1+"',";                              // fecha
                    sqlStr += jTextField40.getText()+",";                    // dias de facturacion
                    sqlStr += jTextField43.getText()+",";                   // ahorro conseguido
                    sqlStr += jTextField44.getText()+",";                   // ahorro total conseguido
                    sqlStr += importe_AI+",";                               // coste actual
                    sqlStr += jTextField45.getText()+",";                   // coste simulado
                    sqlStr += jTextField46.getText()+",";                   // porcentaje
                    sqlStr += id_tF+",";                                    // identificador de factura
                    sqlStr += id_cond_actuales+",";                         // identificador de condiciones actuales
                    sqlStr += id_cond_sim+",";                              // identificador de condiciones simuladas
                    sqlStr += this.tipo_Act+",";                            // tipo de condiciones actuales
                    sqlStr += "1,";                                         // flag ultimo calculo
                    sqlStr += id_tipo_sim+")";                              // tipo de condiciones simuladas

                    System.out.println(sqlStr);
                    estadoInsert= misaepDao4.registrarFila(sqlStr);
                    
                    
                } else {
                JOptionPane.showMessageDialog(null,
                                                     "\nError identificador factura no valido, revisa los datos de entrada por favor.",
                                                     "ADVERTENCIA!!!",JOptionPane.WARNING_MESSAGE);    
                }
                
                // .....................................
                
            }   else {
                JOptionPane.showMessageDialog(null,
                                                     "\nNo se ha realizado validación, error insertado en tabla histórico, revisa los datos de entrada por favor.",
                                                     "ADVERTENCIA!!!",JOptionPane.WARNING_MESSAGE);
                
            }       
            
            // .....................................
            
       }
       }
 }
 
 // ------------------------------------------------------------------------------------------------------------------------
 public int diferenciaFechas(String fec1, String fec2,int valor){
    SimpleDateFormat df = new SimpleDateFormat("dd-MM-yyyy");
    int retorno=0;
    java.util.Date date1 = null;
    java.util.Date date2 = null;
    try
    {
        Calendar cal1 = null;
        date1=df.parse(fec1);
        cal1=Calendar.getInstance();

        Calendar cal2 = null;
        date2=df.parse(fec2);
        cal2=Calendar.getInstance();

        // different date might have different offset
        cal1.setTime(date1);
        long ldate1 = date1.getTime() + cal1.get(Calendar.ZONE_OFFSET) + cal1.get(Calendar.DST_OFFSET);

        cal2.setTime(date2);
        long ldate2 = date2.getTime() + cal2.get(Calendar.ZONE_OFFSET) + cal2.get(Calendar.DST_OFFSET);

        // Use integer calculation, truncate the decimals
        int hr1 = (int)(ldate1/3600000); //60*60*1000
        int hr2 = (int)(ldate2/3600000);

        int days1 = (int)hr1/24;
        int days2 = (int)hr2/24;

        int dateDiff = days2 - days1;
        int yearDiff = cal2.get(Calendar.YEAR) - cal1.get(Calendar.YEAR);
        int monthDiff = yearDiff * 12 + cal2.get(Calendar.MONTH) - cal1.get(Calendar.MONTH);

        if(valor==1) {
          //  if (dateDiff<0) dateDiff=dateDiff*(-1);
            retorno=dateDiff;
            }else if(valor==2){
            if (monthDiff<0) monthDiff=monthDiff*(-1);
            retorno=monthDiff;
        }else if(valor==3){
                if (yearDiff<0) yearDiff=yearDiff*(-1);
                retorno=yearDiff;
        }
    }
    catch (ParseException pe)
    {
        pe.printStackTrace();
    }
    return retorno;
} 
 // ------------------------------------------------------------------------------------------------------------------------
  public String dateToMySQLDate(String fecha)
    {
        String df,y,m,d;
        
               
        fecha=fecha.trim();
        
        if (fecha.length() >0 ){
        
        
        d = fecha.substring(0, 2) ; System.out.println("dia ="+d);
        m = fecha.substring(3,5) ;  System.out.println("mes ="+m);
        y = fecha.substring(6,10) ;  System.out.println("año ="+y);
        
        df = y+"-"+m+"-"+d+ " 00:00:00";
        } else {
            df = "" ;
        }
       
        return df;
        
       
    }
   // ------------------------------------------------------------------------------------------------------------------------
   public String sumarRestarDiasFecha(String sFecha, int dias){
      Date FechaRes = null;
      String sFechaRes="";
      SimpleDateFormat df = new SimpleDateFormat("dd-MM-yyyy");
    
      java.util.Date Fecha = null;
  
        try {
            Fecha=df.parse(sFecha);
        } catch (ParseException ex) {
            Logger.getLogger(FramePrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
       
      Calendar calendar = Calendar.getInstance();

      calendar.setTime(Fecha); // Configuramos la fecha que se recibe

      calendar.add(Calendar.DAY_OF_YEAR, dias);  // numero de días a añadir, o restar en caso de días<0
      
      FechaRes  = calendar.getTime(); 
      sFechaRes = df.format(FechaRes);
      return sFechaRes; // Devuelve el objeto Date con los nuevos días añadidos
	
 }
  // ------------------------------------------------------------------------------------------------------------------------
 private void actualizarTablaHistoricoAhorroCliente(int id_cliente) {
     
               
                DefaultTableModel model2;
		model2 = new DefaultTableModel();        // definimos el objeto tableModel
               
		miTabla02 = new JTable();                // creamos la instancia de la tabla
		miTabla02.setModel(model2);
                
                model2.addColumn("id"); 
                model2.addColumn("Fecha"); 
                model2.addColumn("nombre"); 
                model2.addColumn("cups"); 
                model2.addColumn("t. actual");
                model2.addColumn("mercado");
                model2.addColumn("direccion"); 
                model2.addColumn("provincia"); 
                model2.addColumn("cif");                 
                model2.addColumn("D.Fct.Opt.");
		model2.addColumn("A. Conseguido €");
		model2.addColumn("A. Total €");
                model2.addColumn("Coste Total €");
                model2.addColumn("Coste Simulado €");
                model2.addColumn("% Ahorro");
                
                miTabla02.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
		miTabla02.getTableHeader().setReorderingAllowed(false);
                
                //Nueva instancia de la clase que contiene el formato
                FormatoTablaPuntos formato = new FormatoTablaPuntos();
                          
                //Se obtiene la tabla y se establece el formato para cada tipo de dato
                
                miTabla02.setDefaultRenderer(Double.class, formato); 
                miTabla02.setDefaultRenderer(String.class, formato); 
                miTabla02.setDefaultRenderer(Integer.class, formato);
                miTabla02.setDefaultRenderer(Object.class, formato);
		
               saepDao misaepDao2 = new saepDao();
                
                
		misaepDao2.consultaHistoricoAhorrosCliente(model2,id_cliente);
                this.nPuntosCalAhorroDetalle = misaepDao2.nPuntosCalAhorroDetalle ;
                
                
                miBarra02.setViewportView(miTabla02);
                
             
             
                
 }    
 // ------------------------------------------------------------------------------------------------------------------------
 private void actualizarTablaAnexoResumenAhorro(int id_cliente) {
        
     String sFecha="";
     
               
                // ...................................................
     
     
                if (this.filtrobusca == 1) {                
                    sFecha = jTextField32.getText();   sFecha = sFecha.trim();                 
                    sFecha = dateToMySQLDate(sFecha); 
                } else {
                    
                    sFecha = dateToMySQLDate(this.FechaUltimoCalculo.trim()) ;
                    
                    
                }
                   
                //....................................................
     
     
     
                DefaultTableModel model3;
		model3 = new DefaultTableModel();        // definimos el objeto tableModel
               
		miTabla03 = new JTable();                // creamos la instancia de la tabla
		miTabla03.setModel(model3);
                 
                model3.addColumn("FECHA");  
                model3.addColumn("DESDE"); 
                model3.addColumn("HASTA"); 
                model3.addColumn("NOMBRE");                
                model3.addColumn("DIRECCIÓN"); 
                model3.addColumn("LOCALIDAD"); 
                model3.addColumn("CUPS"); 
                model3.addColumn("TARIFA"); 
                model3.addColumn("DIAS DE CALCULO");
                model3.addColumn("AHORRO CONSEGUIDO");
                model3.addColumn("AHORRO TOTAL");
                model3.addColumn("AHORRO %"); 
                model3.addColumn("DIAS FACT. OPT.");
              
              
                //Nueva instancia de la clase que contiene el formato
                FormatoTablaPuntos formato = new FormatoTablaPuntos();
                          
                //Se obtiene la tabla y se establece el formato para cada tipo de dato
                
                miTabla03.setDefaultRenderer(Double.class, formato); 
                miTabla03.setDefaultRenderer(String.class, formato); 
                miTabla03.setDefaultRenderer(Integer.class, formato);
                miTabla03.setDefaultRenderer(Object.class, formato);
		
                TableColumn columna3 = miTabla03.getColumn("NOMBRE");
                TableColumn columna4 = miTabla03.getColumn("DIRECCIÓN");
                TableColumn columna5 = miTabla03.getColumn("LOCALIDAD");
                TableColumn columna6 = miTabla03.getColumn("CUPS");
                TableColumn columna7 = miTabla03.getColumn("AHORRO CONSEGUIDO");
                TableColumn columna8 = miTabla03.getColumn("AHORRO TOTAL");
                TableColumn columna9 = miTabla03.getColumn("AHORRO %");
                TableColumn columna10 = miTabla03.getColumn("DIAS FACT. OPT.");
                
                columna3.setMinWidth(130);
                columna4.setMinWidth(220);
                columna5.setMinWidth(120);
                columna6.setMinWidth(150);
                columna7.setMinWidth(50);
                columna8.setMinWidth(50);
                columna9.setMinWidth(50);
                columna10.setMinWidth(150);
                
                
               saepDao misaepDao = new saepDao();
                
                
		misaepDao.consultaResumenAhorrosCliente(model3,id_cliente,sFecha,0);        // Genero tabla resumen
                misaepDao.consultaResumenAhorrosCliente(model3,id_cliente,sFecha,1);        // Calculo totales
                misaepDao.consultaResumenAhorrosCliente(model3,id_cliente,sFecha,2);        // Calculo SUBTOTALES AHORRO Y DIAS
                miBarra03.setViewportView(miTabla03);
                
                this.nPuntosCalAhorro = misaepDao.nPuntosCalAhorro ;        // Numero total de puntos de cálculo de ahorro para esa fecha
                jTextField76.setText(String.valueOf(this.nPuntosCalAhorro));
                
                 // ----------------------------------------------------------------------
                
                this.ahorro_total_actual = misaepDao.ahorroTotal ;             System.out.println("Ahorro total calculado ="+this.ahorro_total_actual);
                this.pAhorro             = misaepDao.pAhorro ;
               
                
                NumberFormat formatoImporte = NumberFormat.getCurrencyInstance();
                NumberFormat formatoPorcentaje = NumberFormat.getPercentInstance();
               

                formatoImporte = NumberFormat.getCurrencyInstance(new Locale("es","ES"));
                
     
                String sAhorro    = formatoImporte.format(this.ahorro_total_actual);
                String sporAhorro = formatoPorcentaje.format(this.pAhorro);
                
                jTextField63.setText(sAhorro);
                jTextField64.setText(sporAhorro);
                
                
                // ----------------------------------------------------------------------
                
 }    
 // ------------------------------------------------------------------------------------------------------------------------
 private void actualizarTablaAnexoDetalleAhorro(int id_cliente) throws SQLException {
                 int i, nCal, idCA, idTCA, id_punto,dias ;
                 String sAhorro,sFecha1,sFecha2 ;

                  String sFecha="";
     
               
                // ...................................................
     
     
                if (this.filtrobusca == 1) {                
                    sFecha = jTextField32.getText();   sFecha = sFecha.trim();                 
                    sFecha = dateToMySQLDate(sFecha); 
                } else {
                    
                    sFecha = dateToMySQLDate(this.FechaUltimoCalculo.trim()) ;
                    
                    
                }
                   
                //....................................................
     
                 
                 
                 
                 NumberFormat formatoImporte = NumberFormat.getCurrencyInstance();
                 NumberFormat formatoPorcentaje = NumberFormat.getPercentInstance();
                 NumberFormat formatoNumero = NumberFormat.getNumberInstance();
                 formatoImporte = NumberFormat.getCurrencyInstance(new Locale("es","ES"));
                 SimpleDateFormat formatDateJava = new SimpleDateFormat("dd-MM-yyyy");
            

                 DefaultTableModel model22;

                 model22 = new DefaultTableModel();                                      // definimos el objeto tableModel dumi
               
                DefaultTableModel model4;
		model4 = new DefaultTableModel();        // definimos el objeto tableModel
               
		miTabla04 = new JTable();                // creamos la instancia de la tabla
		miTabla04.setModel(model4);
                 
                
                
                
                model4.addColumn("NOMBRE"); 
                model4.addColumn("DIRECCIÓN"); 
                model4.addColumn("LOCALIDAD"); 
                model4.addColumn("CUPS"); 
                model4.addColumn("TARIFA ACTUAL"); 
                model4.addColumn("FECHA INI"); 
                model4.addColumn("FECHA FIN"); 
                model4.addColumn("DIAS");                               // 7
                model4.addColumn("DIAS DESDE OPTIMIZACIÓN");
                model4.addColumn("AHORRO CONSEGUIDO");
                model4.addColumn("AHORRO");                             // 10
                model4.addColumn("E. P1 kWh"); 
                model4.addColumn("E. P2 kWh"); 
                model4.addColumn("E. P3 kWh");
                model4.addColumn("E. Peaje kWh");
                model4.addColumn("P.Act. P1 €/kWh");
                model4.addColumn("P.Act. P2 €/kWh");
                model4.addColumn("P.Act. P3 €/kWh");
                model4.addColumn("P.Act. E peaje €/kWh");
                model4.addColumn("P.Sim. P1 €/kWh");
                model4.addColumn("P.Sim. P2 €/kWh");                  // 20 
                model4.addColumn("P.Sim. P3 €/kWh");
                model4.addColumn("P.Sim. E peaje €/kWh");
                model4.addColumn("Act. P1 kW"); 
                model4.addColumn("Sim. P1 kW"); 
                model4.addColumn("P.Act. P1 €/kW·dia");                
                model4.addColumn("P.Sim. P1 €/kW·dia");
                model4.addColumn("Act. P2 kW"); 
                model4.addColumn("Sim. P2 kW"); 
                model4.addColumn("P.Act. P2 €/kW·dia");                
                model4.addColumn("P.Sim. P2 €/kW·dia");
                model4.addColumn("Act. P3 kW"); 
                model4.addColumn("Sim. P3 kW"); 
                model4.addColumn("P.Act. P3 €/kW·dia");                
                model4.addColumn("P.Sim. P3 €/kW·dia");
                
                miTabla04.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
		miTabla04.getTableHeader().setReorderingAllowed(false);
                
                //Nueva instancia de la clase que contiene el formato
                FormatoTablaPuntos formato = new FormatoTablaPuntos();
                          
                //Se obtiene la tabla y se establece el formato para cada tipo de dato
                
                miTabla04.setDefaultRenderer(Double.class, formato); 
                miTabla04.setDefaultRenderer(String.class, formato); 
                miTabla04.setDefaultRenderer(Integer.class, formato);
                miTabla04.setDefaultRenderer(Object.class, formato);
		
               saepDao misaepDao = new saepDao();
                
                
		tablaC03 = new JTable();                                          // creamos la instancia de la tabla
		tablaC03.setModel(model22);
                 
                model22.addColumn("DATO"); 
                model22.addColumn("VALOR");       
                
                
                saepDao misaepDao5 = new saepDao();
                
                misaepDao5.consultaCalculoDetalles(model4,this.id_cliente_actual,sFecha);
                
                this.lhistoricoCalculos = misaepDao5.lhistoricoCalculos ;
                this.nPuntosCalAhorroDetalle = misaepDao5.nCalculosDetalle; System.out.println("---------------------------------------- > TENEMOS nCalculosDetalle="+this.nPuntosCalAhorroDetalle);
                                
                misaepDao5.consultaFechasFacturas();
                misaepDao5.consultaDatosActualesDetalle();
                misaepDao5.consultaDatosSimulacionDetalle();
                
                for (i=0; i<misaepDao5.nCalculosDetalle; i++){
               
                    
                        
                        // ...............................................
                       

                        model4.setValueAt(misaepDao5.lDatosCalculos[i][0] , i, 5);                     // fecha  inicio calculo
                        model4.setValueAt(misaepDao5.lDatosCalculos[i][1] , i, 6);                     // fecha  fin calculo
                        
                        model4.setValueAt(misaepDao5.lDatosCalculos[i][2] , i, 11);                      // p1 energia actual
                        model4.setValueAt(misaepDao5.lDatosCalculos[i][3] , i, 12);                      // p2 energia actual
                        model4.setValueAt(misaepDao5.lDatosCalculos[i][4] , i, 13);                      // p3 energia actual
                        model4.setValueAt(misaepDao5.lDatosCalculos[i][5] , i, 14);  // energia peaje actual
                        
                        model4.setValueAt(misaepDao5.lDatosCalculos[i][7] , i, 23);                      // p1 potencia actual
                        model4.setValueAt(misaepDao5.lDatosCalculos[i][8] , i, 27);                      // p2 potencia actual
                        model4.setValueAt(misaepDao5.lDatosCalculos[i][9] , i, 31);                      // p3 potencia actual
                        
                        model4.setValueAt(misaepDao5.lDatosCalculos[i][10] , i, 25);                      // p1 €/kW·dia actual
                        model4.setValueAt(misaepDao5.lDatosCalculos[i][11] , i, 29);                      // p2 €/kW·dia actual
                        model4.setValueAt(misaepDao5.lDatosCalculos[i][12] , i, 33);                      // p3 €/kW·dia actual
                        
                        
                        
                        model4.setValueAt(misaepDao5.lDatosCalculos[i][13] , i, 15);                      // p1 €/kWh actual
                        model4.setValueAt(misaepDao5.lDatosCalculos[i][14] , i, 16);                      // p2 €/kWh actual
                        model4.setValueAt(misaepDao5.lDatosCalculos[i][15] , i, 17);                      // p3 €/kWh actual
                        
                        model4.setValueAt(misaepDao5.lDatosCalculos[i][25] , i, 18);                      // precio de peaje
                      
                    //    System.out.println("Calculo fechas para i="+i);
                        sFecha1 = misaepDao5.lDatosCalculos[i][0]; sFecha1.trim();
                        sFecha2 = misaepDao5.lDatosCalculos[i][1]; sFecha2.trim();
    
                        dias = diferenciaFechas(sFecha1, sFecha2 ,1);    
                       
                        model4.setValueAt(dias , i, 7);                                                 // dias de calculo
                        
                        model4.setValueAt(misaepDao5.lDatosCalculos[i][16] , i, 24);                      // p1 potencia simulacion
                        model4.setValueAt(misaepDao5.lDatosCalculos[i][17] , i, 28);                      // p2 potencia simulacion
                        model4.setValueAt(misaepDao5.lDatosCalculos[i][18] , i, 32);                      // p3 potencia simulacion
                        
                        model4.setValueAt(misaepDao5.lDatosCalculos[i][19] , i, 26);                      // p1 €/kW·dia simulacion
                        model4.setValueAt(misaepDao5.lDatosCalculos[i][20] , i, 30);                      // p2 €/kW·dia simulacion
                        model4.setValueAt(misaepDao5.lDatosCalculos[i][21] , i, 34);                      // p3 €/kW·dia simulacion
                        
                        model4.setValueAt(misaepDao5.lDatosCalculos[i][22] , i, 19);                      // p1 €/kWh simulacion
                        model4.setValueAt(misaepDao5.lDatosCalculos[i][23] , i, 20);                      // p2 €/kWh simulacion
                        model4.setValueAt(misaepDao5.lDatosCalculos[i][24] , i, 21);                      // p3 €/kWh simulacion
                        
                        model4.setValueAt(misaepDao5.lDatosCalculos[i][25] , i, 22);                      // precio de peaje simulacion
              
                }
            
                miBarra04.setViewportView(miTabla04);
                
 }    
 // -----------------------------------------------------------------------------------------------------------
       public void GenerarExelAnexoResumen(){
           
        String col1,col2,col3,col4,col5,col6,col7,col8,col9,col10,col11,col12 ;
       
        int i,j,nR;
       
        System.out.println("APUNTO DE GENERAR EXEL RESUMEN ANEXO");
        
        int resp=JOptionPane.showConfirmDialog(null,"¿Crear EXCELs  de ANEXO RESUMEN : ?");
        
        
        if (JOptionPane.OK_OPTION == resp){
        

                    nR  = this.nPuntosCalAhorro ;
                   

            HSSFWorkbook libro = new HSSFWorkbook();        
            HSSFSheet hoja = libro.createSheet("RESUMEN");
            Row fila = hoja.createRow(0);        
            Cell celda;


            String[] titulos = { "NOMBRE","DIRECCIÓN TIENDA","LOCALIDAD","CUPS","TARIFA","FECHA INI.","FECHA FIN","DIAS DESDE OPTIMIZACIÓN",
                                 "AHORRO CONSEGUIDO","AHORRO TOTAL", "% AHORRO", "DIAS FACT. OPT." };                                      // 9 CAMPOS

            NumberFormat formatoImporte = NumberFormat.getCurrencyInstance();
            NumberFormat formatoPorcentaje = NumberFormat.getPercentInstance();
            NumberFormat formatoNumero = NumberFormat.getNumberInstance();
            formatoImporte = NumberFormat.getCurrencyInstance(new Locale("es","ES"));
                
     
            
           
            // Creamos el encabezado

            for (i = 0; i < titulos.length; i++) {
                  celda = fila.createCell(i);
                  celda.setCellValue(titulos[i]);
            }
 

            for (j=0; j<nR; j++) {

               // Nueva fila 
               i = 0 ;
               fila = hoja.createRow(j+1);

               System.out.println("Inserto celdas Exel en fila  ="+j);
               
               col10= (String) miTabla03.getValueAt(j, 1) ;                              //FECHA INI
               col11= (String) miTabla03.getValueAt(j, 2) ;                              //FECHA FIN        
               
               col1 = (String) miTabla03.getValueAt(j, 3) ;                              //NOMBRE
               col2 = (String) miTabla03.getValueAt(j, 4) ;                              // DIRECCIÓN TIENDA
               col3 = (String) miTabla03.getValueAt(j, 5);                               // LOCALIDAD
               col4 = (String) miTabla03.getValueAt(j, 6);                               // CUPS
               col5 = (String) miTabla03.getValueAt(j, 7);                               // TARIFA
               col6 = String.valueOf(miTabla03.getValueAt(j, 8));                        // DIAS DESDE OPTIMIZACIÓN       
               
               String sAhorro       = formatoNumero.format(miTabla03.getValueAt(j, 9));                              
             //  col7 = sAhorro ;                                                          //AHORRO CONSEGUIDO
               col7 = String.valueOf(miTabla03.getValueAt(j, 9)); 
              
               String sAhorroTotal = formatoNumero.format(miTabla03.getValueAt(j, 10));     
             //  col8 = sAhorroTotal ;                                                    //AHORRO TOTAL
               col8 = String.valueOf(miTabla03.getValueAt(j, 10));  
               col9 = String.valueOf(miTabla03.getValueAt(j, 11));                        // Porcentaje ahorro
               
               col12 = String.valueOf(miTabla03.getValueAt(j, 12));                        // Dias de facturación optimizada
               // ....................................................................................
               
              
               celda = fila.createCell(i);  celda.setCellValue(col1);      i++;        // 
               celda = fila.createCell(i);  celda.setCellValue(col2);      i++;        //   
               celda = fila.createCell(i);  celda.setCellValue(col3);      i++;        // 
               celda = fila.createCell(i);  celda.setCellValue(col4);      i++;        // 
               celda = fila.createCell(i);  celda.setCellValue(col5);      i++;        // 
               
               celda = fila.createCell(i);  celda.setCellValue(col10);     i++;        // 
               celda = fila.createCell(i);  celda.setCellValue(col11);     i++;        // 
               
               celda = fila.createCell(i);  celda.setCellValue(col6);      i++;        //
               celda = fila.createCell(i);  celda.setCellValue(col7);      i++;        //
               celda = fila.createCell(i);  celda.setCellValue(col8);      i++;        //
               celda = fila.createCell(i);  celda.setCellValue(col9);      i++;        //
               celda = fila.createCell(i);  celda.setCellValue(col12);      i++;        //
            }

            try
            {
                String nombre="";
                JFileChooser file=new JFileChooser();
                file.showSaveDialog(this);
                File guarda =file.getSelectedFile();

                if(guarda !=null)
                {
                     nombre=file.getSelectedFile().getName();
                    //guardamos el archivo y le damos el formato directamente,
                    // si queremos que se guarde en formato doc lo definimos como .doc

                     FileOutputStream elFichero = new FileOutputStream(guarda+".xls");
                     libro.write(elFichero);
                     elFichero.close();


                     JOptionPane.showMessageDialog(null,
                     "El archivo ANEXO RESUMEN se a guardado Exitosamente",
                     "Información",JOptionPane.INFORMATION_MESSAGE);
                }
             }
             catch(IOException ex)
             {
                      JOptionPane.showMessageDialog(null,
                      "Su archivo ANEXO RESUMEN no se ha guardado",
                      "Advertencia",JOptionPane.WARNING_MESSAGE);
             }

            // Se salva el libro.
            try {

            } catch (Exception e) {
                e.printStackTrace();
            }
      }
          
       }
    // -----------------------------------------------------------------------------------------------------------
       public void GenerarExelAnexoResumenDetalle(){
           
        String col1,col2,col3,col4,col5,col6,col7,col8,col9,col10,col11,col12,col13,col14,col15,col16,col17,col18,col19,col20 ;
        String col21,col22,col23,col24,col25,col26,col27,col28,col29,col30 ;
        String col31,col32,col33,col34,col35 ;
        
        int i,j,nR;
       
        System.out.println("APUNTO DE GENERAR EXEL DETALLE ANEXO");
        
        int resp=JOptionPane.showConfirmDialog(null,"¿Crear EXCEL  de ANEXO DETALLE : ?");
        
        
        if (JOptionPane.OK_OPTION == resp){
        

                    nR  = this.nPuntosCalAhorroDetalle ;        System.out.println("Generando "+nR+" filas de anexo de detalle en exel");
                   

            HSSFWorkbook libro = new HSSFWorkbook();        
            HSSFSheet hoja = libro.createSheet("DETALLE");
            Row fila = hoja.createRow(0);        
            Cell celda;


            String[] titulos = { "NOMBRE","DIRECCIÓN TIENDA","LOCALIDAD","CUPS","TARIFA","FECHA INI", "FECHA FIN", "DIAS",
                                 "DIAS DESDE LA OPTIMIZACION","AHORRO CONSEGUIDO","AHORRO TOTAL", "E. P1 kWh", "E. P2 kWh", "E. P3 kWh",
                                 "E. Peaje kWh","P.Act. P1 €/kWh","P.Act. P2 €/kWh","P.Act. P3 €/kWh","P.Act. E peaje €/kWh",
                                 "P.Sim. P1 €/kWh","P.Sim. P2 €/kWh","P.Sim. P3 €/kWh","P.Sim. E peaje €/kWh","Act. P1 kW","Sim. P1 kW",
                                 "P.Act. P1 €/kW·dia","P.Sim. P1 €/kW·dia","Act. P2 kW","Sim. P2 kW","P.Act. P2 €/kW·dia","P.Sim. P2 €/kW·dia",
                                 "Act. P3 kW","Sim. P3 kW","P.Act. P3 €/kW·dia","P.Sim. P3 €/kW·dia"};                                          // 35 CAMPOS
 
            NumberFormat formatoImporte = NumberFormat.getCurrencyInstance();
            NumberFormat formatoPorcentaje = NumberFormat.getPercentInstance();
            NumberFormat formatoNumero = NumberFormat.getNumberInstance();
            formatoImporte = NumberFormat.getCurrencyInstance(new Locale("es","ES"));
            
            // Creamos el encabezado

            for (i = 0; i < titulos.length; i++) {
                  celda = fila.createCell(i);
                  celda.setCellValue(titulos[i]);
            }
            for (j=0; j<nR  ; j++) {

               // Nueva fila 
               i = 0 ;
               fila = hoja.createRow(j+1);
               System.out.println("Inserto celdas Excel en fila  ="+j);
               
               col1 = (String) miTabla04.getValueAt(j, 0) ;                              //NOMBRE
               col2 = (String) miTabla04.getValueAt(j, 1) ;                              // DIRECCIÓN TIENDA
               col3 = (String) miTabla04.getValueAt(j, 2);                               // LOCALIDAD
               col4 = (String) miTabla04.getValueAt(j, 3);                               // CUPS
               col5 = (String) miTabla04.getValueAt(j, 4);                               // TARIFA
               col6 = (String) miTabla04.getValueAt(j, 5);                               // FECHA INI
               col7 = (String) miTabla04.getValueAt(j, 6);                               // FECHA FIN               
               col8 = String.valueOf(miTabla04.getValueAt(j, 7));                        // DIAS  
               col9 = String.valueOf(miTabla04.getValueAt(j, 8));                        // DIAS DESDE OPTIMIZACIÓN  
               
               System.out.println(j+"- getValueAt(j, 9)="+miTabla04.getValueAt(j, 9));
               System.out.println(j+"- getValueAt(j, 10)="+miTabla04.getValueAt(j, 10));
               System.out.println(j+"- getValueAt(j, 11)="+miTabla04.getValueAt(j, 11));
               
               col10= formatoNumero.format(miTabla04.getValueAt(j, 9));                       // AHORRO CONSEGUIDO
               col11= formatoNumero.format(miTabla04.getValueAt(j, 10));                       // AHORRO TOTAL
              
             
               col12= (String) (miTabla04.getValueAt(j, 11));                       // E. P1 Kwh
               col13= (String) (miTabla04.getValueAt(j, 12));                       // E. P2 Kwh
               col14= (String) (miTabla04.getValueAt(j, 13));                       // E. P3 Kwh
                
               col15= (String) (miTabla04.getValueAt(j, 14));                       // E. Peaje kWh
               col16= (String) (miTabla04.getValueAt(j, 15));                       // P.Act. P1 €/kWh
               col17= (String) (miTabla04.getValueAt(j, 16));                       // P.Act. P2 €/kWh
               col18= (String) (miTabla04.getValueAt(j, 17));                       // P.Act. P3 €/kWh
                
               col19= (String) (miTabla04.getValueAt(j, 18));                       // P.Act. E peaje €/kWh
               col20= (String) (miTabla04.getValueAt(j, 19));                       // P.Sim. P1 €/kWh
               col21= (String) (miTabla04.getValueAt(j, 20));                       // P.Sim. P2 €/kWh
               col22= (String) (miTabla04.getValueAt(j, 21));                       // P.Sim. P3 €/kWh
               col23= (String) (miTabla04.getValueAt(j, 22));                       // P.Sim. E peaje €/kWh
               col24= (String) (miTabla04.getValueAt(j, 23));                       // Act. P1 kW
               col25= (String) (miTabla04.getValueAt(j, 24));                       // Sim. P1 kW
               col26= (String) (miTabla04.getValueAt(j, 25));                       // P.Act. P1 €/kW·dia
               col27= (String) (miTabla04.getValueAt(j, 26));                       // P.Sim. P1 €/kW·dia
               col28= (String) (miTabla04.getValueAt(j, 27));                       // Act. P2 kW
               col29= (String) (miTabla04.getValueAt(j, 28));                       // Sim. P2 kW
               col30= (String) (miTabla04.getValueAt(j, 29));                       // P.Act. P2 €/kW·dia
               col31= (String) (miTabla04.getValueAt(j, 30));                       // P.Sim. P2 €/kW·dia
               col32= (String) (miTabla04.getValueAt(j, 31));                       // Act. P3 kW
               col33= (String) (miTabla04.getValueAt(j, 32));                       // Sim. P3 kW
               col34= (String) (miTabla04.getValueAt(j, 33));                       // P.Act. P3 €/kW·dia
               col35= (String) (miTabla04.getValueAt(j, 34));                       // P.Sim. P3 €/kW·dia
              
               // ....................................................................................
               
               celda = fila.createCell(i);  celda.setCellValue(col1);      i++;        // 
               celda = fila.createCell(i);  celda.setCellValue(col2);      i++;        //   
               celda = fila.createCell(i);  celda.setCellValue(col3);      i++;        // 
               celda = fila.createCell(i);  celda.setCellValue(col4);      i++;        // 
               celda = fila.createCell(i);  celda.setCellValue(col5);      i++;        // 
               celda = fila.createCell(i);  celda.setCellValue(col6);      i++;        //
               celda = fila.createCell(i);  celda.setCellValue(col7);      i++;        //
               celda = fila.createCell(i);  celda.setCellValue(col8);      i++;        //
               celda = fila.createCell(i);  celda.setCellValue(col9);      i++;        //
               celda = fila.createCell(i);  celda.setCellValue(col10);     i++;        //
               celda = fila.createCell(i);  celda.setCellValue(col11);     i++;        //
               
               celda = fila.createCell(i);  celda.setCellValue(col12);     i++;        //
               celda = fila.createCell(i);  celda.setCellValue(col13);     i++;        //
               celda = fila.createCell(i);  celda.setCellValue(col14);     i++;        //
               
               
               celda = fila.createCell(i);  celda.setCellValue(col15);     i++;        //
               celda = fila.createCell(i);  celda.setCellValue(col16);     i++;        //
               celda = fila.createCell(i);  celda.setCellValue(col17);     i++;        //
               celda = fila.createCell(i);  celda.setCellValue(col18);     i++;        //
               
               celda = fila.createCell(i);  celda.setCellValue(col19);     i++;        //
               celda = fila.createCell(i);  celda.setCellValue(col20);     i++;        //
               celda = fila.createCell(i);  celda.setCellValue(col21);     i++;        //
               celda = fila.createCell(i);  celda.setCellValue(col22);     i++;        //
               celda = fila.createCell(i);  celda.setCellValue(col23);     i++;        //
               celda = fila.createCell(i);  celda.setCellValue(col24);     i++;        //
               celda = fila.createCell(i);  celda.setCellValue(col25);     i++;        //
               celda = fila.createCell(i);  celda.setCellValue(col26);     i++;        //
               celda = fila.createCell(i);  celda.setCellValue(col27);     i++;        //
               celda = fila.createCell(i);  celda.setCellValue(col28);     i++;        //
               celda = fila.createCell(i);  celda.setCellValue(col29);     i++;        //
               celda = fila.createCell(i);  celda.setCellValue(col30);     i++;        //
               celda = fila.createCell(i);  celda.setCellValue(col31);     i++;        //
               celda = fila.createCell(i);  celda.setCellValue(col32);     i++;        //
               celda = fila.createCell(i);  celda.setCellValue(col33);     i++;        //
               celda = fila.createCell(i);  celda.setCellValue(col34);     i++;        //
               celda = fila.createCell(i);  celda.setCellValue(col35);     i++;        //
               
            }

            try
            {
                String nombre="";
                JFileChooser file=new JFileChooser();
                file.showSaveDialog(this);
                File guarda =file.getSelectedFile();

                if(guarda !=null)
                {
                     nombre=file.getSelectedFile().getName();
                    //guardamos el archivo y le damos el formato directamente,
                    // si queremos que se guarde en formato doc lo definimos como .doc

                     FileOutputStream elFichero = new FileOutputStream(guarda+".xls");
                     libro.write(elFichero);
                     elFichero.close();


                     JOptionPane.showMessageDialog(null,
                     "El archivo ANEXO DETALLE se a guardado Exitosamente",
                     "Información",JOptionPane.INFORMATION_MESSAGE);
                }
             }
             catch(IOException ex)
             {
                      JOptionPane.showMessageDialog(null,
                      "Su archivo ANEXO DETALLE no se ha guardado",
                      "Advertencia",JOptionPane.WARNING_MESSAGE);
             }

            // Se salva el libro.
            try {

            } catch (Exception e) {
                e.printStackTrace();
            }
      }
          
       }
        // -----------------------------------------------------------------------------------------------------------
       public void GenerarExelPotencias(){
           
        String col1,col2,col3,col4,col5 ;
       
        int i,j,nR;
       
        System.out.println("APUNTO DE GENERAR EXEL POTENCIAS");
        
        int resp=JOptionPane.showConfirmDialog(null,"¿Crear EXCELs  de POTENCIAS : ?");
        
        
        if (JOptionPane.OK_OPTION == resp){
        

                    nR  = this.nPuntosCalAhorro ;
                   

            HSSFWorkbook libro = new HSSFWorkbook();        
            HSSFSheet hoja = libro.createSheet("RESUMEN");
            Row fila = hoja.createRow(0);        
            Cell celda;


            String[] titulos = { "NOMBRE","DIRECCIÓN TIENDA","LOCALIDAD","CUPS","TARIFA","FECHA INI.","FECHA FIN","DIAS DESDE OPTIMIZACIÓN",
                                 "AHORRO CONSEGUIDO","AHORRO TOTAL", "% AHORRO", "DIAS FACT. OPT." };                                      // 9 CAMPOS

            NumberFormat formatoImporte = NumberFormat.getCurrencyInstance();
            NumberFormat formatoPorcentaje = NumberFormat.getPercentInstance();
            NumberFormat formatoNumero = NumberFormat.getNumberInstance();
            formatoImporte = NumberFormat.getCurrencyInstance(new Locale("es","ES"));
                
     
            
           
            // Creamos el encabezado

            for (i = 0; i < titulos.length; i++) {
                  celda = fila.createCell(i);
                  celda.setCellValue(titulos[i]);
            }
 

            for (j=0; j<nR; j++) {

               // Nueva fila 
               i = 0 ;
               fila = hoja.createRow(j+1);

               System.out.println("Inserto celdas Exel en fila  ="+j);
               
                
               
               col1 = (String) miTabla03.getValueAt(j, 3) ;                              //NOMBRE
               col2 = (String) miTabla03.getValueAt(j, 4) ;                              // DIRECCIÓN TIENDA
               col3 = (String) miTabla03.getValueAt(j, 5);                               // LOCALIDAD
               col4 = (String) miTabla03.getValueAt(j, 6);                               // CUPS
               col5 = (String) miTabla03.getValueAt(j, 7);                               // TARIFA
           
               // ....................................................................................
               
              
               celda = fila.createCell(i);  celda.setCellValue(col1);      i++;        // 
               celda = fila.createCell(i);  celda.setCellValue(col2);      i++;        //   
               celda = fila.createCell(i);  celda.setCellValue(col3);      i++;        // 
               celda = fila.createCell(i);  celda.setCellValue(col4);      i++;        // 
               celda = fila.createCell(i);  celda.setCellValue(col5);      i++;        //               
              
            }

            try
            {
                String nombre="";
                JFileChooser file=new JFileChooser();
                file.showSaveDialog(this);
                File guarda =file.getSelectedFile();

                if(guarda !=null)
                {
                     nombre=file.getSelectedFile().getName();
                    //guardamos el archivo y le damos el formato directamente,
                    // si queremos que se guarde en formato doc lo definimos como .doc

                     FileOutputStream elFichero = new FileOutputStream(guarda+".xls");
                     libro.write(elFichero);
                     elFichero.close();


                     JOptionPane.showMessageDialog(null,
                     "El archivo potencias se a guardado Exitosamente",
                     "Información",JOptionPane.INFORMATION_MESSAGE);
                }
             }
             catch(IOException ex)
             {
                      JOptionPane.showMessageDialog(null,
                      "Su archivo potenciasno se ha guardado",
                      "Advertencia",JOptionPane.WARNING_MESSAGE);
             }

            // Se salva el libro.
            try {

            } catch (Exception e) {
                e.printStackTrace();
            }
      }
          
       }
    // -----------------------------------------------------------------------------------------------------------
    public void ValidarCondicionesActuales() {
        
        int resp=JOptionPane.showConfirmDialog(null,"¿VALIDAR LAS NUEVAS CONDICIONES ACTUALES ?");
        String sqlStr,sFech1,sFech2,sDescripcion,strTarifa ;
        Double importe_AI, importe_DI ;
        
        int estadoInsert=0, id_tF=0,id_tipo_actual, id_tipo_sim,id_cond_actuales, id_cond_sim,fPotMax = 0  ;
     
        
        if (JOptionPane.OK_OPTION == resp){  
        
            // ..............................................................
             this.listaContratosPuntosAct[this.indGen][8] = jTextField33.getText();         // nombre de compañia
             
            
             this.lCondicionesActuales[this.indGen][0] = jTextField28.getText();  
             this.lCondicionesActuales[this.indGen][1] = jTextField11.getText();     
             this.lCondicionesActuales[this.indGen][2] = jTextField19.getText();            // potencia contratada
             this.lCondicionesActuales[this.indGen][3] = jTextField35.getText();    
             this.lCondicionesActuales[this.indGen][4] = jTextField36.getText(); 
             this.lCondicionesActuales[this.indGen][5] = "0";    
             this.lCondicionesActuales[this.indGen][6] = "0";    
             this.lCondicionesActuales[this.indGen][7] = "0";    
             this.lCondicionesActuales[this.indGen][8] =  jTextField16.getText();           // precio potencia
             this.lCondicionesActuales[this.indGen][9] =  jTextField17.getText();       
             this.lCondicionesActuales[this.indGen][10] = jTextField18.getText();     
             this.lCondicionesActuales[this.indGen][11] = "0";   
             this.lCondicionesActuales[this.indGen][12] = "0";   
             this.lCondicionesActuales[this.indGen][13] = "0";   
             this.lCondicionesActuales[this.indGen][14] = jTextField12.getText();           // precio energia
             this.lCondicionesActuales[this.indGen][15] = jTextField13.getText();      
             this.lCondicionesActuales[this.indGen][16] = jTextField14.getText();   
             this.lCondicionesActuales[this.indGen][17] = "0";   
             this.lCondicionesActuales[this.indGen][18] = "0";   
             this.lCondicionesActuales[this.indGen][19] = "0";      
             this.lCondicionesActuales[this.indGen][20] = jTextArea2.getText();             // observaciones
             this.lCondicionesActuales[this.indGen][23] = jTextField73.getText();           // Precio energía de peaje
             this.lCondicionesActuales[this.indGen][24] = jTextField111.getText();          // Alquiler
             
             if (jCheckBox5.isSelected()){
                    this.lCondicionesActuales[this.indGen][25] = "1";
                    fPotMax = 1;
             }
              else {
                    this.lCondicionesActuales[this.indGen][25] = "0" ;
                    fPotMax = 0;
             }
             
            // ..............................................................
             
            
            sDescripcion = this.listaPuntosSum[this.indGen][1] ; 
             
             
           
            sFech1 = jTextField28.getText(); sFech1.trim();     // fecha inicio
            sFech1 = dateToMySQLDate(sFech1);       

            sFech2 = jTextField11.getText(); sFech2.trim();     // fecha fin
            sFech2 = dateToMySQLDate(sFech2);    

           
            saepDao misaepDao3 = new saepDao();
          
            saepDao misaepDao4 = new saepDao();
            // .....................................
            
            System.out.println("this.lCondicionesActuales["+this.indGen+"][22]="+this.lCondicionesActuales[this.indGen][22]);
            System.out.println("this.lCondicionesActuales["+this.indGen+"][21]="+this.lCondicionesActuales[this.indGen][21]);

           try {
                id_tipo_actual      = Integer.parseInt(this.lCondicionesActuales[this.indGen][22]) ;
                id_cond_actuales    = Integer.parseInt(this.lCondicionesActuales[this.indGen][21]) ;
            } catch (NumberFormatException ex) {
            
                 id_tipo_actual      = this.id_tipo_Actual ;
                 id_cond_actuales    = this.id_tipo_Sim ;
            }
             

            // .......................................................................................................................................  
            // .....................................         INSERTA FILA  DE TARIFA 2.0A a TARIFA 2.0A

            if ( this.tipo_Act == 1 ) {                               // .................................   INSERTAMOS EN t_f_20a

                 // .....................................

                 sqlStr  ="INSERT INTO t_c20a (id_cliente,id_punto,compañia,descripcion,potencia_contratada,precio_potencia,precio_energia,fecha_inicio,fecha_fin,observaciones,id_estado) VALUES (";
                 sqlStr += this.id_cliente_actual+",";
                 sqlStr += this.id_punto_actual+",";
                 sqlStr += "'"+jTextField33.getText()+"',";
                 sqlStr += "'"+sDescripcion+"',";
                 sqlStr += jTextField19.getText()+",";
                 sqlStr += jTextField16.getText()+",";
                 sqlStr += jTextField12.getText()+",";
                 sqlStr += "'"+sFech1+"',";
                 sqlStr += "'"+sFech2+"',";
                 sqlStr += "'"+jTextArea2.getText()+"',";            
                 sqlStr += "2"+")";
                 

                 System.out.println(sqlStr);
                 estadoInsert= misaepDao3.registrarFila(sqlStr);

                 // .....................................
                 if (estadoInsert==0){

                    // .....................................                                actualizo el estado de la tabla de datos del punto de suministro
                     sqlStr = "UPDATE t_datos_puntos_suministro SET tarifa_actual='2.0 A',id_tarifa_actual=1 WHERE idd="+this.id_punto_actual ;

                     estadoInsert= misaepDao3.registrarFila(sqlStr);
                     
                     
                    // .....................................                                consultamos el último id que se ha asignado
                
                    sqlStr = "SELECT id FROM t_c20a ORDER BY id DESC LIMIT 1 ";

                    estadoInsert= misaepDao4.ultimoIdentificador(sqlStr);

                    id_tF               = misaepDao4.id ;
               
                    this.lCondicionesActuales[this.indGen][21] = String.valueOf(id_tF );     // Actualizo el identificador de condiciones actuales   
                    
                      // .....................................                                actualizo el estado de la tabla de condiciones de facturacion

                     sqlStr = "UPDATE t_c20a SET id_estado=0 WHERE id="+id_cond_actuales ;

                     estadoInsert= misaepDao3.registrarFila(sqlStr);
                     
                     
                     // .....................................                                actualizo el estado de la tabla de condiciones de facturacion

                     sqlStr = "UPDATE t_c20a SET id_estado=0 WHERE id="+id_cond_actuales ;

                     estadoInsert= misaepDao3.registrarFila(sqlStr);
                    
                      // .....................................                                actualizo el estado de la tabla de contratos puntos a 0
                     
                     sqlStr = "UPDATE t_contratos_puntos SET id_estado=0 WHERE id_punto="+this.id_punto_actual+ " AND id_estado=2" ;

                     estadoInsert= misaepDao3.registrarFila(sqlStr);
                     
                      // .....................................                                Inserto nuevo registro con los cambios producidos
                     
                     strTarifa = this.lTiposTarifas[this.tipo_Act];                          // Tipo de tarifa

                    sqlStr  ="INSERT INTO t_contratos_puntos  (id_cliente,id_punto,fecha_contrato,fecha_fin,id_tarifa,id_condiciones_contrato,descripcion,"
                            + "fecha_realizacion_cambio,observaciones,compañia,id_estado) VALUES (";
                    sqlStr += this.id_cliente_actual+",";
                    sqlStr += this.id_punto_actual+",";
                    sqlStr += "'"+sFech1+"',";
                    sqlStr += "'"+sFech2+"',";
                    sqlStr += this.tipo_Act+",";
                    sqlStr += id_tF+",";
                    sqlStr += "'"+strTarifa+"',";
                    sqlStr += "'"+sFech2+"',";
                    sqlStr += "'"+jTextArea2.getText()+"',"; 
                    sqlStr += "'"+jTextField33.getText()+"',";
                    sqlStr += "2"+")";
                 

                    System.out.println(sqlStr);
                    estadoInsert= misaepDao3.registrarFila(sqlStr);
                     
                    botonValidarCAct.setVisible(false);
                    
                    
                 }         


             }
        if ( this.tipo_Act == 2 ) {                               // .................................   INSERTAMOS EN t_f_20a

                 // .....................................

                 sqlStr  ="INSERT INTO t_c20dha(id_cliente,id_punto,compañia,descripcion,potencia_contratada,precio_potencia,precio_energia_p1,precio_energia_p2,fecha_inicio,fecha_fin,observaciones,id_estado) VALUES (";
                 sqlStr += this.id_cliente_actual+",";
                 sqlStr += this.id_punto_actual+",";
                 sqlStr += "'"+jTextField33.getText()+"',";
                 sqlStr += "'"+sDescripcion+"',";
                 sqlStr += jTextField19.getText()+",";
                 sqlStr += jTextField16.getText()+",";
                 sqlStr += jTextField12.getText()+",";
                 sqlStr += jTextField13.getText()+",";
                 sqlStr += "'"+sFech1+"',";
                 sqlStr += "'"+sFech2+"',";
                 sqlStr += "'"+jTextArea2.getText()+"',";            
                 sqlStr += "2"+")";
                 

                 System.out.println(sqlStr);
                 estadoInsert= misaepDao3.registrarFila(sqlStr);

                 // .....................................
                 if (estadoInsert==0){
                    
                    // .....................................                                actualizo el estado de la tabla de datos del punto de suministro
                     sqlStr = "UPDATE t_datos_puntos_suministro SET tarifa_actual='2.0DHA',id_tarifa_actual=2 WHERE idd="+this.id_punto_actual ;

                     estadoInsert= misaepDao3.registrarFila(sqlStr);
                        
                     
                    // .....................................                                consultamos el último id que se ha asignado
                
                    sqlStr = "SELECT id FROM t_c20dha ORDER BY id DESC LIMIT 1 ";

                    estadoInsert= misaepDao4.ultimoIdentificador(sqlStr);

                    id_tF               = misaepDao4.id ;
               
                    this.lCondicionesActuales[this.indGen][21] = String.valueOf(id_tF );     // Actualizo el identificador de condiciones actuales   
                    
                      // .....................................                                actualizo el estado de la tabla de condiciones de facturacion

                     sqlStr = "UPDATE t_c20dha SET id_estado=0 WHERE id="+id_cond_actuales ;

                     estadoInsert= misaepDao3.registrarFila(sqlStr);
                     
                                         
                      // .....................................                                actualizo el estado de la tabla de contratos puntos a 0
                     
                     sqlStr = "UPDATE t_contratos_puntos SET id_estado=0 WHERE id_punto="+this.id_punto_actual+ " AND id_estado=2" ;

                     estadoInsert= misaepDao3.registrarFila(sqlStr);
                     
                      // .....................................                                Inserto nuevo registro con los cambios producidos
                     
                     strTarifa = this.lTiposTarifas[this.tipo_Act];                          // Tipo de tarifa

                    sqlStr  ="INSERT INTO t_contratos_puntos  (id_cliente,id_punto,fecha_contrato,fecha_fin,id_tarifa,id_condiciones_contrato,descripcion,"
                            + "fecha_realizacion_cambio,observaciones,compañia,id_estado) VALUES (";
                    sqlStr += this.id_cliente_actual+",";
                    sqlStr += this.id_punto_actual+",";
                    sqlStr += "'"+sFech1+"',";
                    sqlStr += "'"+sFech2+"',";
                    sqlStr += this.tipo_Act+",";
                    sqlStr += id_tF+",";
                    sqlStr += "'"+strTarifa+"',";
                    sqlStr += "'"+sFech2+"',";
                    sqlStr += "'"+jTextArea2.getText()+"',"; 
                    sqlStr += "'"+jTextField33.getText()+"',";
                    sqlStr += "2"+")";
                 

                    System.out.println(sqlStr);
                    estadoInsert= misaepDao3.registrarFila(sqlStr);
                     
                    botonValidarCAct.setVisible(false);
                    
                    
                 } 
                 


             }
         // .......................................................................................................................................  
             // .....................................         INSERTA FILA  DE TARIFA 2.1A a TARIFA 2.1A

            if ( this.tipo_Act == 3 ) {                               // .................................   INSERTAMOS EN t_f_20a

                 // .....................................

                 sqlStr  ="INSERT INTO t_c21a (id_cliente,id_punto,compañia,descripcion,potencia_contratada,precio_potencia,precio_energia,fecha_inicio,fecha_fin,observaciones,id_estado) VALUES (";
                 sqlStr += this.id_cliente_actual+",";
                 sqlStr += this.id_punto_actual+",";
                 sqlStr += "'"+jTextField33.getText()+"',";
                 sqlStr += "'"+sDescripcion+"',";
                 sqlStr += jTextField19.getText()+",";
                 sqlStr += jTextField16.getText()+",";
                 sqlStr += jTextField12.getText()+",";
                 sqlStr += "'"+sFech1+"',";
                 sqlStr += "'"+sFech2+"',";
                 sqlStr += "'"+jTextArea2.getText()+"',";            
                 sqlStr += "2"+")";
                 

                 System.out.println(sqlStr);
                 estadoInsert= misaepDao3.registrarFila(sqlStr);

                 // .....................................
                 if (estadoInsert==0){

                    // .....................................                                actualizo el estado de la tabla de datos del punto de suministro
                     sqlStr = "UPDATE t_datos_puntos_suministro SET tarifa_actual='2.1 A',id_tarifa_actual=3 WHERE idd="+this.id_punto_actual ;

                     estadoInsert= misaepDao3.registrarFila(sqlStr);
                     
                     
                    // .....................................                                consultamos el último id que se ha asignado
                
                    sqlStr = "SELECT id FROM t_c21a ORDER BY id DESC LIMIT 1 ";

                    estadoInsert= misaepDao4.ultimoIdentificador(sqlStr);

                    id_tF               = misaepDao4.id ;
               
                    this.lCondicionesActuales[this.indGen][21] = String.valueOf(id_tF );     // Actualizo el identificador de condiciones actuales   
                    
                      // .....................................                                actualizo el estado de la tabla de condiciones de facturacion

                     sqlStr = "UPDATE t_c21a SET id_estado=0 WHERE id="+id_cond_actuales ;

                     estadoInsert= misaepDao3.registrarFila(sqlStr);
                     
                     
                     // .....................................                                actualizo el estado de la tabla de condiciones de facturacion

                     sqlStr = "UPDATE t_c20a SET id_estado=0 WHERE id="+id_cond_actuales ;

                     estadoInsert= misaepDao3.registrarFila(sqlStr);
                    
                      // .....................................                                actualizo el estado de la tabla de contratos puntos a 0
                     
                     sqlStr = "UPDATE t_contratos_puntos SET id_estado=0 WHERE id_punto="+this.id_punto_actual+ " AND id_estado=2" ;

                     estadoInsert= misaepDao3.registrarFila(sqlStr);
                     
                      // .....................................                                Inserto nuevo registro con los cambios producidos
                     
                     strTarifa = this.lTiposTarifas[this.tipo_Act];                          // Tipo de tarifa

                    sqlStr  ="INSERT INTO t_contratos_puntos  (id_cliente,id_punto,fecha_contrato,fecha_fin,id_tarifa,id_condiciones_contrato,descripcion,"
                            + "fecha_realizacion_cambio,observaciones,compañia,id_estado) VALUES (";
                    sqlStr += this.id_cliente_actual+",";
                    sqlStr += this.id_punto_actual+",";
                    sqlStr += "'"+sFech1+"',";
                    sqlStr += "'"+sFech2+"',";
                    sqlStr += this.tipo_Act+",";
                    sqlStr += id_tF+",";
                    sqlStr += "'"+strTarifa+"',";
                    sqlStr += "'"+sFech2+"',";
                    sqlStr += "'"+jTextArea2.getText()+"',"; 
                    sqlStr += "'"+jTextField33.getText()+"',";
                    sqlStr += "2"+")";
                 

                    System.out.println(sqlStr);
                    estadoInsert= misaepDao3.registrarFila(sqlStr);
                     
                    botonValidarCAct.setVisible(false);
                    
                    
                 }         


             }
         if ( this.tipo_Act == 4 ) {                               // .................................   INSERTAMOS EN t_f_20a

                 // .....................................

                 sqlStr  ="INSERT INTO t_c21dha(id_cliente,id_punto,compañia,descripcion,potencia_contratada,precio_potencia,precio_energia_p1,precio_energia_p2,fecha_inicio,fecha_fin,observaciones,id_estado) VALUES (";
                 sqlStr += this.id_cliente_actual+",";
                 sqlStr += this.id_punto_actual+",";
                 sqlStr += "'"+jTextField33.getText()+"',";
                 sqlStr += "'"+sDescripcion+"',";
                 sqlStr += jTextField19.getText()+",";
                 sqlStr += jTextField16.getText()+",";
                 sqlStr += jTextField12.getText()+",";
                 sqlStr += jTextField13.getText()+",";
                 sqlStr += "'"+sFech1+"',";
                 sqlStr += "'"+sFech2+"',";
                 sqlStr += "'"+jTextArea2.getText()+"',";            
                 sqlStr += "2"+")";
                 

                 System.out.println(sqlStr);
                 estadoInsert= misaepDao3.registrarFila(sqlStr);

                 // .....................................
                 if (estadoInsert==0){
                    
                    // .....................................                                actualizo el estado de la tabla de datos del punto de suministro
                     sqlStr = "UPDATE t_datos_puntos_suministro SET tarifa_actual='2.1DHA',id_tarifa_actual=4 WHERE idd="+this.id_punto_actual ;

                     estadoInsert= misaepDao3.registrarFila(sqlStr);
                        
                     
                    // .....................................                                consultamos el último id que se ha asignado
                
                    sqlStr = "SELECT id FROM t_c21dha ORDER BY id DESC LIMIT 1 ";

                    estadoInsert= misaepDao4.ultimoIdentificador(sqlStr);

                    id_tF               = misaepDao4.id ;
               
                    this.lCondicionesActuales[this.indGen][21] = String.valueOf(id_tF );     // Actualizo el identificador de condiciones actuales   
                    
                      // .....................................                                actualizo el estado de la tabla de condiciones de facturacion

                     sqlStr = "UPDATE t_c21dha SET id_estado=0 WHERE id="+id_cond_actuales ;

                     estadoInsert= misaepDao3.registrarFila(sqlStr);
                     
                                         
                      // .....................................                                actualizo el estado de la tabla de contratos puntos a 0
                     
                     sqlStr = "UPDATE t_contratos_puntos SET id_estado=0 WHERE id_punto="+this.id_punto_actual+ " AND id_estado=2" ;

                     estadoInsert= misaepDao3.registrarFila(sqlStr);
                     
                      // .....................................                                Inserto nuevo registro con los cambios producidos
                     
                     strTarifa = this.lTiposTarifas[this.tipo_Act];                          // Tipo de tarifa

                    sqlStr  ="INSERT INTO t_contratos_puntos  (id_cliente,id_punto,fecha_contrato,fecha_fin,id_tarifa,id_condiciones_contrato,descripcion,"
                            + "fecha_realizacion_cambio,observaciones,compañia,id_estado) VALUES (";
                    sqlStr += this.id_cliente_actual+",";
                    sqlStr += this.id_punto_actual+",";
                    sqlStr += "'"+sFech1+"',";
                    sqlStr += "'"+sFech2+"',";
                    sqlStr += this.tipo_Act+",";
                    sqlStr += id_tF+",";
                    sqlStr += "'"+strTarifa+"',";
                    sqlStr += "'"+sFech2+"',";
                    sqlStr += "'"+jTextArea2.getText()+"',"; 
                    sqlStr += "'"+jTextField33.getText()+"',";
                    sqlStr += "2"+")";
                 

                    System.out.println(sqlStr);
                    estadoInsert= misaepDao3.registrarFila(sqlStr);
                     
                    botonValidarCAct.setVisible(false);
                    
                    
                 } 
                 


             }
        if ( this.tipo_Act == 8 ) {                               // .................................   INSERTAMOS EN t_c20dhaindx

                 // .....................................

                 sqlStr  ="INSERT INTO t_c20dhaindx(id_cliente,id_punto,compañia,descripcion,potencia_contratada,precio_potencia,precio_energia_p1,precio_energia_p2,precio_energia_peaje,fecha_inicio,fecha_fin,observaciones,id_estado) VALUES (";
                 sqlStr += this.id_cliente_actual+",";
                 sqlStr += this.id_punto_actual+",";
                 sqlStr += "'"+jTextField33.getText()+"',";
                 sqlStr += "'"+sDescripcion+"',";
                 sqlStr += jTextField19.getText()+",";
                 sqlStr += jTextField16.getText()+",";
                 sqlStr += jTextField12.getText()+",";
                 sqlStr += jTextField13.getText()+",";
                 sqlStr += jTextField73.getText()+",";
                 sqlStr += "'"+sFech1+"',";
                 sqlStr += "'"+sFech2+"',";
                 sqlStr += "'"+jTextArea2.getText()+"',";            
                 sqlStr += "2"+")";
                 
                 System.out.println("INSERTAMOS INDEXADO ="+sqlStr);

                 System.out.println(sqlStr);
                 estadoInsert= misaepDao3.registrarFila(sqlStr);

                 // .....................................
                 if (estadoInsert==0){

                     // .....................................                                actualizo el estado de la tabla de datos del punto de suministro
                     sqlStr = "UPDATE t_datos_puntos_suministro SET tarifa_actual='2.0DHA INDX',id_tarifa_actual=8 WHERE idd="+this.id_punto_actual ;

                     estadoInsert= misaepDao3.registrarFila(sqlStr);
                   
                    // .....................................                                consultamos el último id que se ha asignado
                
                    sqlStr = "SELECT id FROM t_c20dhaindx ORDER BY id DESC LIMIT 1 ";

                    estadoInsert= misaepDao4.ultimoIdentificador(sqlStr);

                    id_tF               = misaepDao4.id ;
               
                    this.lCondicionesActuales[this.indGen][21] = String.valueOf(id_tF );     // Actualizo el identificador de condiciones actuales   
                    
                      // .....................................                                actualizo el estado de la tabla de condiciones de facturacion

                     sqlStr = "UPDATE t_c20dha SET id_estado=0 WHERE id="+id_cond_actuales ;

                     estadoInsert= misaepDao3.registrarFila(sqlStr);
                     
                                         
                      // .....................................                                actualizo el estado de la tabla de contratos puntos a 0
                     
                     sqlStr = "UPDATE t_contratos_puntos SET id_estado=0 WHERE id_punto="+this.id_punto_actual+ " AND id_estado=2" ;

                     estadoInsert= misaepDao3.registrarFila(sqlStr);
                     
                      // .....................................                                Inserto nuevo registro con los cambios producidos
                     
                     strTarifa = this.lTiposTarifas[this.tipo_Act];                          // Tipo de tarifa

                    sqlStr  ="INSERT INTO t_contratos_puntos  (id_cliente,id_punto,fecha_contrato,fecha_fin,id_tarifa,id_condiciones_contrato,descripcion,"
                            + "fecha_realizacion_cambio,observaciones,compañia,id_estado) VALUES (";
                    sqlStr += this.id_cliente_actual+",";
                    sqlStr += this.id_punto_actual+",";
                    sqlStr += "'"+sFech1+"',";
                    sqlStr += "'"+sFech2+"',";
                    sqlStr += this.tipo_Act+",";
                    sqlStr += id_tF+",";
                    sqlStr += "'"+strTarifa+"',";
                    sqlStr += "'"+sFech2+"',";
                    sqlStr += "'"+jTextArea2.getText()+"',"; 
                    sqlStr += "'"+jTextField33.getText()+"',";
                    sqlStr += "2"+")";
                 

                    System.out.println(sqlStr);
                    estadoInsert= misaepDao3.registrarFila(sqlStr);
                     
                    botonValidarCAct.setVisible(false);
                    
                    
                 } 
                 


             }
        if ( this.tipo_Act == 9 ) {                               // .................................   INSERTAMOS EN t_c21dhaindx

                 // .....................................

                 sqlStr  ="INSERT INTO t_c21dhaindx(id_cliente,id_punto,compañia,descripcion,potencia_contratada,precio_potencia,precio_energia_p1,precio_energia_p2,precio_energia_peaje,fecha_inicio,fecha_fin,observaciones,id_estado) VALUES (";
                 sqlStr += this.id_cliente_actual+",";
                 sqlStr += this.id_punto_actual+",";
                 sqlStr += "'"+jTextField33.getText()+"',";
                 sqlStr += "'"+sDescripcion+"',";
                 sqlStr += jTextField19.getText()+",";
                 sqlStr += jTextField16.getText()+",";
                 sqlStr += jTextField12.getText()+",";
                 sqlStr += jTextField13.getText()+",";
                 sqlStr += jTextField73.getText()+",";
                 sqlStr += "'"+sFech1+"',";
                 sqlStr += "'"+sFech2+"',";
                 sqlStr += "'"+jTextArea2.getText()+"',";            
                 sqlStr += "2"+")";
                 
                 System.out.println("INSERTAMOS INDEXADO ="+sqlStr);

              
                 estadoInsert= misaepDao3.registrarFila(sqlStr);

                 // .....................................
                 if (estadoInsert==0){

                     // .....................................                                actualizo el estado de la tabla de datos del punto de suministro
                     sqlStr = "UPDATE t_datos_puntos_suministro SET tarifa_actual='2.1DHA INDX',id_tarifa_actual=9 WHERE idd="+this.id_punto_actual ;

                     estadoInsert= misaepDao3.registrarFila(sqlStr);
                   
                    // .....................................                                consultamos el último id que se ha asignado
                
                    sqlStr = "SELECT id FROM t_c21dhaindx ORDER BY id DESC LIMIT 1 ";

                    estadoInsert= misaepDao4.ultimoIdentificador(sqlStr);

                    id_tF               = misaepDao4.id ;   System.out.println("El nuevo identificador para tipo 9 es:"+id_tF);
               
                    this.lCondicionesActuales[this.indGen][21] = String.valueOf(id_tF );     // Actualizo el identificador de condiciones actuales   
                    
                      // .....................................                                actualizo el estado de la tabla de condiciones de facturacion

                //     sqlStr = "UPDATE t_c20dha SET id_estado=0 WHERE id="+id_cond_actuales ;

                //     estadoInsert= misaepDao3.registrarFila(sqlStr);
                     
                                         
                      // .....................................                                actualizo el estado de la tabla de contratos puntos a 0
                     
                     sqlStr = "UPDATE t_contratos_puntos SET id_estado=0 WHERE id_punto="+this.id_punto_actual+ " AND id_estado=2" ;

                     estadoInsert= misaepDao3.registrarFila(sqlStr);
                     
                      // .....................................                                Inserto nuevo registro con los cambios producidos
                     
                     strTarifa = this.lTiposTarifas[this.tipo_Act];                          // Tipo de tarifa

                    sqlStr  ="INSERT INTO t_contratos_puntos  (id_cliente,id_punto,fecha_contrato,fecha_fin,id_tarifa,id_condiciones_contrato,descripcion,"
                            + "fecha_realizacion_cambio,observaciones,compañia,id_estado) VALUES (";
                    sqlStr += this.id_cliente_actual+",";
                    sqlStr += this.id_punto_actual+",";
                    sqlStr += "'"+sFech1+"',";
                    sqlStr += "'"+sFech2+"',";
                    sqlStr += this.tipo_Act+",";
                    sqlStr += id_tF+",";
                    sqlStr += "'"+strTarifa+"',";
                    sqlStr += "'"+sFech2+"',";
                    sqlStr += "'"+jTextArea2.getText()+"',"; 
                    sqlStr += "'"+jTextField33.getText()+"',";
                    sqlStr += "2"+")";
                 

                    System.out.println(sqlStr);
                    estadoInsert= misaepDao3.registrarFila(sqlStr);
                     
                    botonValidarCAct.setVisible(false);
                    
                    
                 } 
                 


             }
        if ( this.tipo_Act == 5 ) {                               // .................................   INSERTAMOS EN t_c3.0a

                 // .....................................

                 sqlStr  ="INSERT INTO t_c30a(id_cliente,id_punto,compañia,descripcion,potencia_contratada_p1,potencia_contratada_p2,potencia_contratada_p3,precio_potencia_p1,precio_potencia_p2,precio_potencia_p3,precio_energia_p1,precio_energia_p2,precio_energia_p3,fecha_inicio,fecha_fin,observaciones,fPotenciaMaxima,id_estado) VALUES (";
                 sqlStr += this.id_cliente_actual+",";
                 sqlStr += this.id_punto_actual+",";
                 sqlStr += "'"+jTextField33.getText()+"',";
                 sqlStr += "'"+sDescripcion+"',";
                 sqlStr += jTextField19.getText()+",";
                 sqlStr += jTextField35.getText()+",";
                 sqlStr += jTextField36.getText()+",";
                 sqlStr += jTextField16.getText()+",";
                 sqlStr += jTextField17.getText()+",";
                 sqlStr += jTextField18.getText()+",";
                 sqlStr += jTextField12.getText()+",";
                 sqlStr += jTextField13.getText()+",";
                 sqlStr += jTextField14.getText()+",";                 
                 sqlStr += "'"+sFech1+"',";
                 sqlStr += "'"+sFech2+"',";
                 sqlStr += "'"+jTextArea2.getText()+"',";     
                 sqlStr += fPotMax+",";
                 sqlStr += "2"+")";
                 
                 System.out.println("INSERTAMOS INDEXADO ="+sqlStr);

              
                 estadoInsert= misaepDao3.registrarFila(sqlStr);

                 // .....................................
                 if (estadoInsert==0){

                     // .....................................                                actualizo el estado de la tabla de datos del punto de suministro
                     sqlStr = "UPDATE t_datos_puntos_suministro SET tarifa_actual='3.0A ',id_tarifa_actual=5 WHERE idd="+this.id_punto_actual ;

                     estadoInsert= misaepDao3.registrarFila(sqlStr);
                   
                    // .....................................                                consultamos el último id que se ha asignado
                
                    sqlStr = "SELECT id FROM t_c30a ORDER BY id DESC LIMIT 1 ";

                    estadoInsert= misaepDao4.ultimoIdentificador(sqlStr);

                    id_tF               = misaepDao4.id ;
               
                    this.lCondicionesActuales[this.indGen][21] = String.valueOf(id_tF );     // Actualizo el identificador de condiciones actuales   
                    
                      // .....................................                                actualizo el estado de la tabla de condiciones de facturacion

                //     sqlStr = "UPDATE t_c20dha SET id_estado=0 WHERE id="+id_cond_actuales ;

                //     estadoInsert= misaepDao3.registrarFila(sqlStr);
                     
                                         
                      // .....................................                                actualizo el estado de la tabla de contratos puntos a 0
                     
                     sqlStr = "UPDATE t_contratos_puntos SET id_estado=0 WHERE id_punto="+this.id_punto_actual+ " AND id_estado=2" ;

                     estadoInsert= misaepDao3.registrarFila(sqlStr);
                     
                      // .....................................                                Inserto nuevo registro con los cambios producidos
                     
                     strTarifa = this.lTiposTarifas[this.tipo_Act];                          // Tipo de tarifa

                    sqlStr  ="INSERT INTO t_contratos_puntos  (id_cliente,id_punto,fecha_contrato,fecha_fin,id_tarifa,id_condiciones_contrato,descripcion,"
                            + "fecha_realizacion_cambio,observaciones,compañia,id_estado) VALUES (";
                    sqlStr += this.id_cliente_actual+",";
                    sqlStr += this.id_punto_actual+",";
                    sqlStr += "'"+sFech1+"',";
                    sqlStr += "'"+sFech2+"',";
                    sqlStr += this.tipo_Act+",";
                    sqlStr += id_tF+",";
                    sqlStr += "'"+strTarifa+"',";
                    sqlStr += "'"+sFech2+"',";
                    sqlStr += "'"+jTextArea2.getText()+"',"; 
                    sqlStr += "'"+jTextField33.getText()+"',";
                    sqlStr += "2"+")";
                 

                    System.out.println(sqlStr);
                    estadoInsert= misaepDao3.registrarFila(sqlStr);
                     
                    botonValidarCAct.setVisible(false);
                    
                    
                 } 
                 


             }
          if ( this.tipo_Act == 6 ) {                               // .................................   INSERTAMOS EN t_c3.1a

                 // .....................................

                 sqlStr  ="INSERT INTO t_c31a(id_cliente,id_punto,compañia,descripcion,potencia_contratada_p1,potencia_contratada_p2,potencia_contratada_p3,precio_potencia_p1,precio_potencia_p2,precio_potencia_p3,precio_energia_p1,precio_energia_p2,precio_energia_p3,fecha_inicio,fecha_fin,observaciones,fPotenciaMaxima,id_estado) VALUES (";
                 sqlStr += this.id_cliente_actual+",";
                 sqlStr += this.id_punto_actual+",";
                 sqlStr += "'"+jTextField33.getText()+"',";
                 sqlStr += "'"+sDescripcion+"',";
                 sqlStr += jTextField19.getText()+",";
                 sqlStr += jTextField35.getText()+",";
                 sqlStr += jTextField36.getText()+",";
                 sqlStr += jTextField16.getText()+",";
                 sqlStr += jTextField17.getText()+",";
                 sqlStr += jTextField18.getText()+",";
                 sqlStr += jTextField12.getText()+",";
                 sqlStr += jTextField13.getText()+",";
                 sqlStr += jTextField14.getText()+",";                 
                 sqlStr += "'"+sFech1+"',";
                 sqlStr += "'"+sFech2+"',";
                 sqlStr += "'"+jTextArea2.getText()+"',";     
                 sqlStr += fPotMax+",";
                 sqlStr += "2"+")";
                 
                 System.out.println("INSERTAMOS INDEXADO ="+sqlStr);

              
                 estadoInsert= misaepDao3.registrarFila(sqlStr);

                 // .....................................
                 if (estadoInsert==0){

                     // .....................................                                actualizo el estado de la tabla de datos del punto de suministro
                     sqlStr = "UPDATE t_datos_puntos_suministro SET tarifa_actual='3.1A ',id_tarifa_actual=6 WHERE idd="+this.id_punto_actual ;

                     estadoInsert= misaepDao3.registrarFila(sqlStr);
                   
                    // .....................................                                consultamos el último id que se ha asignado
                
                    sqlStr = "SELECT id FROM t_c31a ORDER BY id DESC LIMIT 1 ";

                    estadoInsert= misaepDao4.ultimoIdentificador(sqlStr);

                    id_tF               = misaepDao4.id ;
               
                    this.lCondicionesActuales[this.indGen][21] = String.valueOf(id_tF );     // Actualizo el identificador de condiciones actuales   
                    
                      // .....................................                                actualizo el estado de la tabla de condiciones de facturacion

                //     sqlStr = "UPDATE t_c20dha SET id_estado=0 WHERE id="+id_cond_actuales ;

                //     estadoInsert= misaepDao3.registrarFila(sqlStr);
                     
                                         
                      // .....................................                                actualizo el estado de la tabla de contratos puntos a 0
                     
                     sqlStr = "UPDATE t_contratos_puntos SET id_estado=0 WHERE id_punto="+this.id_punto_actual+ " AND id_estado=2" ;

                     estadoInsert= misaepDao3.registrarFila(sqlStr);
                     
                      // .....................................                                Inserto nuevo registro con los cambios producidos
                     
                     strTarifa = this.lTiposTarifas[this.tipo_Act];                          // Tipo de tarifa

                    sqlStr  ="INSERT INTO t_contratos_puntos  (id_cliente,id_punto,fecha_contrato,fecha_fin,id_tarifa,id_condiciones_contrato,descripcion,"
                            + "fecha_realizacion_cambio,observaciones,compañia,id_estado) VALUES (";
                    sqlStr += this.id_cliente_actual+",";
                    sqlStr += this.id_punto_actual+",";
                    sqlStr += "'"+sFech1+"',";
                    sqlStr += "'"+sFech2+"',";
                    sqlStr += this.tipo_Act+",";
                    sqlStr += id_tF+",";
                    sqlStr += "'"+strTarifa+"',";
                    sqlStr += "'"+sFech2+"',";
                    sqlStr += "'"+jTextArea2.getText()+"',"; 
                    sqlStr += "'"+jTextField33.getText()+"',";
                    sqlStr += "2"+")";
                 

                    System.out.println(sqlStr);
                    estadoInsert= misaepDao3.registrarFila(sqlStr);
                     
                    botonValidarCAct.setVisible(false);
                    
                    
                 } 
                 


             }
        if ( this.tipo_Act == 10 ) {                               // .................................   INSERTAMOS EN t_c3.0aindx

                 // .....................................

                 sqlStr  ="INSERT INTO t_c30aindx(id_cliente,id_punto,compañia,descripcion,potencia_contratada_p1,potencia_contratada_p2,potencia_contratada_p3,precio_potencia_p1,precio_potencia_p2,precio_potencia_p3,precio_energia_p1,precio_energia_p2,precio_energia_p3,precio_energia_peaje,fecha_inicio,fecha_fin,observaciones,fPotenciaMaxima,id_estado) VALUES (";
                 sqlStr += this.id_cliente_actual+",";
                 sqlStr += this.id_punto_actual+",";
                 sqlStr += "'"+jTextField33.getText()+"',";
                 sqlStr += "'"+sDescripcion+"',";
                 sqlStr += jTextField19.getText()+",";
                 sqlStr += jTextField35.getText()+",";
                 sqlStr += jTextField36.getText()+",";
                 sqlStr += jTextField16.getText()+",";
                 sqlStr += jTextField17.getText()+",";
                 sqlStr += jTextField18.getText()+",";
                 sqlStr += jTextField12.getText()+",";
                 sqlStr += jTextField13.getText()+",";
                 sqlStr += jTextField14.getText()+",";    
                 sqlStr += jTextField73.getText()+",";
                 sqlStr += "'"+sFech1+"',";
                 sqlStr += "'"+sFech2+"',";
                 sqlStr += "'"+jTextArea2.getText()+"',"; 
                 sqlStr += fPotMax+",";
                 sqlStr += "2"+")";
                 
                 System.out.println("INSERTAMOS INDEXADO ="+sqlStr);

              
                 estadoInsert= misaepDao3.registrarFila(sqlStr);

                 // .....................................
                 if (estadoInsert==0){

                     // .....................................                                actualizo el estado de la tabla de datos del punto de suministro
                     sqlStr = "UPDATE t_datos_puntos_suministro SET tarifa_actual='3.0A INDX ',id_tarifa_actual=10 WHERE idd="+this.id_punto_actual ;

                     estadoInsert= misaepDao3.registrarFila(sqlStr);
                   
                    // .....................................                                consultamos el último id que se ha asignado
                
                    sqlStr = "SELECT id FROM t_c30aindx ORDER BY id DESC LIMIT 1 ";

                    estadoInsert= misaepDao4.ultimoIdentificador(sqlStr);

                    id_tF               = misaepDao4.id ;
               
                    this.lCondicionesActuales[this.indGen][21] = String.valueOf(id_tF );     // Actualizo el identificador de condiciones actuales   
                    
                                                              
                      // .....................................                                actualizo el estado de la tabla de contratos puntos a 0
                     
                     sqlStr = "UPDATE t_contratos_puntos SET id_estado=0 WHERE id_punto="+this.id_punto_actual+ " AND id_estado=2" ;

                     estadoInsert= misaepDao3.registrarFila(sqlStr);
                     
                      // .....................................                                Inserto nuevo registro con los cambios producidos
                     
                     strTarifa = this.lTiposTarifas[this.tipo_Act];                          // Tipo de tarifa

                    sqlStr  ="INSERT INTO t_contratos_puntos  (id_cliente,id_punto,fecha_contrato,fecha_fin,id_tarifa,id_condiciones_contrato,descripcion,"
                            + "fecha_realizacion_cambio,observaciones,compañia,id_estado) VALUES (";
                    sqlStr += this.id_cliente_actual+",";
                    sqlStr += this.id_punto_actual+",";
                    sqlStr += "'"+sFech1+"',";
                    sqlStr += "'"+sFech2+"',";
                    sqlStr += this.tipo_Act+",";
                    sqlStr += id_tF+",";
                    sqlStr += "'"+strTarifa+"',";
                    sqlStr += "'"+sFech2+"',";
                    sqlStr += "'"+jTextArea2.getText()+"',"; 
                    sqlStr += "'"+jTextField33.getText()+"',";
                    sqlStr += "2"+")";
                 

                    System.out.println(sqlStr);
                    estadoInsert= misaepDao3.registrarFila(sqlStr);
                     
                    botonValidarCAct.setVisible(false);
                    
                    
                 } 
                 


             }
            // .......................................................................................................................................  
            // .....................................         INSERTA FILA  DE TARIFA 2.0A a TARIFA 2.0A INDX

            if ( this.tipo_Act == 11) {                               // .................................   INSERTAMOS EN t_c20indx

                 // .....................................

                 sqlStr  ="INSERT INTO t_c20indx (id_cliente,id_punto,compañia,descripcion,potencia_contratada,precio_potencia,precio_energia_p1,precio_energia_peaje,fecha_inicio,fecha_fin,observaciones,id_estado) VALUES (";
                 sqlStr += this.id_cliente_actual+",";
                 sqlStr += this.id_punto_actual+",";
                 sqlStr += "'"+jTextField33.getText()+"',";
                 sqlStr += "'"+sDescripcion+"',";
                 sqlStr += jTextField19.getText()+",";
                 sqlStr += jTextField16.getText()+",";
                 sqlStr += jTextField12.getText()+",";
                 sqlStr += jTextField73.getText()+",";
                 sqlStr += "'"+sFech1+"',";
                 sqlStr += "'"+sFech2+"',";
                 sqlStr += "'"+jTextArea2.getText()+"',";            
                 sqlStr += "2"+")";
                 

                 System.out.println(sqlStr);
                 estadoInsert= misaepDao3.registrarFila(sqlStr);

                 // .....................................
                 if (estadoInsert==0){

                    // .....................................                                actualizo el estado de la tabla de datos del punto de suministro
                     sqlStr = "UPDATE t_datos_puntos_suministro SET tarifa_actual='2.0 INDX',id_tarifa_actual=11 WHERE idd="+this.id_punto_actual ;

                     estadoInsert= misaepDao3.registrarFila(sqlStr);
                     
                     
                    // .....................................                                consultamos el último id que se ha asignado
                
                    sqlStr = "SELECT id FROM t_c20indx ORDER BY id DESC LIMIT 1 ";

                    estadoInsert= misaepDao4.ultimoIdentificador(sqlStr);

                    id_tF               = misaepDao4.id ;
               
                    this.lCondicionesActuales[this.indGen][21] = String.valueOf(id_tF );     // Actualizo el identificador de condiciones actuales   
                    
                      // .....................................                                actualizo el estado de la tabla de condiciones de facturacion

                     sqlStr = "UPDATE t_c20indx SET id_estado=0 WHERE id="+id_cond_actuales ;

                     estadoInsert= misaepDao3.registrarFila(sqlStr);
                     
                     
                     // .....................................                                actualizo el estado de la tabla de condiciones de facturacion

                     sqlStr = "UPDATE t_c20indx SET id_estado=0 WHERE id="+id_cond_actuales ;

                     estadoInsert= misaepDao3.registrarFila(sqlStr);
                    
                      // .....................................                                actualizo el estado de la tabla de contratos puntos a 0
                     
                     sqlStr = "UPDATE t_contratos_puntos SET id_estado=0 WHERE id_punto="+this.id_punto_actual+ " AND id_estado=2" ;

                     estadoInsert= misaepDao3.registrarFila(sqlStr);
                     
                      // .....................................                                Inserto nuevo registro con los cambios producidos
                     
                     strTarifa = this.lTiposTarifas[this.tipo_Act];                          // Tipo de tarifa

                    sqlStr  ="INSERT INTO t_contratos_puntos  (id_cliente,id_punto,fecha_contrato,fecha_fin,id_tarifa,id_condiciones_contrato,descripcion,"
                            + "fecha_realizacion_cambio,observaciones,compañia,id_estado) VALUES (";
                    sqlStr += this.id_cliente_actual+",";
                    sqlStr += this.id_punto_actual+",";
                    sqlStr += "'"+sFech1+"',";
                    sqlStr += "'"+sFech2+"',";
                    sqlStr += this.tipo_Act+",";
                    sqlStr += id_tF+",";
                    sqlStr += "'"+strTarifa+"',";
                    sqlStr += "'"+sFech2+"',";
                    sqlStr += "'"+jTextArea2.getText()+"',"; 
                    sqlStr += "'"+jTextField33.getText()+"',";
                    sqlStr += "2"+")";
                 

                    System.out.println(sqlStr);
                    estadoInsert= misaepDao3.registrarFila(sqlStr);
                     
                    botonValidarCAct.setVisible(false);
                    
                    
                 }         


             }
             // .......................................................................................................................................  
            // .....................................         INSERTA FILA   TARIFA 2.1A INDX

            if ( this.tipo_Act == 12) {                               // .................................   INSERTAMOS EN t_c21indx

                 // .....................................

                 sqlStr  ="INSERT INTO t_c21indx (id_cliente,id_punto,compañia,descripcion,potencia_contratada,precio_potencia,precio_energia_p1,precio_energia_peaje,fecha_inicio,fecha_fin,observaciones,id_estado) VALUES (";
                 sqlStr += this.id_cliente_actual+",";
                 sqlStr += this.id_punto_actual+",";
                 sqlStr += "'"+jTextField33.getText()+"',";
                 sqlStr += "'"+sDescripcion+"',";
                 sqlStr += jTextField19.getText()+",";
                 sqlStr += jTextField16.getText()+",";
                 sqlStr += jTextField12.getText()+",";
                 sqlStr += jTextField73.getText()+",";
                 sqlStr += "'"+sFech1+"',";
                 sqlStr += "'"+sFech2+"',";
                 sqlStr += "'"+jTextArea2.getText()+"',";            
                 sqlStr += "2"+")";
                 

                 System.out.println(sqlStr);
                 estadoInsert= misaepDao3.registrarFila(sqlStr);

                 // .....................................
                 if (estadoInsert==0){

                    // .....................................                                actualizo el estado de la tabla de datos del punto de suministro
                     sqlStr = "UPDATE t_datos_puntos_suministro SET tarifa_actual='2.1 INDX',id_tarifa_actual=12 WHERE idd="+this.id_punto_actual ;

                     estadoInsert= misaepDao3.registrarFila(sqlStr);
                     
                     
                    // .....................................                                consultamos el último id que se ha asignado
                
                    sqlStr = "SELECT id FROM t_c21indx ORDER BY id DESC LIMIT 1 ";

                    estadoInsert= misaepDao4.ultimoIdentificador(sqlStr);

                    id_tF               = misaepDao4.id ;
               
                    this.lCondicionesActuales[this.indGen][21] = String.valueOf(id_tF );     // Actualizo el identificador de condiciones actuales   
                    
                      // .....................................                                actualizo el estado de la tabla de condiciones de facturacion

                     sqlStr = "UPDATE t_c21indx SET id_estado=0 WHERE id="+id_cond_actuales ;

                     estadoInsert= misaepDao3.registrarFila(sqlStr);
                     
                     
                     // .....................................                                actualizo el estado de la tabla de condiciones de facturacion

                     sqlStr = "UPDATE t_c20indx SET id_estado=0 WHERE id="+id_cond_actuales ;

                     estadoInsert= misaepDao3.registrarFila(sqlStr);
                    
                      // .....................................                                actualizo el estado de la tabla de contratos puntos a 0
                     
                     sqlStr = "UPDATE t_contratos_puntos SET id_estado=0 WHERE id_punto="+this.id_punto_actual+ " AND id_estado=2" ;

                     estadoInsert= misaepDao3.registrarFila(sqlStr);
                     
                      // .....................................                                Inserto nuevo registro con los cambios producidos
                     
                     strTarifa = this.lTiposTarifas[this.tipo_Act];                          // Tipo de tarifa

                    sqlStr  ="INSERT INTO t_contratos_puntos  (id_cliente,id_punto,fecha_contrato,fecha_fin,id_tarifa,id_condiciones_contrato,descripcion,"
                            + "fecha_realizacion_cambio,observaciones,compañia,id_estado) VALUES (";
                    sqlStr += this.id_cliente_actual+",";
                    sqlStr += this.id_punto_actual+",";
                    sqlStr += "'"+sFech1+"',";
                    sqlStr += "'"+sFech2+"',";
                    sqlStr += this.tipo_Act+",";
                    sqlStr += id_tF+",";
                    sqlStr += "'"+strTarifa+"',";
                    sqlStr += "'"+sFech2+"',";
                    sqlStr += "'"+jTextArea2.getText()+"',"; 
                    sqlStr += "'"+jTextField33.getText()+"',";
                    sqlStr += "2"+")";
                 

                    System.out.println(sqlStr);
                    estadoInsert= misaepDao3.registrarFila(sqlStr);
                     
                    botonValidarCAct.setVisible(false);
                    
                    
                 }         
             }
            
            if ( this.tipo_Act == 13 ) {                               // .................................   INSERTAMOS EN t_c3.1aindx

                 // .....................................

                 sqlStr  ="INSERT INTO t_c31aindx(id_cliente,id_punto,compañia,descripcion,potencia_contratada_p1,potencia_contratada_p2,potencia_contratada_p3,precio_potencia_p1,precio_potencia_p2,precio_potencia_p3,precio_energia_p1,precio_energia_p2,precio_energia_p3,precio_energia_peaje,fecha_inicio,fecha_fin,observaciones,fPotenciaMaxima,id_estado) VALUES (";
                 sqlStr += this.id_cliente_actual+",";
                 sqlStr += this.id_punto_actual+",";
                 sqlStr += "'"+jTextField33.getText()+"',";
                 sqlStr += "'"+sDescripcion+"',";
                 sqlStr += jTextField19.getText()+",";
                 sqlStr += jTextField35.getText()+",";
                 sqlStr += jTextField36.getText()+",";
                 sqlStr += jTextField16.getText()+",";
                 sqlStr += jTextField17.getText()+",";
                 sqlStr += jTextField18.getText()+",";
                 sqlStr += jTextField12.getText()+",";
                 sqlStr += jTextField13.getText()+",";
                 sqlStr += jTextField14.getText()+",";    
                 sqlStr += jTextField73.getText()+",";
                 sqlStr += "'"+sFech1+"',";
                 sqlStr += "'"+sFech2+"',";
                 sqlStr += "'"+jTextArea2.getText()+"',"; 
                 sqlStr += fPotMax+",";
                 sqlStr += "2"+")";
                 
                 System.out.println("INSERTAMOS INDEXADO ="+sqlStr);

              
                 estadoInsert= misaepDao3.registrarFila(sqlStr);

                 // .....................................
                 if (estadoInsert==0){

                     // .....................................                                actualizo el estado de la tabla de datos del punto de suministro
                     sqlStr = "UPDATE t_datos_puntos_suministro SET tarifa_actual='3.1A INDX ',id_tarifa_actual=13 WHERE idd="+this.id_punto_actual ;

                     estadoInsert= misaepDao3.registrarFila(sqlStr);
                   
                    // .....................................                                consultamos el último id que se ha asignado
                
                    sqlStr = "SELECT id FROM t_c31aindx ORDER BY id DESC LIMIT 1 ";

                    estadoInsert= misaepDao4.ultimoIdentificador(sqlStr);

                    id_tF               = misaepDao4.id ;
               
                    this.lCondicionesActuales[this.indGen][21] = String.valueOf(id_tF );     // Actualizo el identificador de condiciones actuales   
                    
                                                              
                      // .....................................                                actualizo el estado de la tabla de contratos puntos a 0
                     
                     sqlStr = "UPDATE t_contratos_puntos SET id_estado=0 WHERE id_punto="+this.id_punto_actual+ " AND id_estado=2" ;

                     estadoInsert= misaepDao3.registrarFila(sqlStr);
                     
                      // .....................................                                Inserto nuevo registro con los cambios producidos
                     
                     strTarifa = this.lTiposTarifas[this.tipo_Act];                          // Tipo de tarifa

                    sqlStr  ="INSERT INTO t_contratos_puntos  (id_cliente,id_punto,fecha_contrato,fecha_fin,id_tarifa,id_condiciones_contrato,descripcion,"
                            + "fecha_realizacion_cambio,observaciones,compañia,id_estado) VALUES (";
                    sqlStr += this.id_cliente_actual+",";
                    sqlStr += this.id_punto_actual+",";
                    sqlStr += "'"+sFech1+"',";
                    sqlStr += "'"+sFech2+"',";
                    sqlStr += this.tipo_Act+",";
                    sqlStr += id_tF+",";
                    sqlStr += "'"+strTarifa+"',";
                    sqlStr += "'"+sFech2+"',";
                    sqlStr += "'"+jTextArea2.getText()+"',"; 
                    sqlStr += "'"+jTextField33.getText()+"',";
                    sqlStr += "2"+")";
                 

                    System.out.println(sqlStr);
                    estadoInsert= misaepDao3.registrarFila(sqlStr);
                     
                    botonValidarCAct.setVisible(false);
                    
                    
                 } 
                 


             }
        } // END IF resp=si
        
        
    }
     // ---------------------------------------------------------------------------------------------------------------------------
    public void ValidarCondicionesSimuladas() {
        
        int resp=JOptionPane.showConfirmDialog(null,"¿VALIDAR LAS NUEVAS CONDICIONES SIMULACION ?");
        String sqlStr,sFech1,sFech2,sDescripcion,strTarifa ;
        Double importe_AI, importe_DI ;
        int estadoInsert=0, id_tF=0,id_tipo_actual, id_tipo_sim,id_cond_actuales, id_cond_sim, fPotMax = 0;
     
        
        if (JOptionPane.OK_OPTION == resp){  
        
            // ..............................................................
            
             this.lCondicionesSimulacion[this.indGen][0] = jTextField29.getText();  
             this.lCondicionesSimulacion[this.indGen][1] = jTextField29.getText();     
             this.lCondicionesSimulacion[this.indGen][2] = jTextField26.getText();            // potencia contratada
             this.lCondicionesSimulacion[this.indGen][3] = jTextField37.getText();    
             this.lCondicionesSimulacion[this.indGen][4] = jTextField38.getText(); 
             this.lCondicionesSimulacion[this.indGen][5] = "0";    
             this.lCondicionesSimulacion[this.indGen][6] = "0";    
             this.lCondicionesSimulacion[this.indGen][7] = "0";    
             this.lCondicionesSimulacion[this.indGen][8] =  jTextField23.getText();           // precio potencia
             this.lCondicionesSimulacion[this.indGen][9] =  jTextField24.getText();       
             this.lCondicionesSimulacion[this.indGen][10] = jTextField25.getText();     
             this.lCondicionesSimulacion[this.indGen][11] = "0";   
             this.lCondicionesSimulacion[this.indGen][12] = "0";   
             this.lCondicionesSimulacion[this.indGen][13] = "0";   
             this.lCondicionesSimulacion[this.indGen][14] = jTextField20.getText();           // precio energia
             this.lCondicionesSimulacion[this.indGen][15] = jTextField21.getText();      
             this.lCondicionesSimulacion[this.indGen][16] = jTextField22.getText();   
             this.lCondicionesSimulacion[this.indGen][17] = "0";   
             this.lCondicionesSimulacion[this.indGen][18] = "0";   
             this.lCondicionesSimulacion[this.indGen][19] = "0";      
             this.lCondicionesSimulacion[this.indGen][20] = jTextArea3.getText();             // observaciones
             this.lCondicionesSimulacion[this.indGen][24] = jTextField112.getText();          // Alquiler
             
             if (jCheckBox6.isSelected()){
                    this.lCondicionesActuales[this.indGen][25] = "1";
                    fPotMax = 1;
             }
              else {
                    this.lCondicionesActuales[this.indGen][25] = "0" ;
                    fPotMax = 0;
             }
            // ..............................................................
             
            
            sDescripcion = this.listaPuntosSum[this.indGen][1] ; 
             
             
           
            sFech1 = jTextField29.getText(); sFech1.trim();     // fecha inicio
            sFech1 = dateToMySQLDate(sFech1);       

            sFech2 = jTextField29.getText(); sFech2.trim();     // fecha fin
            sFech2 = dateToMySQLDate(sFech2);    

           
            saepDao misaepDao3 = new saepDao();
            saepDao misaepDao4 = new saepDao();
          
            // .....................................
            System.out.println("this.lCondicionesSimulacion["+this.indGen+"][22]"+this.lCondicionesSimulacion[this.indGen][22]);
            System.out.println("this.lCondicionesSimulacion["+this.indGen+"][21] ="+this.lCondicionesSimulacion[this.indGen][21]);
            
            
            if (this.lCondicionesSimulacion[this.indGen][22] != null) {
            
                id_tipo_actual      = Integer.parseInt(this.lCondicionesSimulacion[this.indGen][22]) ;
            } else {
                id_tipo_actual      = 0 ;
            }
            if (this.lCondicionesSimulacion[this.indGen][21] != null) {
                id_cond_actuales    = Integer.parseInt(this.lCondicionesSimulacion[this.indGen][21]) ;
            } else {
                id_cond_actuales      = 0 ;
            }
            
            System.out.println("id_tipo_actual   ="+id_tipo_actual);
            System.out.println("id_cond_actuales   ="+id_cond_actuales);
        
             // .......................................................................................................................................  
             // .....................................         INSERTA FILA  DE TARIFA 2.0A a TARIFA 2.0A

            if ( this.tipo_Sim== 1) {                        // .................................   INSERTAMOS EN t_f_20a

                 // .....................................

                 sqlStr  ="INSERT INTO t_c20a (id_cliente,id_punto,descripcion,potencia_contratada,precio_potencia,precio_energia,fecha_inicio,fecha_fin,observaciones,alquiler,id_estado) VALUES (";
                 sqlStr += this.id_cliente_actual+",";
                 sqlStr += this.id_punto_actual+",";
                 sqlStr += "'"+sDescripcion+"',";
                 sqlStr += jTextField26.getText()+",";
                 sqlStr += jTextField23.getText()+",";
                 sqlStr += jTextField20.getText()+",";
                 sqlStr += "'"+sFech1+"',";
                 sqlStr += "'"+sFech2+"',";
                 sqlStr += "'"+jTextArea3.getText()+"',"; 
                 sqlStr += jTextField112.getText()+",";
                 sqlStr += "1"+")";
                 

                 System.out.println(sqlStr);
                 estadoInsert= misaepDao3.registrarFila(sqlStr);

                 // .....................................
                 if (estadoInsert==0){

                      // .....................................                                consultamos el último id que se ha asignado
                
                    sqlStr = "SELECT id FROM t_c20a ORDER BY id DESC LIMIT 1 ";

                    estadoInsert= misaepDao4.ultimoIdentificador(sqlStr);

                    id_tF               = misaepDao4.id ;
                    
                   this.lCondicionesSimulacion[this.indGen][21] = String.valueOf(id_tF );     // Actualizo el identificador de condiciones simulacion 
                  
                     
                      // .....................................                                actualizo el estado de la tabla de condiciones de facturacion
                     if (id_cond_actuales !=0){ 
                     sqlStr = "UPDATE t_c20a SET id_estado=0 WHERE id="+id_cond_actuales ;

                     estadoInsert= misaepDao3.registrarFila(sqlStr);
                     
                     
                     // .....................................                                actualizo el estado de la tabla de condiciones de facturacion
                  
                     sqlStr = "UPDATE t_c20a SET id_estado=0 WHERE id="+id_cond_actuales ;

                     estadoInsert= misaepDao3.registrarFila(sqlStr);
                     }
                      // .....................................                                actualizo el estado de la tabla de contratos puntos a 0
                     
                     sqlStr = "UPDATE t_contratos_puntos SET id_estado=0 WHERE id_punto="+this.id_punto_actual+ " AND id_estado=1" ;

                     estadoInsert= misaepDao3.registrarFila(sqlStr);
                     
                      // .....................................                                Inserto nuevo registro con los cambios producidos

                    sqlStr  ="INSERT INTO t_contratos_puntos  (id_cliente,id_punto,fecha_contrato,fecha_fin,id_tarifa,id_condiciones_contrato,descripcion,"
                            + "fecha_realizacion_cambio,observaciones,compañia,id_estado) VALUES (";
                    sqlStr += this.id_cliente_actual+",";
                    sqlStr += this.id_punto_actual+",";
                    sqlStr += "'"+sFech1+"',";
                    sqlStr += "'"+sFech2+"',";
                    sqlStr += this.tipo_Sim+",";
                    sqlStr += id_tF+",";
                    sqlStr += "'"+jTextField39.getText()+"',";
                    sqlStr += "'"+sFech2+"',";
                    sqlStr += "'"+jTextArea2.getText()+"',"; 
                    sqlStr += "'"+jTextField34.getText()+"',";
                    sqlStr += "1"+")";

                    System.out.println(sqlStr);
                    estadoInsert= misaepDao3.registrarFila(sqlStr);
                     
                    botonValidarSim.setVisible(false);
                 }  
             }
             // .......................................................................................................................................  
             // .....................................         INSERTA FILA  A a TARIFA 2.0ADH

            if ( this.tipo_Sim==2) {                        // .................................   INSERTAMOS EN t_C20DHA

                 // .....................................

                 sqlStr  ="INSERT INTO t_c20dha (id_cliente,id_punto,descripcion,potencia_contratada,precio_potencia,precio_energia_p1,precio_energia_p2,fecha_inicio,fecha_fin,observaciones,alquiler,id_estado) VALUES (";
                 sqlStr += this.id_cliente_actual+",";
                 sqlStr += this.id_punto_actual+",";
                 sqlStr += "'"+sDescripcion+"',";
                 sqlStr += jTextField26.getText()+",";
                 sqlStr += jTextField23.getText()+",";
                 sqlStr += jTextField20.getText()+",";
                 sqlStr += jTextField21.getText()+",";
                 sqlStr += "'"+sFech1+"',";
                 sqlStr += "'"+sFech2+"',";
                 sqlStr += "'"+jTextArea3.getText()+"',"; 
                 sqlStr += jTextField112.getText()+",";
                 sqlStr += "1"+")";
                 

                 System.out.println(sqlStr);
                 estadoInsert= misaepDao3.registrarFila(sqlStr);

                 // .....................................
                 if (estadoInsert==0){

                      // .....................................                                consultamos el último id que se ha asignado
                
                    sqlStr = "SELECT id FROM t_c20dha ORDER BY id DESC LIMIT 1 ";

                    estadoInsert= misaepDao4.ultimoIdentificador(sqlStr);

                    id_tF               = misaepDao4.id ;
                    
                   this.lCondicionesSimulacion[this.indGen][21] = String.valueOf(id_tF );     // Actualizo el identificador de condiciones simulacion 
                  
                     
                      // .....................................                                actualizo el estado de la tabla de condiciones de facturacion
                     if (id_cond_actuales !=0){ 
                     sqlStr = "UPDATE t_c20dha SET id_estado=0 WHERE id="+id_cond_actuales ;

                     estadoInsert= misaepDao3.registrarFila(sqlStr);
                     
                     
                     // .....................................                                actualizo el estado de la tabla de condiciones de facturacion

                     sqlStr = "UPDATE t_c20dha SET id_estado=0 WHERE id="+id_cond_actuales ;

                     estadoInsert= misaepDao3.registrarFila(sqlStr);
                     }
                      // .....................................                                actualizo el estado de la tabla de contratos puntos a 0
                     
                     sqlStr = "UPDATE t_contratos_puntos SET id_estado=0 WHERE id_punto="+this.id_punto_actual+ " AND id_estado=1" ;

                     estadoInsert= misaepDao3.registrarFila(sqlStr);
                     
                      // .....................................                                Inserto nuevo registro con los cambios producidos

                    sqlStr  ="INSERT INTO t_contratos_puntos  (id_cliente,id_punto,fecha_contrato,fecha_fin,id_tarifa,id_condiciones_contrato,descripcion,"
                            + "fecha_realizacion_cambio,observaciones,compañia,id_estado) VALUES (";
                    sqlStr += this.id_cliente_actual+",";
                    sqlStr += this.id_punto_actual+",";
                    sqlStr += "'"+sFech1+"',";
                    sqlStr += "'"+sFech2+"',";
                    sqlStr += this.tipo_Sim+",";
                    sqlStr += id_tF+",";
                    sqlStr += "'"+jTextField39.getText()+"',";
                    sqlStr += "'"+sFech2+"',";
                    sqlStr += "'"+jTextArea2.getText()+"',"; 
                    sqlStr += "'"+jTextField34.getText()+"',";
                    sqlStr += "1"+")";

                    System.out.println(sqlStr);
                    estadoInsert= misaepDao3.registrarFila(sqlStr);
                     
                    botonValidarSim.setVisible(false);
                 }  
             }
            // .......................................................................................................................................  
             // .....................................         INSERTA FILA  DE TARIFA 2.1A a TARIFA 2.1A DHA

            if ( this.tipo_Sim == 3) {                               // .................................   INSERTAMOS EN t_C_21a

                 // .....................................

                 sqlStr  ="INSERT INTO t_c21a (id_cliente,id_punto,descripcion,potencia_contratada,precio_potencia,precio_energia,fecha_inicio,fecha_fin,observaciones,alquiler,id_estado) VALUES (";
                 sqlStr += this.id_cliente_actual+",";
                 sqlStr += this.id_punto_actual+",";
                 sqlStr += "'"+sDescripcion+"',";
                 sqlStr += jTextField26.getText()+",";
                 sqlStr += jTextField23.getText()+",";
                 sqlStr += jTextField20.getText()+",";
                 sqlStr += "'"+sFech1+"',";
                 sqlStr += "'"+sFech2+"',";
                 sqlStr += "'"+jTextArea3.getText()+"',"; 
                 sqlStr += jTextField112.getText()+",";
                 sqlStr += "1"+")";
                 

                 System.out.println(sqlStr);
                 estadoInsert= misaepDao3.registrarFila(sqlStr);

                 // .....................................
                 if (estadoInsert==0){

                      // .....................................                                consultamos el último id que se ha asignado
                
                    sqlStr = "SELECT id FROM t_c21a ORDER BY id DESC LIMIT 1 ";

                    estadoInsert= misaepDao4.ultimoIdentificador(sqlStr);

                    id_tF               = misaepDao4.id ;
                    
                   this.lCondicionesSimulacion[this.indGen][21] = String.valueOf(id_tF );     // Actualizo el identificador de condiciones simulacion 
                  
                     
                      // .....................................                                actualizo el estado de la tabla de condiciones de facturacion
                      
                     sqlStr = "UPDATE t_c21a SET id_estado=0 WHERE id="+id_cond_actuales ;

                     estadoInsert= misaepDao3.registrarFila(sqlStr);
                     
                     
                     // .....................................                                actualizo el estado de la tabla de condiciones de facturacion

                     sqlStr = "UPDATE t_c21a SET id_estado=0 WHERE id="+id_cond_actuales ;

                     estadoInsert= misaepDao3.registrarFila(sqlStr);
                    
                      // .....................................                                actualizo el estado de la tabla de contratos puntos a 0
                     
                     sqlStr = "UPDATE t_contratos_puntos SET id_estado=0 WHERE id_punto="+this.id_punto_actual+ " AND id_estado=1" ;

                     estadoInsert= misaepDao3.registrarFila(sqlStr);
                     
                      // .....................................                                Inserto nuevo registro con los cambios producidos

                    sqlStr  ="INSERT INTO t_contratos_puntos  (id_cliente,id_punto,fecha_contrato,fecha_fin,id_tarifa,id_condiciones_contrato,descripcion,"
                            + "fecha_realizacion_cambio,observaciones,compañia,id_estado) VALUES (";
                    sqlStr += this.id_cliente_actual+",";
                    sqlStr += this.id_punto_actual+",";
                    sqlStr += "'"+sFech1+"',";
                    sqlStr += "'"+sFech2+"',";
                    sqlStr += this.tipo_Sim+",";
                    sqlStr += id_tF+",";
                    sqlStr += "'"+jTextField39.getText()+"',";
                    sqlStr += "'"+sFech2+"',";
                    sqlStr += "'"+jTextArea2.getText()+"',"; 
                    sqlStr += "'"+jTextField34.getText()+"',";
                    sqlStr += "1"+")";

                    System.out.println(sqlStr);
                    estadoInsert= misaepDao3.registrarFila(sqlStr);
                     
                    botonValidarSim.setVisible(false);
                 }         


             }
             if ( this.tipo_Sim == 4 ) {                               // .................................   INSERTAMOS EN t_c_21dha

                 // .....................................

                 sqlStr  ="INSERT INTO t_c21dha(id_cliente,id_punto,compañia,descripcion,potencia_contratada,precio_potencia,precio_energia_p1,precio_energia_p2,fecha_inicio,fecha_fin,observaciones,alquiler,id_estado) VALUES (";
                 sqlStr += this.id_cliente_actual+",";
                 sqlStr += this.id_punto_actual+",";
                 sqlStr += "'"+jTextField34.getText()+"',";
                 sqlStr += "'"+sDescripcion+"',";
                 sqlStr += jTextField26.getText()+",";
                 sqlStr += jTextField23.getText()+",";
                 sqlStr += jTextField20.getText()+",";
                 sqlStr += jTextField21.getText()+",";
                 sqlStr += "'"+sFech1+"',";
                 sqlStr += "'"+sFech2+"',";
                 sqlStr += "'"+jTextArea3.getText()+"',"; 
                 sqlStr += jTextField112.getText()+",";
                 sqlStr += "1"+")";
                 

                 System.out.println(sqlStr);
                 estadoInsert= misaepDao3.registrarFila(sqlStr);

                 // .....................................
                 if (estadoInsert==0){
                    
                                        
                    // .....................................                                consultamos el último id que se ha asignado
                
                    sqlStr = "SELECT id FROM t_c21dha ORDER BY id DESC LIMIT 1 ";

                    estadoInsert= misaepDao4.ultimoIdentificador(sqlStr);

                    id_tF               = misaepDao4.id ;
               
                    this.lCondicionesSimulacion[this.indGen][21] = String.valueOf(id_tF );     // Actualizo el identificador de condiciones simulacion 
                   
                      // .....................................                                actualizo el estado de la tabla de condiciones de facturacion

                     sqlStr = "UPDATE t_c21dha SET id_estado=0 WHERE id="+id_cond_actuales ;

                     estadoInsert= misaepDao3.registrarFila(sqlStr);
                     
                                         
                      // .....................................                                actualizo el estado de la tabla de contratos puntos a 0
                     
                     sqlStr = "UPDATE t_contratos_puntos SET id_estado=0 WHERE id_punto="+this.id_punto_actual+ " AND id_estado=1" ;

                     estadoInsert= misaepDao3.registrarFila(sqlStr);
                     
                      // .....................................                                Inserto nuevo registro con los cambios producidos
                     
                     strTarifa = this.lTiposTarifas[this.tipo_Sim];                          // Tipo de tarifa

                    sqlStr  ="INSERT INTO t_contratos_puntos  (id_cliente,id_punto,fecha_contrato,fecha_fin,id_tarifa,id_condiciones_contrato,descripcion,"
                            + "fecha_realizacion_cambio,observaciones,compañia,id_estado) VALUES (";
                    sqlStr += this.id_cliente_actual+",";
                    sqlStr += this.id_punto_actual+",";
                    sqlStr += "'"+sFech1+"',";
                    sqlStr += "'"+sFech2+"',";
                    sqlStr += this.tipo_Act+",";
                    sqlStr += id_tF+",";
                    sqlStr += "'"+strTarifa+"',";
                    sqlStr += "'"+sFech2+"',";
                    sqlStr += "'"+jTextArea2.getText()+"',"; 
                    sqlStr += "'"+jTextField34.getText()+"',";
                    sqlStr += "1"+")";
                 

                    System.out.println(sqlStr);
                    estadoInsert= misaepDao3.registrarFila(sqlStr);
                     
                    botonValidarSim.setVisible(false);
                    
                    
                 } 
                 


             }
               if ( this.tipo_Sim == 5 ) {                               // .................................   INSERTAMOS EN t_c3.0a

                 // .....................................

                 sqlStr  ="INSERT INTO t_c30a(id_cliente,id_punto,compañia,descripcion,potencia_contratada_p1,potencia_contratada_p2,potencia_contratada_p3,precio_potencia_p1,precio_potencia_p2,precio_potencia_p3,precio_energia_p1,precio_energia_p2,precio_energia_p3,fecha_inicio,fecha_fin,observaciones,fPotenciaMaxima,alquiler,id_estado) VALUES (";
                 sqlStr += this.id_cliente_actual+",";
                 sqlStr += this.id_punto_actual+",";
                 sqlStr += "'"+jTextField34.getText()+"',";
                 sqlStr += "'"+sDescripcion+"',";
                 sqlStr += jTextField26.getText()+",";
                 sqlStr += jTextField37.getText()+",";
                 sqlStr += jTextField38.getText()+",";
                 sqlStr += jTextField23.getText()+",";
                 sqlStr += jTextField24.getText()+",";
                 sqlStr += jTextField25.getText()+",";
                 sqlStr += jTextField20.getText()+",";
                 sqlStr += jTextField21.getText()+",";
                 sqlStr += jTextField22.getText()+",";                 
                 sqlStr += "'"+sFech1+"',";
                 sqlStr += "'"+sFech2+"',";
                 sqlStr += "'"+jTextArea3.getText()+"',";   
                 sqlStr += fPotMax+",";
                 sqlStr += jTextField112.getText()+",";
                 sqlStr += "1"+")";
                 
                 System.out.println("INSERTAMOS 3.0A ="+sqlStr);

              
                 estadoInsert= misaepDao3.registrarFila(sqlStr);

                 // .....................................
                 if (estadoInsert==0){

                     // .....................................                                actualizo el estado de la tabla de datos del punto de suministro
                     sqlStr = "UPDATE t_datos_puntos_suministro SET tarifa_actual='3.0A ',id_tarifa_actual=5 WHERE idd="+this.id_punto_actual ;

                     estadoInsert= misaepDao3.registrarFila(sqlStr);
                   
                    // .....................................                                consultamos el último id que se ha asignado
                
                    sqlStr = "SELECT id FROM t_c30a ORDER BY id DESC LIMIT 1 ";

                    estadoInsert= misaepDao4.ultimoIdentificador(sqlStr);

                    id_tF               = misaepDao4.id ;
               
                    this.lCondicionesSimulacion[this.indGen][21] = String.valueOf(id_tF );     // Actualizo el identificador de condiciones simulacion 
                    
                      // .....................................                                actualizo el estado de la tabla de condiciones de facturacion

                //     sqlStr = "UPDATE t_c20dha SET id_estado=0 WHERE id="+id_cond_actuales ;

                //     estadoInsert= misaepDao3.registrarFila(sqlStr);
                     
                                         
                      // .....................................                                actualizo el estado de la tabla de contratos puntos a 0
                     
                     sqlStr = "UPDATE t_contratos_puntos SET id_estado=0 WHERE id_punto="+this.id_punto_actual+ " AND id_estado=1" ;

                     estadoInsert= misaepDao3.registrarFila(sqlStr);
                     
                      // .....................................                                Inserto nuevo registro con los cambios producidos
                     
                     strTarifa = this.lTiposTarifas[this.tipo_Sim];                          // Tipo de tarifa

                    sqlStr  ="INSERT INTO t_contratos_puntos  (id_cliente,id_punto,fecha_contrato,fecha_fin,id_tarifa,id_condiciones_contrato,descripcion,"
                            + "fecha_realizacion_cambio,observaciones,compañia,id_estado) VALUES (";
                    sqlStr += this.id_cliente_actual+",";
                    sqlStr += this.id_punto_actual+",";
                    sqlStr += "'"+sFech1+"',";
                    sqlStr += "'"+sFech2+"',";
                    sqlStr += this.tipo_Sim+",";
                    sqlStr += id_tF+",";
                    sqlStr += "'"+strTarifa+"',";
                    sqlStr += "'"+sFech2+"',";
                    sqlStr += "'"+jTextArea3.getText()+"',"; 
                    sqlStr += "'"+jTextField34.getText()+"',";
                    sqlStr += "1"+")";
                 

                    System.out.println(sqlStr);
                    estadoInsert= misaepDao3.registrarFila(sqlStr);
                     
                    
                    
                    
                 } 
                 
                    botonValidarSim.setVisible(false);

             }
            if ( this.tipo_Sim == 6 ) {                               // .................................   INSERTAMOS EN t_c3.1a

                 // .....................................

                 sqlStr  ="INSERT INTO t_c31a(id_cliente,id_punto,compañia,descripcion,potencia_contratada_p1,potencia_contratada_p2,potencia_contratada_p3,precio_potencia_p1,precio_potencia_p2,precio_potencia_p3,precio_energia_p1,precio_energia_p2,precio_energia_p3,fecha_inicio,fecha_fin,observaciones,fPotenciaMaxima,alquiler,id_estado) VALUES (";
                 sqlStr += this.id_cliente_actual+",";
                 sqlStr += this.id_punto_actual+",";
                 sqlStr += "'"+jTextField34.getText()+"',";
                 sqlStr += "'"+sDescripcion+"',";
                 sqlStr += jTextField26.getText()+",";
                 sqlStr += jTextField37.getText()+",";
                 sqlStr += jTextField38.getText()+",";
                 sqlStr += jTextField23.getText()+",";
                 sqlStr += jTextField24.getText()+",";
                 sqlStr += jTextField25.getText()+",";
                 sqlStr += jTextField20.getText()+",";
                 sqlStr += jTextField21.getText()+",";
                 sqlStr += jTextField22.getText()+",";                 
                 sqlStr += "'"+sFech1+"',";
                 sqlStr += "'"+sFech2+"',";
                 sqlStr += "'"+jTextArea3.getText()+"',";   
                 sqlStr += fPotMax+",";
                 sqlStr += jTextField112.getText()+",";
                 sqlStr += "1"+")";
                 
                 System.out.println("INSERTAMOS 3.1A ="+sqlStr);

              
                 estadoInsert= misaepDao3.registrarFila(sqlStr);

                 // .....................................
                 if (estadoInsert==0){

                     // .....................................                                actualizo el estado de la tabla de datos del punto de suministro
                     sqlStr = "UPDATE t_datos_puntos_suministro SET tarifa_actual='3.1A ',id_tarifa_actual=6 WHERE idd="+this.id_punto_actual ;

                     estadoInsert= misaepDao3.registrarFila(sqlStr);
                   
                    // .....................................                                consultamos el último id que se ha asignado
                
                    sqlStr = "SELECT id FROM t_c31a ORDER BY id DESC LIMIT 1 ";

                    estadoInsert= misaepDao4.ultimoIdentificador(sqlStr);

                    id_tF               = misaepDao4.id ;
               
                    this.lCondicionesSimulacion[this.indGen][21] = String.valueOf(id_tF );     // Actualizo el identificador de condiciones simulacion 
                    
                      // .....................................                                actualizo el estado de la tabla de condiciones de facturacion

                //     sqlStr = "UPDATE t_c20dha SET id_estado=0 WHERE id="+id_cond_actuales ;

                //     estadoInsert= misaepDao3.registrarFila(sqlStr);
                     
                                         
                      // .....................................                                actualizo el estado de la tabla de contratos puntos a 0
                     
                     sqlStr = "UPDATE t_contratos_puntos SET id_estado=0 WHERE id_punto="+this.id_punto_actual+ " AND id_estado=1" ;

                     estadoInsert= misaepDao3.registrarFila(sqlStr);
                     
                      // .....................................                                Inserto nuevo registro con los cambios producidos
                     
                     strTarifa = this.lTiposTarifas[this.tipo_Sim];                          // Tipo de tarifa

                    sqlStr  ="INSERT INTO t_contratos_puntos  (id_cliente,id_punto,fecha_contrato,fecha_fin,id_tarifa,id_condiciones_contrato,descripcion,"
                            + "fecha_realizacion_cambio,observaciones,compañia,id_estado) VALUES (";
                    sqlStr += this.id_cliente_actual+",";
                    sqlStr += this.id_punto_actual+",";
                    sqlStr += "'"+sFech1+"',";
                    sqlStr += "'"+sFech2+"',";
                    sqlStr += this.tipo_Sim+",";
                    sqlStr += id_tF+",";
                    sqlStr += "'"+strTarifa+"',";
                    sqlStr += "'"+sFech2+"',";
                    sqlStr += "'"+jTextArea3.getText()+"',"; 
                    sqlStr += "'"+jTextField34.getText()+"',";
                    sqlStr += "1"+")";
                 

                    System.out.println(sqlStr);
                    estadoInsert= misaepDao3.registrarFila(sqlStr);
                     
                    
                    
                    
                 } 
                 
                    botonValidarSim.setVisible(false);

             }
        if ( this.tipo_Sim == 10 ) {                               // .................................   INSERTAMOS EN t_c3.0aindx

                 // .....................................

                 sqlStr  ="INSERT INTO t_c30aindx(id_cliente,id_punto,compañia,descripcion,potencia_contratada_p1,potencia_contratada_p2,potencia_contratada_p3,precio_potencia_p1,precio_potencia_p2,precio_potencia_p3,precio_energia_p1,precio_energia_p2,precio_energia_p3,precio_energia_peaje,fecha_inicio,fecha_fin,observaciones,fPotenciaMaxima,alquiler,id_estado) VALUES (";
                 sqlStr += this.id_cliente_actual+",";
                 sqlStr += this.id_punto_actual+",";
                 sqlStr += "'"+jTextField34.getText()+"',";
                 sqlStr += "'"+sDescripcion+"',";
                 sqlStr += jTextField26.getText()+",";
                 sqlStr += jTextField37.getText()+",";
                 sqlStr += jTextField38.getText()+",";
                 sqlStr += jTextField23.getText()+",";
                 sqlStr += jTextField24.getText()+",";
                 sqlStr += jTextField25.getText()+",";
                 sqlStr += jTextField20.getText()+",";
                 sqlStr += jTextField21.getText()+",";
                 sqlStr += jTextField22.getText()+",";     
                 sqlStr += jTextField74.getText()+",";
                 sqlStr += "'"+sFech1+"',";
                 sqlStr += "'"+sFech2+"',";
                 sqlStr += "'"+jTextArea3.getText()+"',";   
                 sqlStr += fPotMax+",";
                 sqlStr += jTextField112.getText()+",";
                 sqlStr += "1"+")";
                 
                 System.out.println("INSERTAMOS INDEXADO ="+sqlStr);

              
                 estadoInsert= misaepDao3.registrarFila(sqlStr);

                 // .....................................
                 if (estadoInsert==0){

                     // .....................................                                actualizo el estado de la tabla de datos del punto de suministro
                     sqlStr = "UPDATE t_datos_puntos_suministro SET tarifa_actual='3.0A INDX ',id_tarifa_actual=10 WHERE idd="+this.id_punto_actual ;

                     estadoInsert= misaepDao3.registrarFila(sqlStr);
                   
                    // .....................................                                consultamos el último id que se ha asignado
                
                    sqlStr = "SELECT id FROM t_c30aindx ORDER BY id DESC LIMIT 1 ";

                    estadoInsert= misaepDao4.ultimoIdentificador(sqlStr);

                    id_tF               = misaepDao4.id ;
               
                   this.lCondicionesSimulacion[this.indGen][21] = String.valueOf(id_tF );     // Actualizo el identificador de condiciones simulacion 
                     
                                                              
                      // .....................................                                actualizo el estado de la tabla de contratos puntos a 0
                     
                     sqlStr = "UPDATE t_contratos_puntos SET id_estado=0 WHERE id_punto="+this.id_punto_actual+ " AND id_estado=1" ;

                     estadoInsert= misaepDao3.registrarFila(sqlStr);
                     
                      // .....................................                                Inserto nuevo registro con los cambios producidos
                     
                     strTarifa = this.lTiposTarifas[this.tipo_Act];                          // Tipo de tarifa

                    sqlStr  ="INSERT INTO t_contratos_puntos  (id_cliente,id_punto,fecha_contrato,fecha_fin,id_tarifa,id_condiciones_contrato,descripcion,"
                            + "fecha_realizacion_cambio,observaciones,compañia,id_estado) VALUES (";
                    sqlStr += this.id_cliente_actual+",";
                    sqlStr += this.id_punto_actual+",";
                    sqlStr += "'"+sFech1+"',";
                    sqlStr += "'"+sFech2+"',";
                    sqlStr += this.tipo_Sim+",";
                    sqlStr += id_tF+",";
                    sqlStr += "'"+strTarifa+"',";
                    sqlStr += "'"+sFech2+"',";
                    sqlStr += "'"+jTextArea3.getText()+"',"; 
                    sqlStr += "'"+jTextField34.getText()+"',";
                    sqlStr += "1"+")";
                    
                    System.out.println(sqlStr);
                    estadoInsert= misaepDao3.registrarFila(sqlStr);
                     
                    
                      botonValidarSim.setVisible(false);
                    
                 } 
                 
                  

             }
            // .......................................................................................................................................  
             // .....................................         INSERTA FILA   TARIFA 2.0 INDX

            if ( this.tipo_Sim== 11) {                        // .................................   INSERTAMOS EN t_C20indx

                 // .....................................

                 sqlStr  ="INSERT INTO t_c20indx (id_cliente,id_punto,descripcion,potencia_contratada,precio_potencia,precio_energia_p1,precio_energia_peaje,fecha_inicio,fecha_fin,observaciones,alquiler,id_estado) VALUES (";
                 sqlStr += this.id_cliente_actual+",";
                 sqlStr += this.id_punto_actual+",";
                 sqlStr += "'"+sDescripcion+"',";
                 sqlStr += jTextField26.getText()+",";
                 sqlStr += jTextField23.getText()+",";
                 sqlStr += jTextField20.getText()+",";
                 sqlStr += jTextField74.getText()+",";
                 sqlStr += "'"+sFech1+"',";
                 sqlStr += "'"+sFech2+"',";
                 sqlStr += "'"+jTextArea3.getText()+"',"; 
                 sqlStr += jTextField112.getText()+",";
                 sqlStr += "1"+")";
                 

                 System.out.println(sqlStr);
                 estadoInsert= misaepDao3.registrarFila(sqlStr);

                 // .....................................
                 if (estadoInsert==0){

                      // .....................................                                consultamos el último id que se ha asignado
                
                    sqlStr = "SELECT id FROM t_c20indx ORDER BY id DESC LIMIT 1 ";

                    estadoInsert= misaepDao4.ultimoIdentificador(sqlStr);

                    id_tF               = misaepDao4.id ;
                    
                   this.lCondicionesSimulacion[this.indGen][21] = String.valueOf(id_tF );     // Actualizo el identificador de condiciones simulacion 
                  
                     
                      // .....................................                                actualizo el estado de la tabla de condiciones de facturacion

                     sqlStr = "UPDATE t_c20indx SET id_estado=0 WHERE id="+id_cond_actuales ;

                     estadoInsert= misaepDao3.registrarFila(sqlStr);
                     
                     
                     // .....................................                                actualizo el estado de la tabla de condiciones de facturacion

                     sqlStr = "UPDATE t_c20indx SET id_estado=0 WHERE id="+id_cond_actuales ;

                     estadoInsert= misaepDao3.registrarFila(sqlStr);
                    
                      // .....................................                                actualizo el estado de la tabla de contratos puntos a 0
                     
                     sqlStr = "UPDATE t_contratos_puntos SET id_estado=0 WHERE id_punto="+this.id_punto_actual+ " AND id_estado=1" ;

                     estadoInsert= misaepDao3.registrarFila(sqlStr);
                     
                      // .....................................                                Inserto nuevo registro con los cambios producidos

                    sqlStr  ="INSERT INTO t_contratos_puntos  (id_cliente,id_punto,fecha_contrato,fecha_fin,id_tarifa,id_condiciones_contrato,descripcion,"
                            + "fecha_realizacion_cambio,observaciones,compañia,id_estado) VALUES (";
                    sqlStr += this.id_cliente_actual+",";
                    sqlStr += this.id_punto_actual+",";
                    sqlStr += "'"+sFech1+"',";
                    sqlStr += "'"+sFech2+"',";
                    sqlStr += this.tipo_Sim+",";
                    sqlStr += id_tF+",";
                    sqlStr += "'"+jTextField39.getText()+"',";
                    sqlStr += "'"+sFech2+"',";
                    sqlStr += "'"+jTextArea2.getText()+"',"; 
                    sqlStr += "'"+jTextField34.getText()+"',";
                    sqlStr += "1"+")";

                    System.out.println(sqlStr);
                    estadoInsert= misaepDao3.registrarFila(sqlStr);
                     
                    
                 }  
                 botonValidarSim.setVisible(false);
             }
            // .......................................................................................................................................  
             // .....................................         INSERTA FILA   TARIFA 2.1 INDX

            if ( this.tipo_Sim== 12) {                        // .................................   INSERTAMOS EN t_C21indx

                 // .....................................

                 sqlStr  ="INSERT INTO t_c21indx (id_cliente,id_punto,descripcion,potencia_contratada,precio_potencia,precio_energia_p1,precio_energia_peaje,fecha_inicio,fecha_fin,observaciones,alquiler,id_estado) VALUES (";
                 sqlStr += this.id_cliente_actual+",";
                 sqlStr += this.id_punto_actual+",";
                 sqlStr += "'"+sDescripcion+"',";
                 sqlStr += jTextField26.getText()+",";
                 sqlStr += jTextField23.getText()+",";
                 sqlStr += jTextField20.getText()+",";
                 sqlStr += jTextField74.getText()+",";
                 sqlStr += "'"+sFech1+"',";
                 sqlStr += "'"+sFech2+"',";
                 sqlStr += "'"+jTextArea3.getText()+"',";  
                 sqlStr += jTextField112.getText()+",";
                 sqlStr += "1"+")";
                 

                 System.out.println(sqlStr);
                 estadoInsert= misaepDao3.registrarFila(sqlStr);

                 // .....................................
                 if (estadoInsert==0){

                      // .....................................                                consultamos el último id que se ha asignado
                
                    sqlStr = "SELECT id FROM t_c21indx ORDER BY id DESC LIMIT 1 ";

                    estadoInsert= misaepDao4.ultimoIdentificador(sqlStr);

                    id_tF               = misaepDao4.id ;
                    
                   this.lCondicionesSimulacion[this.indGen][21] = String.valueOf(id_tF );     // Actualizo el identificador de condiciones simulacion 
                  
                     
                      // .....................................                                actualizo el estado de la tabla de condiciones de facturacion

                     sqlStr = "UPDATE t_c21indx SET id_estado=0 WHERE id="+id_cond_actuales ;

                     estadoInsert= misaepDao3.registrarFila(sqlStr);
                     
                     
                     // .....................................                                actualizo el estado de la tabla de condiciones de facturacion

                     sqlStr = "UPDATE t_c21indx SET id_estado=0 WHERE id="+id_cond_actuales ;

                     estadoInsert= misaepDao3.registrarFila(sqlStr);
                    
                      // .....................................                                actualizo el estado de la tabla de contratos puntos a 0
                     
                     sqlStr = "UPDATE t_contratos_puntos SET id_estado=0 WHERE id_punto="+this.id_punto_actual+ " AND id_estado=1" ;

                     estadoInsert= misaepDao3.registrarFila(sqlStr);
                     
                      // .....................................                                Inserto nuevo registro con los cambios producidos

                    sqlStr  ="INSERT INTO t_contratos_puntos  (id_cliente,id_punto,fecha_contrato,fecha_fin,id_tarifa,id_condiciones_contrato,descripcion,"
                            + "fecha_realizacion_cambio,observaciones,compañia,id_estado) VALUES (";
                    sqlStr += this.id_cliente_actual+",";
                    sqlStr += this.id_punto_actual+",";
                    sqlStr += "'"+sFech1+"',";
                    sqlStr += "'"+sFech2+"',";
                    sqlStr += this.tipo_Sim+",";
                    sqlStr += id_tF+",";
                    sqlStr += "'"+jTextField39.getText()+"',";
                    sqlStr += "'"+sFech2+"',";
                    sqlStr += "'"+jTextArea2.getText()+"',"; 
                    sqlStr += "'"+jTextField34.getText()+"',";
                    sqlStr += "1"+")";

                    System.out.println(sqlStr);
                    estadoInsert= misaepDao3.registrarFila(sqlStr);
                     
                    
                 }  
                 botonValidarSim.setVisible(false);
             }
            
            if ( this.tipo_Sim == 13 ) {                               // .................................   INSERTAMOS EN t_c3.1aindx

                 // .....................................

                 sqlStr  ="INSERT INTO t_c31aindx(id_cliente,id_punto,compañia,descripcion,potencia_contratada_p1,potencia_contratada_p2,potencia_contratada_p3,precio_potencia_p1,precio_potencia_p2,precio_potencia_p3,precio_energia_p1,precio_energia_p2,precio_energia_p3,precio_energia_peaje,fecha_inicio,fecha_fin,observaciones,fPotenciaMaxima,alquiler,id_estado) VALUES (";
                 sqlStr += this.id_cliente_actual+",";
                 sqlStr += this.id_punto_actual+",";
                 sqlStr += "'"+jTextField34.getText()+"',";
                 sqlStr += "'"+sDescripcion+"',";
                 sqlStr += jTextField26.getText()+",";
                 sqlStr += jTextField37.getText()+",";
                 sqlStr += jTextField38.getText()+",";
                 sqlStr += jTextField23.getText()+",";
                 sqlStr += jTextField24.getText()+",";
                 sqlStr += jTextField25.getText()+",";
                 sqlStr += jTextField20.getText()+",";
                 sqlStr += jTextField21.getText()+",";
                 sqlStr += jTextField22.getText()+",";     
                 sqlStr += jTextField74.getText()+",";
                 sqlStr += "'"+sFech1+"',";
                 sqlStr += "'"+sFech2+"',";
                 sqlStr += "'"+jTextArea3.getText()+"',";   
                 sqlStr += fPotMax+",";
                 sqlStr += jTextField112.getText()+",";
                 sqlStr += "1"+")";
                 
                 System.out.println("INSERTAMOS INDEXADO ="+sqlStr);

              
                 estadoInsert= misaepDao3.registrarFila(sqlStr);

                 // .....................................
                 if (estadoInsert==0){

                     // .....................................                                actualizo el estado de la tabla de datos del punto de suministro
                     sqlStr = "UPDATE t_datos_puntos_suministro SET tarifa_actual='3.1A INDX ',id_tarifa_actual=13 WHERE idd="+this.id_punto_actual ;

                     estadoInsert= misaepDao3.registrarFila(sqlStr);
                   
                    // .....................................                                consultamos el último id que se ha asignado
                
                    sqlStr = "SELECT id FROM t_c31aindx ORDER BY id DESC LIMIT 1 ";

                    estadoInsert= misaepDao4.ultimoIdentificador(sqlStr);

                    id_tF               = misaepDao4.id ;
               
                   this.lCondicionesSimulacion[this.indGen][21] = String.valueOf(id_tF );     // Actualizo el identificador de condiciones simulacion 
                     
                                                              
                      // .....................................                                actualizo el estado de la tabla de contratos puntos a 0
                     
                     sqlStr = "UPDATE t_contratos_puntos SET id_estado=0 WHERE id_punto="+this.id_punto_actual+ " AND id_estado=1" ;

                     estadoInsert= misaepDao3.registrarFila(sqlStr);
                     
                      // .....................................                                Inserto nuevo registro con los cambios producidos
                     
                     strTarifa = this.lTiposTarifas[this.tipo_Act];                          // Tipo de tarifa

                    sqlStr  ="INSERT INTO t_contratos_puntos  (id_cliente,id_punto,fecha_contrato,fecha_fin,id_tarifa,id_condiciones_contrato,descripcion,"
                            + "fecha_realizacion_cambio,observaciones,compañia,id_estado) VALUES (";
                    sqlStr += this.id_cliente_actual+",";
                    sqlStr += this.id_punto_actual+",";
                    sqlStr += "'"+sFech1+"',";
                    sqlStr += "'"+sFech2+"',";
                    sqlStr += this.tipo_Sim+",";
                    sqlStr += id_tF+",";
                    sqlStr += "'"+strTarifa+"',";
                    sqlStr += "'"+sFech2+"',";
                    sqlStr += "'"+jTextArea3.getText()+"',"; 
                    sqlStr += "'"+jTextField34.getText()+"',";
                    sqlStr += "1"+")";
                    
                    System.out.println(sqlStr);
                    estadoInsert= misaepDao3.registrarFila(sqlStr);
                     
                    
                 } 
                 
                     botonValidarSim.setVisible(false);

             }
            
        } // End if RESP=si
        
    }
    public void actualizarPanelConcionesActuales(int indice) throws SQLException{
        
        int idCA, idTCA;
        
        idCA  = Integer.parseInt(lAhorrosHistorico[indice][11]) ;               // Indice de la tabla de condiciones actuales para ese cálculo
        idTCA = Integer.parseInt(lAhorrosHistorico[indice][13]) ;               // Tipo de contrato condiciones actuales para ese calculo
        
        if (idTCA>0 && idTCA <11)    jTextField56.setText(this.lTiposTarifas[idTCA]); else jTextField56.setText("");
        
        
        DefaultTableModel model10;
	model10 = new DefaultTableModel();                                      // definimos el objeto tableModel
               
		tablaC01 = new JTable();                                       // creamos la instancia de la tabla
		tablaC01.setModel(model10);
                 
                model10.addColumn("DATO"); 
                model10.addColumn("VALOR"); 
                
              
                //Nueva instancia de la clase que contiene el formato
                FormatoTablaPuntos formato = new FormatoTablaPuntos();
                          
                //Se obtiene la tabla y se establece el formato para cada tipo de dato
                
                tablaC01.setDefaultRenderer(Double.class, formato); 
                tablaC01.setDefaultRenderer(String.class, formato); 
                tablaC01.setDefaultRenderer(Integer.class, formato);
                tablaC01.setDefaultRenderer(Object.class, formato);
		
                saepDao misaepDao = new saepDao();
                
		misaepDao.consultaDatosCondiciones(model10,idCA,idTCA);         System.out.println("ConsultaDatosCondiciones (idCA,idTCA)=("+idCA+","+idTCA+")");
              
                jScrollPane10.setViewportView(tablaC01);
                
                
    }
    // ------------------------------------------------------------------------------------------------------------------------------------------
     public void actualizarPanelConcionesSimulacion(int indice) throws SQLException{
        
        int idCA, idTCA;
        
        idCA  = Integer.parseInt(lAhorrosHistorico[indice][12]) ;               // Indice de la tabla de condiciones simulacion para ese cálculo
        idTCA = Integer.parseInt(lAhorrosHistorico[indice][14]) ;               // Tipo de contrato condiciones simulacion para ese calculo
         System.out.println("ConsultaDatosCondiciones Simulacion (idCA,idTCA)=("+idCA+","+idTCA+")");
        
         if (idTCA>0 && idTCA <11)    {jTextField57.setText(this.lTiposTarifas[idTCA]); System.out.println("ECHO");} else jTextField57.setText("");
        
         
        DefaultTableModel model11;
	model11 = new DefaultTableModel();                                      // definimos el objeto tableModel
               
		tablaC02 = new JTable();                                       // creamos la instancia de la tabla
		tablaC02.setModel(model11);
                 
                model11.addColumn("DATO"); 
                model11.addColumn("VALOR"); 
                
              
                //Nueva instancia de la clase que contiene el formato
                FormatoTablaPuntos formato = new FormatoTablaPuntos();
                          
                //Se obtiene la tabla y se establece el formato para cada tipo de dato
                
                tablaC02.setDefaultRenderer(Double.class, formato); 
                tablaC02.setDefaultRenderer(String.class, formato); 
                tablaC02.setDefaultRenderer(Integer.class, formato);
                tablaC02.setDefaultRenderer(Object.class, formato);
		
                saepDao misaepDao = new saepDao();
                
		misaepDao.consultaDatosCondiciones(model11,idCA,idTCA);
              
                jScrollPane11.setViewportView(tablaC02);
                
                // .............................................            Pasamos datos por referencia a la ventana de generación de factura virtual
                          
                this.misDatos.pe1    = misaepDao.pe1 ;
                this.misDatos.pe2    = misaepDao.pe2 ;
                this.misDatos.pe3    = misaepDao.pe3 ;
                this.misDatos.pep    = misaepDao.pep ;
                
                this.misDatos.ppp    = misaepDao.ppp ;
                this.misDatos.ppll   = misaepDao.ppll ;
                this.misDatos.ppv    = misaepDao.ppv ;
                
                this.misDatos.pcp   = misaepDao.pcp ;
                this.misDatos.pcll  = misaepDao.pcll;
                this.misDatos.pcv   = misaepDao.pcv ;
                
                this.misDatos.descuento   = misaepDao.descuento ;
                this.misDatos.psalquiler  = misaepDao.pAlq ;
                
                // .............................................  
    }
   // ------------------------------------------------------------------------------------------------------------------------------------------
     public void actualizarPanelConcionesFactura(int indice) throws SQLException{
        
        int idCA, idTCA;
        
        idCA  = Integer.parseInt(lAhorrosHistorico[indice][10]) ;               // Indice de la tabla de facturas actuales para ese cálculo
        idTCA = Integer.parseInt(lAhorrosHistorico[indice][13]) ;               // Tipo de facturas
        
     //    if (idTCA>0 && idTCA <11)    jTextField57.setText(this.lTiposTarifas[idTCA]); else jTextField57.setText("");
        
        
        DefaultTableModel model12;
	model12 = new DefaultTableModel();                                      // definimos el objeto tableModel
               
		tablaC03 = new JTable();                                       // creamos la instancia de la tabla
		tablaC03.setModel(model12);
                 
                model12.addColumn("DATO"); 
                model12.addColumn("VALOR"); 
                
              
                //Nueva instancia de la clase que contiene el formato
                FormatoTablaPuntos formato = new FormatoTablaPuntos();
                          
                //Se obtiene la tabla y se establece el formato para cada tipo de dato
                
                tablaC03.setDefaultRenderer(Double.class, formato); 
                tablaC03.setDefaultRenderer(String.class, formato); 
                tablaC03.setDefaultRenderer(Integer.class, formato);
                tablaC03.setDefaultRenderer(Object.class, formato);
		
                saepDao misaepDao = new saepDao();
                
		misaepDao.consultaDatosFacturas(model12,idCA,idTCA);
              
                jScrollPane6.setViewportView(tablaC03);
                
                // .............................................            Pasamos datos por referencia a la ventana de generación de factura virtual
                this.misDatos.sFecha1 = misaepDao.fecha_inicio;
                this.misDatos.sFecha2 = misaepDao.fecha_fin;
                
                this.misDatos.dias  = diferenciaFechas(this.misDatos.sFecha1,this.misDatos.sFecha2,1);
                
                System.out.println("He calculado dias="+this.misDatos.dias);
                
                this.misDatos.e1        = misaepDao.e1 ;
                this.misDatos.e2        = misaepDao.e2 ;
                this.misDatos.e3        = misaepDao.e3 ;
                this.misDatos.ep        = misaepDao.ep ;
                
                this.misDatos.pp        = misaepDao.pF1 ;
                this.misDatos.pll       = misaepDao.pF2 ;
                this.misDatos.pv        = misaepDao.pF3 ;
                               
                this.misDatos.Rp1       = misaepDao.r1 ;
                this.misDatos.Rp2       = misaepDao.r2 ;
                this.misDatos.Rp3       = misaepDao.r3 ;
                this.misDatos.TR        = misaepDao.TR ;
                
                this.misDatos.rF1        = misaepDao.rF1 ;
                this.misDatos.rF2        = misaepDao.rF2 ;
                
                this.misDatos.alquiler   = misaepDao.alquiler ;
                this.misDatos.descuento  = misaepDao.descuento ;
                
                this.misDatos.rs1        = misaepDao.rs1 ;
                this.misDatos.rs2        = misaepDao.rs2 ;
                
                this.misDatos.TR        = misaepDao.TR ;
                
                this.misDatos.e1s        = misaepDao.e1s ;
                this.misDatos.e2s        = misaepDao.e2s ;
                this.misDatos.e3s        = misaepDao.e3s ;
                
                // .............................................
                
                        
                
                
                
    }
     
     // ------------------------------------------------------------------------------------------------------------------------------------------
     public void actualizarPanelConcionesCalculo(int indice) throws SQLException{
        
        int idCA, idTCA;
        
        idTCA = Integer.parseInt(lAhorrosHistorico[indice][13]) ;               // Tipo de facturas
        this.indiceCalculo = indice ;
        System.out.println("actualizarPanelConcionesCalculo("+indice+") idTCA ="+idTCA );
        NumberFormat formatoImporte = NumberFormat.getCurrencyInstance();

        formatoImporte = NumberFormat.getCurrencyInstance(new Locale("es","ES"));

        NumberFormat formatoPorcentaje = NumberFormat.getPercentInstance();

        NumberFormat formatoNumero = NumberFormat.getNumberInstance();

        formatoNumero.setMaximumFractionDigits(2);
        
        DefaultTableModel model13;
	model13 = new DefaultTableModel();                                      // definimos el objeto tableModel
               
		tablaC04 = new JTable();                                       // creamos la instancia de la tabla
		tablaC04.setModel(model13);
                 
                model13.addColumn("DATO"); 
                model13.addColumn("VALOR"); 
                
              
                //Nueva instancia de la clase que contiene el formato
                FormatoTablaPuntos formato = new FormatoTablaPuntos();
                          
                //Se obtiene la tabla y se establece el formato para cada tipo de dato
                
                tablaC04.setDefaultRenderer(Double.class, formato); 
                tablaC04.setDefaultRenderer(String.class, formato); 
                tablaC04.setDefaultRenderer(Integer.class, formato);
                tablaC04.setDefaultRenderer(Object.class, formato);
		
                 // .......................................................... 
                        
                 Object[] fila = new Object[2];
                 
                  
                 switch (idTCA) {
                                case 1:
                                    fila[0] = "Id" ;                            fila[1] = this.lAhorrosHistorico[indice][0];
                                    model13.addRow(fila);
                                    fila[0] = "Fecha de cálculo" ;              fila[1] = this.lAhorrosHistorico[indice][3]; 
                                    model13.addRow(fila);
                                    fila[0] = "Dias de Facturación Optimizada"; fila[1] = this.lAhorrosHistorico[indice][4];  
                                    model13.addRow(fila);
                                    fila[0] = "Ahorro Conseguido" ;             fila[1] = formatoImporte.format(Double.parseDouble(this.lAhorrosHistorico[indice][5]));       
                                    model13.addRow(fila);
                                    fila[0] = "Ahorro total" ;                  fila[1] = formatoImporte.format(Double.parseDouble(this.lAhorrosHistorico[indice][6]));          
                                    model13.addRow(fila);
                                    fila[0] = "Coste Actual" ;                  fila[1] = formatoImporte.format(Double.parseDouble(this.lAhorrosHistorico[indice][7]));              
                                    model13.addRow(fila);
                                    fila[0] = "Coste Simulado" ;                fila[1] = formatoImporte.format(Double.parseDouble(this.lAhorrosHistorico[indice][8]));    
                                    model13.addRow(fila);
                                    fila[0] = "Porcentaje de ahorro" ;          fila[1] = formatoPorcentaje.format(Double.parseDouble(this.lAhorrosHistorico[indice][9])); 
                                    model13.addRow(fila);
                                    
                                break;
                                case 2:
                                    fila[0] = "Id" ;                            fila[1] = this.lAhorrosHistorico[indice][0];
                                    model13.addRow(fila);
                                    fila[0] = "Fecha de cálculo" ;                         fila[1] = this.lAhorrosHistorico[indice][3]; 
                                    model13.addRow(fila);
                                    fila[0] = "Dias de Facturación Optimizada"; fila[1] = this.lAhorrosHistorico[indice][4];  
                                    model13.addRow(fila);
                                    fila[0] = "Ahorro Conseguido" ;             fila[1] = formatoImporte.format(Double.parseDouble(this.lAhorrosHistorico[indice][5]));       
                                    model13.addRow(fila);
                                    fila[0] = "Ahorro total" ;                  fila[1] = formatoImporte.format(Double.parseDouble(this.lAhorrosHistorico[indice][6]));          
                                    model13.addRow(fila);
                                    fila[0] = "Coste Actual" ;                  fila[1] = formatoImporte.format(Double.parseDouble(this.lAhorrosHistorico[indice][7]));              
                                    model13.addRow(fila);
                                    fila[0] = "Coste Simulado" ;                fila[1] = formatoImporte.format(Double.parseDouble(this.lAhorrosHistorico[indice][8]));    
                                    model13.addRow(fila);
                                    fila[0] = "Porcentaje de ahorro" ;          fila[1] = formatoPorcentaje.format(Double.parseDouble(this.lAhorrosHistorico[indice][9])); 
                                    model13.addRow(fila);
                                    
                                break;
                                case 3:
                                    fila[0] = "Id" ;                            fila[1] = this.lAhorrosHistorico[indice][0];
                                    model13.addRow(fila);
                                    fila[0] = "Fecha de cálculo" ;                         fila[1] = this.lAhorrosHistorico[indice][3]; 
                                    model13.addRow(fila);
                                    fila[0] = "Dias de Facturación Optimizada"; fila[1] = this.lAhorrosHistorico[indice][4];  
                                    model13.addRow(fila);
                                    fila[0] = "Ahorro Conseguido" ;             fila[1] = formatoImporte.format(Double.parseDouble(this.lAhorrosHistorico[indice][5]));       
                                    model13.addRow(fila);
                                    fila[0] = "Ahorro total" ;                  fila[1] = formatoImporte.format(Double.parseDouble(this.lAhorrosHistorico[indice][6]));          
                                    model13.addRow(fila);
                                    fila[0] = "Coste Actual" ;                  fila[1] = formatoImporte.format(Double.parseDouble(this.lAhorrosHistorico[indice][7]));              
                                    model13.addRow(fila);
                                    fila[0] = "Coste Simulado" ;                fila[1] = formatoImporte.format(Double.parseDouble(this.lAhorrosHistorico[indice][8]));    
                                    model13.addRow(fila);
                                    fila[0] = "Porcentaje de ahorro" ;          fila[1] = formatoPorcentaje.format(Double.parseDouble(this.lAhorrosHistorico[indice][9])); 
                                    model13.addRow(fila);
                                       
                                break;
                                case 4:
                                    fila[0] = "Id" ;                            fila[1] = this.lAhorrosHistorico[indice][0];
                                    model13.addRow(fila);
                                    fila[0] = "Fecha de cálculo" ;                         fila[1] = this.lAhorrosHistorico[indice][3]; 
                                    model13.addRow(fila);
                                    fila[0] = "Dias de Facturación Optimizada"; fila[1] = this.lAhorrosHistorico[indice][4];  
                                    model13.addRow(fila);
                                    fila[0] = "Ahorro Conseguido" ;             fila[1] = formatoImporte.format(Double.parseDouble(this.lAhorrosHistorico[indice][5]));       
                                    model13.addRow(fila);
                                    fila[0] = "Ahorro total" ;                  fila[1] = formatoImporte.format(Double.parseDouble(this.lAhorrosHistorico[indice][6]));          
                                    model13.addRow(fila);
                                    fila[0] = "Coste Actual" ;                  fila[1] = formatoImporte.format(Double.parseDouble(this.lAhorrosHistorico[indice][7]));              
                                    model13.addRow(fila);
                                    fila[0] = "Coste Simulado" ;                fila[1] = formatoImporte.format(Double.parseDouble(this.lAhorrosHistorico[indice][8]));    
                                    model13.addRow(fila);
                                    fila[0] = "Porcentaje de ahorro" ;          fila[1] = formatoPorcentaje.format(Double.parseDouble(this.lAhorrosHistorico[indice][9])); 
                                    model13.addRow(fila);
                                       
                                break;
                                case 5:
                                    fila[0] = "Id" ;                            fila[1] = this.lAhorrosHistorico[indice][0];
                                    model13.addRow(fila);
                                    fila[0] = "Fecha de cálculo" ;              fila[1] = this.lAhorrosHistorico[indice][3]; 
                                    model13.addRow(fila);
                                    fila[0] = "Dias de Facturación Optimizada"; fila[1] = this.lAhorrosHistorico[indice][4];  
                                    model13.addRow(fila);
                                    fila[0] = "Ahorro Conseguido" ;             fila[1] = formatoImporte.format(Double.parseDouble(this.lAhorrosHistorico[indice][5]));       
                                    model13.addRow(fila);
                                    fila[0] = "Ahorro total" ;                  fila[1] = formatoImporte.format(Double.parseDouble(this.lAhorrosHistorico[indice][6]));          
                                    model13.addRow(fila);
                                    fila[0] = "Coste Actual" ;                  fila[1] = formatoImporte.format(Double.parseDouble(this.lAhorrosHistorico[indice][7]));              
                                    model13.addRow(fila);
                                    fila[0] = "Coste Simulado" ;                fila[1] = formatoImporte.format(Double.parseDouble(this.lAhorrosHistorico[indice][8]));    
                                    model13.addRow(fila);
                                    fila[0] = "Porcentaje de ahorro" ;          fila[1] = formatoPorcentaje.format(Double.parseDouble(this.lAhorrosHistorico[indice][9])); 
                                    model13.addRow(fila);
                                        
                                break;
                                 case 6:
                                    fila[0] = "Id" ;                            fila[1] = this.lAhorrosHistorico[indice][0];
                                    model13.addRow(fila);
                                    fila[0] = "Fecha de cálculo" ;              fila[1] = this.lAhorrosHistorico[indice][3]; 
                                    model13.addRow(fila);
                                    fila[0] = "Dias de Facturación Optimizada"; fila[1] = this.lAhorrosHistorico[indice][4];  
                                    model13.addRow(fila);
                                    fila[0] = "Ahorro Conseguido" ;             fila[1] = formatoImporte.format(Double.parseDouble(this.lAhorrosHistorico[indice][5]));       
                                    model13.addRow(fila);
                                    fila[0] = "Ahorro total" ;                  fila[1] = formatoImporte.format(Double.parseDouble(this.lAhorrosHistorico[indice][6]));          
                                    model13.addRow(fila);
                                    fila[0] = "Coste Actual" ;                  fila[1] = formatoImporte.format(Double.parseDouble(this.lAhorrosHistorico[indice][7]));              
                                    model13.addRow(fila);
                                    fila[0] = "Coste Simulado" ;                fila[1] = formatoImporte.format(Double.parseDouble(this.lAhorrosHistorico[indice][8]));    
                                    model13.addRow(fila);
                                    fila[0] = "Porcentaje de ahorro" ;          fila[1] = formatoPorcentaje.format(Double.parseDouble(this.lAhorrosHistorico[indice][9])); 
                                    model13.addRow(fila);
                                        
                                break;
                                case 8:
                                    fila[0] = "Id" ;                            fila[1] = this.lAhorrosHistorico[indice][0];
                                    model13.addRow(fila);
                                    fila[0] = "Fecha de cálculo" ;              fila[1] = this.lAhorrosHistorico[indice][3]; 
                                    model13.addRow(fila);
                                    fila[0] = "Dias de Facturación Optimizada"; fila[1] = this.lAhorrosHistorico[indice][4];  
                                    model13.addRow(fila);
                                    fila[0] = "Ahorro Conseguido" ;             fila[1] = formatoImporte.format(Double.parseDouble(this.lAhorrosHistorico[indice][5]));       
                                    model13.addRow(fila);
                                    fila[0] = "Ahorro total" ;                  fila[1] = formatoImporte.format(Double.parseDouble(this.lAhorrosHistorico[indice][6]));          
                                    model13.addRow(fila);
                                    fila[0] = "Coste Actual" ;                  fila[1] = formatoImporte.format(Double.parseDouble(this.lAhorrosHistorico[indice][7]));              
                                    model13.addRow(fila);
                                    fila[0] = "Coste Simulado" ;                fila[1] = formatoImporte.format(Double.parseDouble(this.lAhorrosHistorico[indice][8]));    
                                    model13.addRow(fila);
                                    fila[0] = "Porcentaje de ahorro" ;          fila[1] = formatoPorcentaje.format(Double.parseDouble(this.lAhorrosHistorico[indice][9])); 
                                    model13.addRow(fila);
                                        
                                break;
                                case 9:
                                    fila[0] = "Id" ;                            fila[1] = this.lAhorrosHistorico[indice][0];
                                    model13.addRow(fila);
                                    fila[0] = "Fecha de cálculo" ;              fila[1] = this.lAhorrosHistorico[indice][3]; 
                                    model13.addRow(fila);
                                    fila[0] = "Dias de Facturación Optimizada"; fila[1] = this.lAhorrosHistorico[indice][4];  
                                    model13.addRow(fila);
                                    fila[0] = "Ahorro Conseguido" ;             fila[1] = formatoImporte.format(Double.parseDouble(this.lAhorrosHistorico[indice][5]));       
                                    model13.addRow(fila);
                                    fila[0] = "Ahorro total" ;                  fila[1] = formatoImporte.format(Double.parseDouble(this.lAhorrosHistorico[indice][6]));          
                                    model13.addRow(fila);
                                    fila[0] = "Coste Actual" ;                  fila[1] = formatoImporte.format(Double.parseDouble(this.lAhorrosHistorico[indice][7]));              
                                    model13.addRow(fila);
                                    fila[0] = "Coste Simulado" ;                fila[1] = formatoImporte.format(Double.parseDouble(this.lAhorrosHistorico[indice][8]));    
                                    model13.addRow(fila);
                                    fila[0] = "Porcentaje de ahorro" ;          fila[1] = formatoPorcentaje.format(Double.parseDouble(this.lAhorrosHistorico[indice][9])); 
                                    model13.addRow(fila);
                                        
                                break;
                                case 10:
                                    fila[0] = "Id" ;                            fila[1] = this.lAhorrosHistorico[indice][0];
                                    model13.addRow(fila);
                                    fila[0] = "Fecha de cálculo" ;              fila[1] = this.lAhorrosHistorico[indice][3]; 
                                    model13.addRow(fila);
                                    fila[0] = "Dias de Facturación Optimizada"; fila[1] = this.lAhorrosHistorico[indice][4];  
                                    model13.addRow(fila);
                                    fila[0] = "Ahorro Conseguido" ;             fila[1] = formatoImporte.format(Double.parseDouble(this.lAhorrosHistorico[indice][5]));       
                                    model13.addRow(fila);
                                    fila[0] = "Ahorro total" ;                  fila[1] = formatoImporte.format(Double.parseDouble(this.lAhorrosHistorico[indice][6]));          
                                    model13.addRow(fila);
                                    fila[0] = "Coste Actual" ;                  fila[1] = formatoImporte.format(Double.parseDouble(this.lAhorrosHistorico[indice][7]));              
                                    model13.addRow(fila);
                                    fila[0] = "Coste Simulado" ;                fila[1] = formatoImporte.format(Double.parseDouble(this.lAhorrosHistorico[indice][8]));    
                                    model13.addRow(fila);
                                    fila[0] = "Porcentaje de ahorro" ;          fila[1] = formatoPorcentaje.format(Double.parseDouble(this.lAhorrosHistorico[indice][9])); 
                                    model13.addRow(fila);
                                        
                                break;
                                case 11:
                                    fila[0] = "Id" ;                            fila[1] = this.lAhorrosHistorico[indice][0];
                                    model13.addRow(fila);
                                    fila[0] = "Fecha de cálculo" ;              fila[1] = this.lAhorrosHistorico[indice][3]; 
                                    model13.addRow(fila);
                                    fila[0] = "Dias de Facturación Optimizada"; fila[1] = this.lAhorrosHistorico[indice][4];  
                                    model13.addRow(fila);
                                    fila[0] = "Ahorro Conseguido" ;             fila[1] = formatoImporte.format(Double.parseDouble(this.lAhorrosHistorico[indice][5]));       
                                    model13.addRow(fila);
                                    fila[0] = "Ahorro total" ;                  fila[1] = formatoImporte.format(Double.parseDouble(this.lAhorrosHistorico[indice][6]));          
                                    model13.addRow(fila);
                                    fila[0] = "Coste Actual" ;                  fila[1] = formatoImporte.format(Double.parseDouble(this.lAhorrosHistorico[indice][7]));              
                                    model13.addRow(fila);
                                    fila[0] = "Coste Simulado" ;                fila[1] = formatoImporte.format(Double.parseDouble(this.lAhorrosHistorico[indice][8]));    
                                    model13.addRow(fila);
                                    fila[0] = "Porcentaje de ahorro" ;          fila[1] = formatoPorcentaje.format(Double.parseDouble(this.lAhorrosHistorico[indice][9])); 
                                    model13.addRow(fila);
                                    
                                break;
                                case 12:
                                    fila[0] = "Id" ;                            fila[1] = this.lAhorrosHistorico[indice][0];
                                    model13.addRow(fila);
                                    fila[0] = "Fecha de cálculo" ;              fila[1] = this.lAhorrosHistorico[indice][3]; 
                                    model13.addRow(fila);
                                    fila[0] = "Dias de Facturación Optimizada"; fila[1] = this.lAhorrosHistorico[indice][4];  
                                    model13.addRow(fila);
                                    fila[0] = "Ahorro Conseguido" ;             fila[1] = formatoImporte.format(Double.parseDouble(this.lAhorrosHistorico[indice][5]));       
                                    model13.addRow(fila);
                                    fila[0] = "Ahorro total" ;                  fila[1] = formatoImporte.format(Double.parseDouble(this.lAhorrosHistorico[indice][6]));          
                                    model13.addRow(fila);
                                    fila[0] = "Coste Actual" ;                  fila[1] = formatoImporte.format(Double.parseDouble(this.lAhorrosHistorico[indice][7]));              
                                    model13.addRow(fila);
                                    fila[0] = "Coste Simulado" ;                fila[1] = formatoImporte.format(Double.parseDouble(this.lAhorrosHistorico[indice][8]));    
                                    model13.addRow(fila);
                                    fila[0] = "Porcentaje de ahorro" ;          fila[1] = formatoPorcentaje.format(Double.parseDouble(this.lAhorrosHistorico[indice][9])); 
                                    model13.addRow(fila);
                                    
                                break;
                                case 13:
                                    fila[0] = "Id" ;                            fila[1] = this.lAhorrosHistorico[indice][0];
                                    model13.addRow(fila);
                                    fila[0] = "Fecha de cálculo" ;              fila[1] = this.lAhorrosHistorico[indice][3]; 
                                    model13.addRow(fila);
                                    fila[0] = "Dias de Facturación Optimizada"; fila[1] = this.lAhorrosHistorico[indice][4];  
                                    model13.addRow(fila);
                                    fila[0] = "Ahorro Conseguido" ;             fila[1] = formatoImporte.format(Double.parseDouble(this.lAhorrosHistorico[indice][5]));       
                                    model13.addRow(fila);
                                    fila[0] = "Ahorro total" ;                  fila[1] = formatoImporte.format(Double.parseDouble(this.lAhorrosHistorico[indice][6]));          
                                    model13.addRow(fila);
                                    fila[0] = "Coste Actual" ;                  fila[1] = formatoImporte.format(Double.parseDouble(this.lAhorrosHistorico[indice][7]));              
                                    model13.addRow(fila);
                                    fila[0] = "Coste Simulado" ;                fila[1] = formatoImporte.format(Double.parseDouble(this.lAhorrosHistorico[indice][8]));    
                                    model13.addRow(fila);
                                    fila[0] = "Porcentaje de ahorro" ;          fila[1] = formatoPorcentaje.format(Double.parseDouble(this.lAhorrosHistorico[indice][9])); 
                                    model13.addRow(fila);
                                        
                                break;
                        }
                        // .......................................................... 
              
                jScrollPane7.setViewportView(tablaC04);
                
    }
  // ------------------------------------------------------------------------------------------------- 
        public void buscarCUPSe() {
        int i, nStr=0, id=-1,fEncuentro=0 ;
        String sBusqueda, sID ;
        sBusqueda = JOptionPane.showInputDialog("Introduce el CUPS electrico de contrato que buscas (completo ó 4 últimas cifras y 2 letras): ");
        
        int resp=JOptionPane.showConfirmDialog(null,"¿Buscar el CUPS de contrato ="+sBusqueda+" ?");
        
        
        if (JOptionPane.OK_OPTION == resp){
        
            sBusqueda    = sBusqueda.trim();
            nStr        = sBusqueda.length() ;
            if ( nStr == 6) {
                
                    for (i=0; i<this.nPuntos; i++){
                       
                        sID = this.listaPuntosSum[i][2].trim();
                        sID = sID.substring(14);                    System.out.println("Busco a:"+sID);
                       
                       if (sID.equals(sBusqueda)) {
                           
                           System.out.println("HE ENCONTRADO EL ID="+sID) ;
                           fEncuentro = 1 ;
                           actualizarFormularios(i) ;
                           break;
                           
                       }

                    }
            }
            if ( nStr == 20) {
                
                    for (i=0; i<this.nPuntos; i++){
                       
                        sID = this.listaPuntosSum[i][2].trim();
                        
                       
                       if (sID.equals(sBusqueda)) {
                           
                           System.out.println("HE ENCONTRADO EL ID="+sID) ;
                           fEncuentro = 1; 
                           actualizarFormularios(i) ;
                           break;
                           
                       }

                    }
            }
            
            if ( fEncuentro == 0) {                                             
                
                 JOptionPane.showMessageDialog(null,
		 "NO ENCUENTRO EL CUPS",
		 "Información",JOptionPane.INFORMATION_MESSAGE);
                 actualizarFormularios(-1) ;
            }
            
        }
        
        }
       // -------------------------------------------------------------------------------------------------  
   public void modificarDatosPuntoSuministro() {
       
       String sqlStr="";
       int ind;
       String sFech1="", sFech2="" ;
       
       saepDao misaepDao3 = new saepDao();
       
       sFech1 = jTextField116.getText(); sFech1.trim();
       sFech1 = dateToMySQLDate(sFech1);       
       if (sFech1.length()==0) sFech1="2000-01-01 00:00";
       
       sFech2 = jTextField117.getText(); sFech2.trim();
       sFech2 = dateToMySQLDate(sFech2);
       if (sFech2.length()==0) sFech2="2001-01-01 00:00";
       
       if (this.id_punto_actual > 0) {
           
           
            ind = tipoMedida.getSelectedIndex() ;   if ( ind==0) ind=1; else ind=2 ;
            this.listaPuntosSum[this.indGen][16] = Integer.toString(ind);                  // Medida
                        
           ind = tipoSuministro.getSelectedIndex() ;  if ( ind==0) ind=1; else ind=2 ;              // Con o sin Centro de Transformacion
           this.listaPuntosSum[this.indGen][17]= Integer.toString(ind); 
           
           if (jCheckBox1.isSelected()) { this.listaPuntosSum[this.indGen][12] = "1";} else { this.listaPuntosSum[this.indGen][12] = "0"; }     //   Gas
           
           
            // .....................................

                 sqlStr  ="UPDATE t_datos_puntos_suministro SET ";
                 sqlStr +="id_cliente='"+this.id_cliente_actual+"',";
                 sqlStr +="nombre='"+jTextField1.getText()+"',"; 
                 sqlStr +="cups='"+jTextField2.getText()+"',"; 
                 sqlStr +="cif='"+jTextField3.getText()+"',"; 
                 sqlStr +="tarifa_actual='"+""+"',"; 
                 sqlStr +="id_tarifa_actual='"+this.listaContratosPuntosAct[this.indGen][3]+"',"; 
                 sqlStr +="bloque='"+jTextField59.getText()+"',"; 
                 sqlStr +="notas='"+jTextArea1.getText()+"',"; 
                 sqlStr +="fBateriaC='"+this.listaPuntosSum[this.indGen][12]+"',"; 
                 sqlStr +="TrfP='"+jTextField4.getText()+"',"; 
                 sqlStr +="TrfS='"+jTextField62.getText()+"',"; 
                 sqlStr +="TrfMax='"+jTextField61.getText()+"',"; 
                 sqlStr +="fMedida='"+this.listaPuntosSum[this.indGen][16]+"',"; 
                 
                 sqlStr +="batDesde='"+sFech1+"',"; 
                 sqlStr +="batHasta='"+sFech2+"',"; 
                 sqlStr +="cosfiP1='"+jTextField118.getText()+"',"; 
                 sqlStr +="cosfiP2='"+jTextField120.getText()+"',";                    
                 sqlStr +="batDescripcion='"+jTextField119.getText()+"',"; 
                 
                 sqlStr +="fCT='"+this.listaPuntosSum[this.indGen][17]+"'"; 
                 sqlStr +=" WHERE idd="+this.listaPuntosSum[this.indGen][0];
                 System.out.println(sqlStr);
                 misaepDao3.registrarFila(sqlStr);

           
       }
       
            this.listaPuntosSum[this.indGen][1]= jTextField1.getText();
            this.listaPuntosSum[this.indGen][2]=jTextField2.getText();
            this.listaPuntosSum[this.indGen][3]=jTextField3.getText();
        
            this.listaPuntosSum[this.indGen][10]=jTextField10.getText();
            this.listaPuntosSum[this.indGen][11]=jTextArea1.getText();
            this.listaPuntosSum[this.indGen][18]=jTextField59.getText();
                    
            this.listaPuntosSum[this.indGen][13]=jTextField4.getText() ;
            this.listaPuntosSum[this.indGen][14]=jTextField62.getText() ;
            this.listaPuntosSum[this.indGen][15]=jTextField61.getText() ;
       
        JOptionPane.showMessageDialog(null,
		 "EL REGISTRO SE HA MODIFICADO CORRECTAMENTE",
		 "Información",JOptionPane.INFORMATION_MESSAGE);
       
       
   }
   // ---------------------------------------------------------------------------------
   public void actualizarFechaUltimoCalculo(int id_cliente)
    {
        
      saepDao misaepDao = new saepDao();  
      misaepDao.FechaultimoCalculo( id_cliente);
      this.FechaUltimoCalculo = misaepDao.fechaUltimoCalculo ;
      
      System.out.println("La fecha del ultimo cálculo para id_cliente="+id_cliente+" es="+this.FechaUltimoCalculo );
   }
   public void anularLineaAhorro() {
    // ---------------------------------------------------------------------------------   
    String sqlStr;
    int estadoInsert=1;
    int resp=JOptionPane.showConfirmDialog(null,"¿ESTÁS SEGURO DE QUERE ANULAR LA LÍNEA DE CÁLCULO DE AHORRO SELECCIONADA?");
        
     saepDao misaepDaoB = new saepDao();
       
    
        if (JOptionPane.OK_OPTION == resp){
          
                    sqlStr  = "UPDATE t_ahorros_historico SET id_cliente=0 WHERE id_cliente="+this.id_cliente_actual ;
                    sqlStr += " AND id="+this.lAhorrosHistorico[this.indiceCalculo][0] ;
                    
                 
                    System.out.println(sqlStr);
                    estadoInsert= misaepDaoB.registrarFila(sqlStr);
                    
                    if (estadoInsert==0) {
                        
                        JOptionPane.showMessageDialog(null,
                        "EL REGISTRO SE HA ANULADO CORRECTAMENTE",
                        "Información",JOptionPane.INFORMATION_MESSAGE);
                    }
            
        }
        
        
   }
   // ---------------------------------------------------------------------------------
   public void generarExcelHistoricoCalculos() {
       String col0,col1,col2,col3,col4,col5,col6,col7,col8,col9,col10,col11,col12,col13,col14 ;
       
        int i,j,nR;
       
        System.out.println("APUNTO DE GENERAR EXEL RESUMEN ANEXO");
        
        int resp=JOptionPane.showConfirmDialog(null,"¿Crear EXEL  de ANEXO DETALLES CÁLCULO : ?");
        
        
        if (JOptionPane.OK_OPTION == resp){
        

                    nR  = this.nPuntosCalAhorroDetalle ;
                   

            HSSFWorkbook libro = new HSSFWorkbook();        
            HSSFSheet hoja = libro.createSheet("DETALLES");
            Row fila = hoja.createRow(0);        
            Cell celda;


            String[] titulos = { "FECHA","NOMBRE","CUPS","TARIFA","MERCADO","DIRECCIÓN TIENDA","LOCALIDAD","CIF","DIAS DESDE OPTIMIZACIÓN",
                                 "AHORRO CONSEGUIDO","AHORRO TOTAL","COSTE TOTAL","COSTE SIM","% AHORRO" };                                      // 14 CAMPOS

            NumberFormat formatoImporte = NumberFormat.getCurrencyInstance();
            NumberFormat formatoPorcentaje = NumberFormat.getPercentInstance();
            NumberFormat formatoNumero = NumberFormat.getNumberInstance();
            formatoImporte = NumberFormat.getCurrencyInstance(new Locale("es","ES"));
                
     
            
           
            // Creamos el encabezado

            for (i = 0; i < titulos.length; i++) {
                  celda = fila.createCell(i);
                  celda.setCellValue(titulos[i]);
            }
 

            for (j=0; j<this.nPuntosCalAhorroDetalle; j++) {

               // Nueva fila 
               i = 0 ;
               fila = hoja.createRow(j+1);

               System.out.println("Inserto celdas Exel en fila  ="+j);

               col0 = (String) miTabla02.getValueAt(j, 1) ;                              // FECHA
               col1 = (String) miTabla02.getValueAt(j, 2) ;                              // NOMBRE
               col2 = (String) miTabla02.getValueAt(j, 3) ;                              // CUPS 
               col3 = (String) miTabla02.getValueAt(j, 4);                               // TARIFA LOCALIDAD
               col4 = (String) miTabla02.getValueAt(j, 5);                               // MERCADO
               col5 = (String) miTabla02.getValueAt(j, 6);                               // DIRECCIÓN TIENDA
               col6 = (String) miTabla02.getValueAt(j, 7);                               // LOCALIDAD
               col7 = (String) miTabla02.getValueAt(j, 8);                               // CIF
               
               
               col8 = String.valueOf(miTabla02.getValueAt(j, 9));                        // DIAS DESDE OPTIMIZACIÓN       
                                                                                       
               col9 = String.valueOf(miTabla02.getValueAt(j, 10));                        //AHORRO CONSEGUIDO
                                                                            
               col10 = String.valueOf(miTabla02.getValueAt(j, 11));                      //AHORRO TOTAL
               col11 = String.valueOf(miTabla02.getValueAt(j, 12));                       // COSTE TOTAL
               col12 = String.valueOf(miTabla02.getValueAt(j, 13));                       // COSTE SIM
               col13 = String.valueOf(miTabla02.getValueAt(j, 14));                       // Porcentaje ahorro
               
               // ....................................................................................
               
               celda = fila.createCell(i);  celda.setCellValue(col1);      i++;        // 
               celda = fila.createCell(i);  celda.setCellValue(col2);      i++;        //   
               celda = fila.createCell(i);  celda.setCellValue(col3);      i++;        // 
               celda = fila.createCell(i);  celda.setCellValue(col4);      i++;        // 
               celda = fila.createCell(i);  celda.setCellValue(col5);      i++;        // 
               celda = fila.createCell(i);  celda.setCellValue(col6);      i++;        //
               celda = fila.createCell(i);  celda.setCellValue(col7);      i++;        //
               celda = fila.createCell(i);  celda.setCellValue(col8);      i++;        //
               celda = fila.createCell(i);  celda.setCellValue(col9);      i++;        //
               celda = fila.createCell(i);  celda.setCellValue(col9);      i++;        //
               celda = fila.createCell(i);  celda.setCellValue(col10);      i++;        //
               celda = fila.createCell(i);  celda.setCellValue(col11);      i++;        //
               celda = fila.createCell(i);  celda.setCellValue(col12);      i++;        //
               celda = fila.createCell(i);  celda.setCellValue(col13);      i++;        //
              
            }

            try
            {
                String nombre="";
                JFileChooser file=new JFileChooser();
                file.showSaveDialog(this);
                File guarda =file.getSelectedFile();

                if(guarda !=null)
                {
                     nombre=file.getSelectedFile().getName();
                    //guardamos el archivo y le damos el formato directamente,
                    // si queremos que se guarde en formato doc lo definimos como .doc

                     FileOutputStream elFichero = new FileOutputStream(guarda+".xls");
                     libro.write(elFichero);
                     elFichero.close();


                     JOptionPane.showMessageDialog(null,
                     "El archivo ANEXO DETALLE se a guardado Exitosamente",
                     "Información",JOptionPane.INFORMATION_MESSAGE);
                }
             }
             catch(IOException ex)
             {
                      JOptionPane.showMessageDialog(null,
                      "Su archivo ANEXO DETALLE no se ha guardado",
                      "Advertencia",JOptionPane.WARNING_MESSAGE);
             }

            // Se salva el libro.
            try {

            } catch (Exception e) {
                e.printStackTrace();
            }
       
   }
           
   } 
    // ----------------------------------------------------------------------------------------------------------------------------------------------
   public void insertarCliente() {
       
       String sqlStr="", sFech1="";
       int estadoInsert;
       int id_cliente=0 ;
       
       sFech1 = jTextField55.getText(); sFech1.trim();     
       sFech1 = dateToMySQLDate(sFech1);       
       
       saepDao misaepDaoCli = new saepDao();
       
       int resp=JOptionPane.showConfirmDialog(null,"¿Quieres insertar un NUEVO CLIENTE?");
       
       if (JOptionPane.OK_OPTION == resp){  
        
                    sqlStr  ="INSERT INTO t_clientes (nombre,alias,fecha_alta)" ;
                    sqlStr +=" VALUES (" ;
                    
                    sqlStr += "'"+jTextField53.getText()+"',";                     // nombre
                    sqlStr += "'"+jTextField54.getText()+"',";                     // alias
                    sqlStr += "'"+sFech1+"')";                                     // fecha
                   
                    System.out.println(sqlStr);
                    estadoInsert= misaepDaoCli.registrarFila(sqlStr);
                    
                    // ........................................................................
                    
                     sqlStr = "SELECT idT_Clientes FROM t_clientes ORDER BY idT_Clientes DESC LIMIT 1 ";
                
                     estadoInsert= misaepDaoCli.ultimoIdentificador(sqlStr);
                
                     id_cliente               = misaepDaoCli.id ;
                    
                    
                    // ........................................................................
                    
                    sqlStr  ="INSERT INTO t_datos_puntos_suministro (id_cliente)" ;
                    sqlStr +=" VALUES (" ;
                    
                    sqlStr += "'"+id_cliente+"'";                     // id 
                    sqlStr += ")";                                    // 
                   
                    System.out.println(sqlStr);
                    estadoInsert= misaepDaoCli.registrarFila(sqlStr);
                    
                    
       }
       
   }
   // ----------------------------------------------------------------------------------------------------------------------------------------------
   
   public void  insertarNuevoPuntoSuministro() {
       
       String sqlStr="", sFech1="",sFech2="",sFech3="",sFech4="",sFech5="";
       int estadoInsert,id_punto=0, dias=0;
       int ind = 0,id_tarifa=0,fBateriaC=0,fMedida=0,fCT=0;
       int iTmp =0 ;
        
       saepDao misaepDaoCli = new saepDao();
       
       int resp=JOptionPane.showConfirmDialog(null,"¿Quieres insertar un NUEVO PUNTO DE SUMINISTRO?");
       
       if (JOptionPane.OK_OPTION == resp){  
           
                    iTmp                = listaClientesAdmin.getSelectedIndex(); 
                    if (iTmp>0)     ind = Integer.parseInt(this.clientes[iTmp-1][0]);          // id_cliente
                    
                    
                    id_tarifa           = listaTarifaActual.getSelectedIndex();                            // id_tarifa actual
                    fMedida             = tipoMedida1.getSelectedIndex(); 
                    fCT                 = tipoSuministro1.getSelectedIndex(); 
                    
                    if (jCheckBox2.isSelected()) { fBateriaC = 1 ;} else { fBateriaC = 0 ; }        // Bateria de condensadores
        
                    // .............................................................................
                    sqlStr  ="INSERT INTO t_datos_puntos_suministro (id_cliente,nombre,cups,cif,id_tarifa_actual,codpostal,localidad,provincia,direccion,bloque,notas," ;
                    sqlStr +="fBateriaC,TrfP,TrfS,TrfMax,fMedida,fCT) VALUES (" ;
                    
                    sqlStr += ind+",";                                                // id_cliente
                    sqlStr += "'"+jTextField48.getText()+"',";                        // nombre
                    sqlStr += "'"+jTextField49.getText()+"',";                        // cups
                    sqlStr += "'"+jTextField50.getText()+"',";                        // cif
                    sqlStr += id_tarifa+",";                                          // id_tarifa
                    sqlStr += "'"+jTextField51.getText()+"',";                        // codpostal
                    sqlStr += "'"+jTextField90.getText()+"',";                        // localidad
                    sqlStr += "'"+jTextField91.getText()+"',";                        // provincia
                    sqlStr += "'"+jTextField52.getText()+"',";                        // direccion
                    sqlStr += "'"+jTextField92.getText()+"',";                        // bloque
                    sqlStr += "'"+jTextArea4.getText()+"',";                          // notas
                    sqlStr += fBateriaC+",";                                          // fBateriaC
                    sqlStr += jTextField86.getText()+",";                             // TrfP
                    sqlStr += jTextField87.getText()+",";                             // TrfS  
                    sqlStr += jTextField88.getText()+",";                             // TrfMax
                    sqlStr += fMedida+",";                                            // fMedida  
                    sqlStr += fCT+")";                                                // fCT
                    
                    System.out.println(sqlStr);
                    estadoInsert= misaepDaoCli.registrarFila(sqlStr);
                    // ..............................................................................
                   
                    sqlStr = "SELECT idd FROM t_datos_puntos_suministro WHERE id_cliente = "+ind+" ORDER BY idd desc LIMIT 1 ";
                   
                    estadoInsert        = misaepDaoCli.ultimoIdentificador(sqlStr);
                    id_punto            = misaepDaoCli.id ;
                 
                     // .............................................................................
                    
                    dias    = Integer.valueOf(jTextField98.getText());
                    
                    sFech1 = jTextField99.getText(); sFech1.trim();
                    
                    if (!sFech1.equals("")) {
                    
                        sFech1 = dateToMySQLDate(sFech1);   

                        sFech2 = jTextField100.getText(); sFech2.trim();
                        sFech2 = dateToMySQLDate(sFech2);   

                        sFech3 = jTextField101.getText(); sFech3.trim();
                        sFech3 = dateToMySQLDate(sFech3); 

                        sFech4 = jTextField102.getText(); sFech4.trim();
                        sFech4 = dateToMySQLDate(sFech4); 

                        sFech5 = jTextField103.getText(); sFech5.trim();
                        sFech5 = dateToMySQLDate(sFech5); 

                        // .............................................................................

                        sqlStr  ="INSERT INTO t_alertas_servicios (id_cliente,id_punto,fecha_venc_servicio,fecha_cambio_comercializadora,fecha_cambio_potencia," ;
                        sqlStr +="fecha_cambio_comerc_gas,fecha_instala_bateria,fActiva,fEnviada,fValidada) VALUES (" ;

                        sqlStr += ind+",";                                               // id_cliente
                        sqlStr += id_punto+",";                                          // id_punto
                        sqlStr += "'"+sFech1+"',";                                       // fecha_venc_servicio
                        sqlStr += "'"+sFech2+"',";                                       // fecha_cambio_comercializadora
                        sqlStr += "'"+sFech3+"',";                                       // fecha_cambio_potencia
                        sqlStr += "'"+sFech4+"',";                                       // fecha_cambio_comerc_gas
                        sqlStr += "'"+sFech5+"',";                                       // fecha_instala_bateria
                        sqlStr += "0,";                                                  // fActiva
                        sqlStr += "0,";                                                  // fEnviada
                        sqlStr += "0)";                                                  // fValidada  

                        System.out.println(sqlStr);
                    //    estadoInsert= misaepDaoCli.registrarFila(sqlStr);
                        
                        
                     /*  sqlStr  ="DELETE t_datos_puntos_suministro WHERE id_cliente="+ind+" AND CUPS LIKE ''";
                      
                   
                        System.out.println(sqlStr);
                        estadoInsert= misaepDaoCli.registrarFila(sqlStr); */
                        
                    }
       }
       
   }
    // ----------------------------------------------------------------------------------------------------------------------------------------------
   public void actualizarListaClientesAdministracion(){
       
        DefaultTableModel model5;
	model5 = new DefaultTableModel();                   // definimos el objeto tableModel
               
		miTabla05 = new JTable();                // creamos la instancia de la tabla
		miTabla05.setModel(model5);
                 
                model5.addColumn("ID CLIENTE");  
                model5.addColumn("ALIAS"); 
                model5.addColumn("NOMBRE"); 
                model5.addColumn("FECHA ALTA");  
                model5.addColumn("PUNTOS DE SUMINISTRO"); 
               
              
                //Nueva instancia de la clase que contiene el formato
                FormatoTablaPuntos formato = new FormatoTablaPuntos();
                          
             	
                TableColumn columna1 = miTabla05.getColumn("ID CLIENTE");
                TableColumn columna2 = miTabla05.getColumn("ALIAS");
                TableColumn columna3 = miTabla05.getColumn("NOMBRE");
                TableColumn columna4 = miTabla05.getColumn("FECHA ALTA");
                TableColumn columna5 = miTabla05.getColumn("PUNTOS DE SUMINISTRO");
              
                
                columna1.setMinWidth(30);
                columna2.setMinWidth(120);
                columna3.setMinWidth(220);
                columna4.setMinWidth(40);
                columna5.setMinWidth(20);
                
                // ............................................................
                
                 Object[] fila = new Object[5];
                
                for (int j=0; j<this.nClientes; j++) {
                    for (int i = 0; i < 5; i++) 
                        fila[i] = this.clientes[j][i];                           // es para cargar los datos en filas a la tabla modelo
                       // fila[4] = 0 ;
                        model5.addRow(fila);
                }
                // ............................................................
                 miBarra05.setViewportView(miTabla05);
                 
                 jTextField105.setText(Integer.toString(this.nClientes));
                 
   }
 // ------------------------------------------------------------------------------------------------------------------------
 private void actualizarTablaAlertasServicio() {
     
               
                DefaultTableModel model2;
		model2 = new DefaultTableModel();        // definimos el objeto tableModel
               
		miTabla12 = new JTable();                // creamos la instancia de la tabla
		miTabla12.setModel(model2);
                
                model2.addColumn("id"); 
                model2.addColumn("id Punto"); 
                model2.addColumn("Cliente"); 
                model2.addColumn("Nombre"); 
                model2.addColumn("CUPS"); 
                model2.addColumn("Tarifa Actual"); 
                model2.addColumn("FV. Servicio"); 
                model2.addColumn("FV. Cont. Luz");
                model2.addColumn("FV. Cmb. Pot.");
                model2.addColumn("FV. Cont. Gas"); 
                model2.addColumn("FV. Bat. Cond"); 
                model2.addColumn("Estado");
              
                
                miTabla12.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
		miTabla12.getTableHeader().setReorderingAllowed(false);
                
                //Nueva instancia de la clase que contiene el formato
                FormatoTablaPuntos formato = new FormatoTablaPuntos();
                          
                //Se obtiene la tabla y se establece el formato para cada tipo de dato
                
                miTabla12.setDefaultRenderer(Double.class, formato); 
                miTabla12.setDefaultRenderer(String.class, formato); 
                miTabla12.setDefaultRenderer(Integer.class, formato);
                miTabla12.setDefaultRenderer(Object.class, formato);
		
                TableColumn columna2 = miTabla12.getColumn("Cliente");
                TableColumn columna3 = miTabla12.getColumn("Nombre");
                TableColumn columna4 = miTabla12.getColumn("CUPS");
                TableColumn columna5 = miTabla12.getColumn("Tarifa Actual");
                TableColumn columna6 = miTabla12.getColumn("FV. Servicio");
                TableColumn columna7 = miTabla12.getColumn("FV. Cont. Luz");
                TableColumn columna8 = miTabla12.getColumn("FV. Cmb. Pot.");
                TableColumn columna9 = miTabla12.getColumn("FV. Cont. Gas");
                TableColumn columna10= miTabla12.getColumn("FV. Bat. Cond");
                
                columna2.setMinWidth(200);
                columna3.setMinWidth(200);
                columna4.setMinWidth(170);
                columna5.setMinWidth(100);
                columna6.setMinWidth(100);
                columna7.setMinWidth(100);
                columna8.setMinWidth(100);
                columna9.setMinWidth(100);
                columna10.setMinWidth(100);
               saepDao misaepDao12 = new saepDao();
                
                
		misaepDao12.consultaListaAlertasClientes(model2);
                this.nPuntosAlertaFinServicio = misaepDao12.nPuntosAlertaFinServicio ;
                jTextField125.setText(String.valueOf(this.nPuntosAlertaFinServicio));
                
                miBarra12.setViewportView(miTabla12);
                
             
             
                
 }    
 // ------------------------------------------------------------------------------------------------------------------------
   public double redondear( double numero, int decimales ) {
    return Math.round(numero*Math.pow(10,decimales))/Math.pow(10,decimales);
  }
     // ------------------------------------------------------------------------------------------------------------
     // ------------------------------------------------------------------------------------------------------------
     // ------------------------------------------------------------------------------------------------------------

public void leerArchivoExel() throws IOException {
         
        
        File abre=abrirArchivo();
        JOptionPane.showMessageDialog(null,
                "\nEl nombre del archivo es:"+abre,
                "AVISO",JOptionPane.WARNING_MESSAGE);
        
                this.nombre = abre ;
	        // An excel file name. You can create a file name with a full
	        // path information.
	        //
	 //       String filename = "test.xls";
                String filename = this.nombre.getAbsolutePath();
	        //
	        // Create an ArrayList to store the data read from excel sheet.
	        //
	        List sheetData = new ArrayList();
	        FileInputStream fis = null;
	        try {
	            //
	            // Create a FileInputStream that will be use to read the
	            // excel file.
	            //
	            fis = new FileInputStream(filename);
	            //
	            // Create an excel workbook from the file system.
	            //
	            HSSFWorkbook workbook = new HSSFWorkbook(fis);
	            //
	            // Get the first sheet on the workbook.
	            //
	            HSSFSheet sheet = workbook.getSheetAt(0);
	            //
	            // When we have a sheet object in hand we can iterator on
	            // each sheet's rows and on each row's cells. We store the
	            // data read on an ArrayList so that we can printed the
	            // content of the excel to the console.
	            //
	            Iterator rows = sheet.rowIterator();
	            while (rows.hasNext()) {
	                HSSFRow row = (HSSFRow) rows.next();
	                 
	                Iterator cells = row.cellIterator();
	                List data = new ArrayList();
	                while (cells.hasNext()) {
	                    HSSFCell cell = (HSSFCell) cells.next();
	                //  System.out.println("Añadiendo Celda: " + cell.toString());
	                    data.add(cell);
	                }
	                sheetData.add(data);
	            }
	        } catch (IOException e) {
	            e.printStackTrace();
	        } finally {
	            if (fis != null) {
	                fis.close();
	            }
	        }
                showExelData(sheetData);
                procesaDatosEntrada(sheetData);
                
	    }
// ------------------------------------------------------------------------------------------------------------	 
    public void showExelData(List sheetData) {
	        //
	        // Iterates the data and print it out to the console.
	        //
                
	        for (int i = 0; i < sheetData.size(); i++) {
	            List list = (List) sheetData.get(i);
	            for (int j = 0; j < list.size(); j++) {
	                Cell cell = (Cell) list.get(j);
	                if (cell.getCellType() == Cell.CELL_TYPE_NUMERIC) {
	                    System.out.print(cell.getNumericCellValue());
	                } else if (cell.getCellType() == Cell.CELL_TYPE_STRING) {
	                    System.out.print(cell.getRichStringCellValue());
	                } else if (cell.getCellType() == Cell.CELL_TYPE_BOOLEAN) {
	                    System.out.print(cell.getBooleanCellValue());
	                }
	                if (j < list.size() - 1) {
	                    System.out.print(", ");
	                }
	            }
	            System.out.println("");
	        }
  }
    
   // ------------------------------------------------------------------------------------------------------------ 
    private File abrirArchivo() {
        JFileChooser fileChooser = new JFileChooser();
        
        fileChooser.showOpenDialog(this);
        File abre=fileChooser.getSelectedFile();
        JOptionPane.showMessageDialog(null,
                "\nEl nombre del archivo es:"+abre,
                "AVISO",JOptionPane.WARNING_MESSAGE);
	return abre;
}
    // -------------------------------------------------------------------------------------------------------------
    
         public void procesaDatosEntrada(List sheetData) {
	        //
	        // Iterates the data and print it out to the console.
	        //
                int cnt=0;
                SimpleDateFormat formatDateJava = new SimpleDateFormat("dd-MM-yyyy");
              
                HSSFRichTextString richTextString ;
                // ...........................................................................................
	        for (int i = 0; i < sheetData.size(); i++) {
                    
	            List list = (List) sheetData.get(i);
                    System.out.println(i+ " -> Tenemos Exel con "+list.size()+" columnas");
                    
                   
                    // ...........................................................................................
                    if (cnt == 0) {                                             // CARGAMOS LOS NOMBRES DE LOS CAMPOS
                          
                        for (int j = 0; j < list.size(); j++) {

                            Cell cell = (Cell) list.get(j);
                              // ............................................................
                             System.out.println("Tipo  Nombre ="+cell.getCellType());
                            if (cell.getCellType() == Cell.CELL_TYPE_STRING) {
                            
                            richTextString = (HSSFRichTextString) cell.getRichStringCellValue();

                            this.nombres[j] =  richTextString.getString();      System.out.println("Cargando Nombre ="+this.nombres[j]);
                            }
                        }
                        this.nColumnas = list.size() ;                              System.out.println("Numero de campos="+this.nColumnas);
                   
                    }
                     // ...........................................................................................
                    if (cnt == 1) {                                             // CARGAMOS LOS TIPOS DE LOS CAMPOS
                          
                        for (int j = 0; j < list.size(); j++) {

                            Cell cell = (Cell) list.get(j);
                            
                            if (cell.getCellType() == Cell.CELL_TYPE_STRING) {
                            
                            richTextString = (HSSFRichTextString) cell.getRichStringCellValue();

                            this.tipos[j] =  richTextString.getString();      
                            }
                            if (cell.getCellType() == Cell.CELL_TYPE_NUMERIC) {

                                 this.tipos[j] = Double.toString(cell.getNumericCellValue());      System.out.println("Cargo this.tipos["+j+"] = "+this.tipos[j]);                      

                            }
                            
                        }
                        
                    }
                   // ...........................................................................................
                   if (cnt > 1) {                                             // CARGAMOS LOS DATOS
                       
                        for (int j = 0; j < list.size(); j++) {

                            Cell cell = (Cell) list.get(j);
                            
                                                   
                            this.tablaDatos[cnt-2][j] = "";
                            // ............................................................                                           
                            if (this.tipos[j].equals("4.0")) {                                                       // es un tipo fecha
                                SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
                                this.tablaDatos[cnt-2][j] = String.valueOf(sdf.format(cell.getDateCellValue()));
                                      
                            
                            } else {
                            // ............................................................
                            if (cell.getCellType() == Cell.CELL_TYPE_NUMERIC) {

                                this.tablaDatos[cnt-2][j] = Double.toString(cell.getNumericCellValue());                            

                            } else if (cell.getCellType() == Cell.CELL_TYPE_STRING) {
                            // ............................................................
                               richTextString = (HSSFRichTextString) cell.getRichStringCellValue();

                       
                                this.tablaDatos[cnt-2][j] =  richTextString.getString();                                                        

                            } else if (cell.getCellType() == Cell.CELL_TYPE_BOOLEAN) {
                            // ............................................................

                                 this.tablaDatos[cnt-2][j] = Boolean.toString(cell.getBooleanCellValue());

                            } else if (cell.getCellType() == Cell.CELL_TYPE_BLANK) {
                            // ............................................................
                                this.tablaDatos[cnt-2][j] = "";

                            }
                            }
                            
                    }
                    // ...........................................................................................
                        
                   } 
                        cnt ++;
	        }
                                  
	       
                 // ...........................................................................................
                this.nDatos = cnt;
                System.out.println("----------- HE CARGADO "+this.nDatos+" REGISTROS ------------");       
                this.sLogTxt +="----------- HE CARGADO "+this.nDatos+" REGISTROS  ------------"+"\n" ;
                logAcciones.setText(this.sLogTxt);   
                JOptionPane.showMessageDialog(null,
                "\nHE CARGADO:"+this.nDatos+" REGISTROS",
                "INFORMACIÓN",JOptionPane.WARNING_MESSAGE);
  }
   
// -------------------------------------------------------------------------------------------------------------
        
   private void mostrarDatosEnTabla() {
		int i,j;
                String str = "";
                System.out.println("----COMIENZO EL FORMATEO CERTIFICACIONES---");
                 this.sLogTxt +="----COMIENZO EL FORMATEO CERTIFICACIONES---"+"\n" ;
                logAcciones.setText(this.sLogTxt);  
                DefaultTableModel model;
		model = new DefaultTableModel();        // definimos el objeto tableModel
               
		miTabla2e = new JTable();                // creamos la instancia de la tabla
		miTabla2e.setModel(model);
                
                 
                for (i=0; i<this.nColumnas; i++) {
                    System.out.println("Proceso columna:"+i);
                    str = this.nombres[i] ; str = str.trim() ; str = str.toUpperCase();
                    model.addColumn(str);
                }
		
                
		miTabla2e.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
		miTabla2e.getTableHeader().setReorderingAllowed(false);

		Object[] fila = new Object[33];
                // para llenar cada columna con lo datos almacenados
		for ( i = 0; i < this.nDatos; i++) {
                    for (j=0; j<this.nColumnas; j++){
			fila[j] = this.tablaDatos[i][j];          // es para cargar los datos en filas a la tabla modelo
                    }    
                    model.addRow(fila);
                }  
                
               
                System.out.println("----HE DEFINIDO FORMATO Y PASO A ASIGNAR---");
             
                this.sLogTxt +="----HE DEFINIDO FORMATO Y PASO A ASIGNAR---"+"\n";
                logAcciones.setText(this.sLogTxt);  
		miBarra2.setViewportView(miTabla2e);
                
                str = Integer.toString(this.nDatos);
                jTextField127.setText(str);                           // proponemos numero de filas
                
                str = Integer.toString(this.nColumnas);
                jTextField128.setText(str);                           // proponemos numero de columnas

	}
      // --------------------------------------------------------------------------------------------------------------
         
      private void insertarDatosEnTabla2() {
          
                   Runnable r = new t(this.nombres,this.tablaDatos,this.plogin,this.ppassword,this.bdStr,this.urlStr);
                  
                   new Thread(r).start();  
                   
        
                
         
} 
         // --------------------------------------------------------------------------------------------------------------------------------
         private void insertarDatosEnTabla() {
          
          String sqlStr=""  ;
          String str ;
          int i,j,k,cnt=0 ;
          int estadoInsert = 0 ;
          
          
           TablasDao miTablaDao = new TablasDao();
                         
           Conexion conex = new Conexion(); 
           // .....................................................................................................................
           if (conex!=null){
               
                final Thread t;
                 //Inicializamos
              
                  
                    // .......................................................................
                    for (k=0; k<this.nDatos-2; k++) {

                        
                        
                          sqlStr = "INSERT INTO ";

                          str = tabla.getText(); str = str.trim() ;

                          sqlStr = sqlStr + str +" (" ;


                          for (i=0; i<this.nColumnas-1; i++) {

                              sqlStr = sqlStr+this.nombres[i].trim()+",";

                          }
                          sqlStr = sqlStr+this.nombres[i].trim()+") ";

                          sqlStr = sqlStr+" VALUES (";

                          for ( i=0; i<this.nColumnas-1; i++) {

                              str = this.tablaDatos[k][i] ; str = str.trim() ;
                              sqlStr = sqlStr  + "'"+ str + "', " ;

                          }

                          str = this.tablaDatos[k][i] ; str = str.trim() ;
                          sqlStr = sqlStr + "'"+ str + "') " ;

                          System.out.println(k+"sqlStr = "+sqlStr);
                          
                        
                          
                          estadoInsert = miTablaDao.registrarFila(conex,this.plogin,this.ppassword,this.bdStr,this.urlStr,sqlStr);
                          
                          this.sLogTxt +=k+"sqlStr = "+sqlStr+"\n";
                          logAcciones.setText(this.sLogTxt);                           
                          System.out.println("Registro insertado ");


                  }  
                  // .....................................................................................................................   
                   conex.desconectar(); 
                  // .....................................................................................................................   
                    
         } else  {
                  JOptionPane.showMessageDialog(null,
		  "Debes introducir login y password",
		  "Advertencia",JOptionPane.WARNING_MESSAGE);
           
        }
                
         
} 
       // --------------------------------------------------------------------------------------------------------------
        private void actualizarDatosEnTablasSimulacion(int indice) {
            
                this.indSim = indice;
            
                System.out.println("--- Actualizar tablas Simulacion"+this.indSim );
                // .....................................................
            
              //  DefaultTableModel model3,model4,model5,model6;
		this.model3 = new DefaultTableModel();        // definimos el objeto tableModel
               
		miTabla13 = new JTable();                // creamos la instancia de la tabla
		miTabla13.setModel(this.model3);
                
                this.model3.addColumn("DATOS"); 
                this.model3.addColumn("VALOR"); 
                
                miTabla13.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
		miTabla13.getTableHeader().setReorderingAllowed(false);
                
                //Nueva instancia de la clase que contiene el formato
          //      FormatoTablaPuntos formato = new FormatoTablaPuntos();
                          
                //Se obtiene la tabla y se establece el formato para cada tipo de dato
                
              
		
                TableColumn columna2 = miTabla13.getColumn("DATOS");
                TableColumn columna3 = miTabla13.getColumn("VALOR");
               
                
                columna2.setMinWidth(220);
                columna3.setMinWidth(150);
               
                miBarra13.setViewportView(miTabla13);
            
                // .....................................................
                              
		this.model4 = new DefaultTableModel();        // definimos el objeto tableModel
                this.model5 = new DefaultTableModel();        // definimos el objeto tableModel
                this.model6 = new DefaultTableModel();        // definimos el objeto tableModel
               
		miTabla14 = new JTable();                // creamos la instancia de la tabla OMIE
		miTabla14.setModel(this.model4);
                
                miTabla16 = new JTable();                // creamos la instancia de la tabla POTENCIA
		miTabla16.setModel(this.model5);
                
                miTabla15 = new JTable();                // creamos la instancia de la tabla ENERGIA
		miTabla15.setModel(this.model6);
                
                this.model4.addColumn("DIA"); this.model5.addColumn("DIA"); this.model6.addColumn("FECHA"); 
                this.model4.addColumn("H01"); this.model5.addColumn("H01"); this.model6.addColumn("POTENCIA");
                this.model4.addColumn("H02"); this.model5.addColumn("H02"); this.model6.addColumn("TIPO DIA");
                this.model4.addColumn("H03"); this.model5.addColumn("H03"); this.model6.addColumn("SOBREPASA kW");
                this.model4.addColumn("H04"); this.model5.addColumn("H04"); 
                this.model4.addColumn("H05"); this.model5.addColumn("H05"); 
                this.model4.addColumn("H06"); this.model5.addColumn("H06"); 
                this.model4.addColumn("H07"); this.model5.addColumn("H07");
                this.model4.addColumn("H08"); this.model5.addColumn("H08"); 
                this.model4.addColumn("H09"); this.model5.addColumn("H09"); 
                this.model4.addColumn("H10"); this.model5.addColumn("H10"); 
                this.model4.addColumn("H11"); this.model5.addColumn("H11"); 
                this.model4.addColumn("H12"); this.model5.addColumn("H12"); 
                this.model4.addColumn("H13"); this.model5.addColumn("H13"); 
                this.model4.addColumn("H14"); this.model5.addColumn("H14");
                this.model4.addColumn("H15"); this.model5.addColumn("H15"); 
                this.model4.addColumn("H16"); this.model5.addColumn("H16"); 
                this.model4.addColumn("H17"); this.model5.addColumn("H17"); 
                this.model4.addColumn("H18"); this.model5.addColumn("H18"); 
                this.model4.addColumn("H19"); this.model5.addColumn("H19"); 
                this.model4.addColumn("H20"); this.model5.addColumn("H20"); 
                this.model4.addColumn("H21"); this.model5.addColumn("H21"); 
                this.model4.addColumn("H22"); this.model5.addColumn("H22");
                this.model4.addColumn("H23"); this.model5.addColumn("H23"); 
                this.model4.addColumn("H24"); this.model5.addColumn("H24"); 
                
                
                miTabla14.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
		miTabla14.getTableHeader().setReorderingAllowed(false);
                
                miTabla16.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
		miTabla16.getTableHeader().setReorderingAllowed(false);
                
                miTabla15.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
		miTabla15.getTableHeader().setReorderingAllowed(false);
                
                //Nueva instancia de la clase que contiene el formato
            //    FormatoTablaPuntos formato2 = new FormatoTablaPuntos();
                          
                //Se obtiene la tabla y se establece el formato para cada tipo de dato
                
             	
                TableColumn dcolumna2 = miTabla14.getColumn("DIA"); TableColumn dcolumna210 = miTabla16.getColumn("DIA"); TableColumn dcolumna220 = miTabla15.getColumn("FECHA");
                TableColumn dcolumna3 = miTabla14.getColumn("H01"); TableColumn dcolumna31 = miTabla16.getColumn("H01");  TableColumn dcolumna32 = miTabla15.getColumn("POTENCIA");
                TableColumn dcolumna4 = miTabla14.getColumn("H02"); TableColumn dcolumna41 = miTabla16.getColumn("H02");  TableColumn dcolumna42 = miTabla15.getColumn("TIPO DIA");
                TableColumn dcolumna5 = miTabla14.getColumn("H03"); TableColumn dcolumna51 = miTabla16.getColumn("H03");  TableColumn dcolumna52 = miTabla15.getColumn("SOBREPASA kW");
                TableColumn dcolumna6 = miTabla14.getColumn("H04"); TableColumn dcolumna61 = miTabla16.getColumn("H04"); 
                TableColumn dcolumna7 = miTabla14.getColumn("H05"); TableColumn dcolumna71 = miTabla16.getColumn("H05"); 
                TableColumn dcolumna8 = miTabla14.getColumn("H06"); TableColumn dcolumna81 = miTabla16.getColumn("H06"); 
                TableColumn dcolumna9 = miTabla14.getColumn("H07"); TableColumn dcolumna91 = miTabla16.getColumn("H07"); 
                TableColumn dcolumna10 = miTabla14.getColumn("H08"); TableColumn dcolumna101 = miTabla16.getColumn("H08"); 
                TableColumn dcolumna11 = miTabla14.getColumn("H09"); TableColumn dcolumna111 = miTabla16.getColumn("H09"); 
                TableColumn dcolumna12 = miTabla14.getColumn("H10"); TableColumn dcolumna121 = miTabla16.getColumn("H10"); 
                TableColumn dcolumna13 = miTabla14.getColumn("H11"); TableColumn dcolumna131 = miTabla16.getColumn("H11");
                TableColumn dcolumna14 = miTabla14.getColumn("H12"); TableColumn dcolumna141 = miTabla16.getColumn("H12"); 
                TableColumn dcolumna15 = miTabla14.getColumn("H13"); TableColumn dcolumna151 = miTabla16.getColumn("H13"); 
                TableColumn dcolumna16 = miTabla14.getColumn("H14"); TableColumn dcolumna161 = miTabla16.getColumn("H14"); 
                TableColumn dcolumna17 = miTabla14.getColumn("H15"); TableColumn dcolumna171 = miTabla16.getColumn("H15"); 
                TableColumn dcolumna18 = miTabla14.getColumn("H16"); TableColumn dcolumna181 = miTabla16.getColumn("H16"); 
                TableColumn dcolumna19 = miTabla14.getColumn("H17"); TableColumn dcolumna191 = miTabla16.getColumn("H17"); 
                TableColumn dcolumna20 = miTabla14.getColumn("H18"); TableColumn dcolumna201 = miTabla16.getColumn("H18"); 
                TableColumn dcolumna21 = miTabla14.getColumn("H19"); TableColumn dcolumna211 = miTabla16.getColumn("H19"); 
                TableColumn dcolumna22 = miTabla14.getColumn("H20"); TableColumn dcolumna221 = miTabla16.getColumn("H20"); 
                TableColumn dcolumna23 = miTabla14.getColumn("H21"); TableColumn dcolumna231 = miTabla16.getColumn("H21"); 
                TableColumn dcolumna24 = miTabla14.getColumn("H22"); TableColumn dcolumna241 = miTabla16.getColumn("H22"); 
                TableColumn dcolumna25 = miTabla14.getColumn("H23"); TableColumn dcolumna251 = miTabla16.getColumn("H23"); 
                TableColumn dcolumna26 = miTabla14.getColumn("H24"); TableColumn dcolumna261 = miTabla16.getColumn("H24"); 
                
                dcolumna2.setMinWidth(50); dcolumna210.setMinWidth(50);dcolumna220.setMinWidth(100);
                dcolumna3.setMinWidth(12);dcolumna31.setMinWidth(20);dcolumna32.setMinWidth(30);
                dcolumna4.setMinWidth(12);dcolumna41.setMinWidth(20);dcolumna42.setMinWidth(10);
                dcolumna5.setMinWidth(12);dcolumna51.setMinWidth(20);dcolumna52.setMinWidth(30);
                dcolumna6.setMinWidth(12);dcolumna61.setMinWidth(20);
                dcolumna7.setMinWidth(12);dcolumna71.setMinWidth(20);
                dcolumna8.setMinWidth(12);dcolumna81.setMinWidth(20);
                dcolumna9.setMinWidth(12);dcolumna91.setMinWidth(20);
                dcolumna10.setMinWidth(12);dcolumna101.setMinWidth(20);
                dcolumna11.setMinWidth(12);dcolumna111.setMinWidth(20);
                dcolumna12.setMinWidth(12);dcolumna121.setMinWidth(20);
                dcolumna13.setMinWidth(12);dcolumna131.setMinWidth(20);
                dcolumna14.setMinWidth(12);dcolumna141.setMinWidth(20);
                dcolumna15.setMinWidth(12);dcolumna151.setMinWidth(20);
                dcolumna16.setMinWidth(12);dcolumna161.setMinWidth(20);
                dcolumna17.setMinWidth(12);dcolumna171.setMinWidth(20);
                dcolumna18.setMinWidth(12);dcolumna181.setMinWidth(20);
                dcolumna19.setMinWidth(12);dcolumna191.setMinWidth(20);
                dcolumna20.setMinWidth(12);dcolumna201.setMinWidth(20);
                dcolumna21.setMinWidth(12);dcolumna211.setMinWidth(20);
                dcolumna22.setMinWidth(12); dcolumna221.setMinWidth(20);
                dcolumna23.setMinWidth(12);dcolumna231.setMinWidth(20);
                dcolumna24.setMinWidth(12);dcolumna241.setMinWidth(20);
                dcolumna25.setMinWidth(12);dcolumna251.setMinWidth(20);
               
                   //Nueva instancia de la clase que contiene el formato
                FormatoTablaPotencias formato = new FormatoTablaPotencias();
                /*
                miTabla13.setDefaultRenderer(Double.class, formato); 
                miTabla13.setDefaultRenderer(String.class, formato); 
                miTabla13.setDefaultRenderer(Integer.class, formato);
                miTabla13.setDefaultRenderer(Object.class, formato);
               
                miTabla14.setDefaultRenderer(Double.class, formato);  miTabla16.setDefaultRenderer(Double.class, formato);  miTabla15.setDefaultRenderer(Double.class, formato); 
                miTabla14.setDefaultRenderer(String.class, formato);  miTabla16.setDefaultRenderer(String.class, formato); miTabla15.setDefaultRenderer(String.class, formato);
                miTabla14.setDefaultRenderer(Integer.class, formato); miTabla16.setDefaultRenderer(Integer.class, formato); miTabla15.setDefaultRenderer(Integer.class, formato);
                miTabla14.setDefaultRenderer(Object.class, formato);  miTabla16.setDefaultRenderer(Object.class, formato); miTabla15.setDefaultRenderer(Object.class, formato);
                */
                miTabla15.setDefaultRenderer(Double.class, formato); 
                miTabla15.setDefaultRenderer(String.class, formato); 
                miTabla15.setDefaultRenderer(Integer.class, formato);
                miTabla15.setDefaultRenderer(Object.class, formato);
                
                miBarra14.setViewportView(miTabla14); miBarra15.setViewportView(miTabla16); miBarra16.setViewportView(miTabla15);
                
                
                
                // .....................................................
        }
        // ---------------------------------------------------------------------------------------------------------------------------
        // --------------------------------------------------------------------------------------------------------------
        private void actualizarDatosEnTablaOMIE() {
            
                System.out.println("--- Actualizar tablas OMIE");
                
            
                // .....................................................
                              
		this.model4 = new DefaultTableModel();        // definimos el objeto tableModel
              
               
		miTabla14 = new JTable();                // creamos la instancia de la tabla OMIE
		miTabla14.setModel(this.model4);
                
            
                
                this.model4.addColumn("DIA"); 
                this.model4.addColumn("H01"); 
                this.model4.addColumn("H02"); 
                this.model4.addColumn("H03"); 
                this.model4.addColumn("H04"); 
                this.model4.addColumn("H05"); 
                this.model4.addColumn("H06"); 
                this.model4.addColumn("H07"); 
                this.model4.addColumn("H08"); 
                this.model4.addColumn("H09"); 
                this.model4.addColumn("H10"); 
                this.model4.addColumn("H11"); 
                this.model4.addColumn("H12"); 
                this.model4.addColumn("H13"); 
                this.model4.addColumn("H14"); 
                this.model4.addColumn("H15"); 
                this.model4.addColumn("H16"); 
                this.model4.addColumn("H17");
                this.model4.addColumn("H18"); 
                this.model4.addColumn("H19"); 
                this.model4.addColumn("H20"); 
                this.model4.addColumn("H21"); 
                this.model4.addColumn("H22"); 
                this.model4.addColumn("H23"); 
                this.model4.addColumn("H24"); 
                
                
                miTabla14.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
		miTabla14.getTableHeader().setReorderingAllowed(false);
              
                
             	
                TableColumn dcolumna2 = miTabla14.getColumn("DIA");
                TableColumn dcolumna3 = miTabla14.getColumn("H01"); 
                TableColumn dcolumna4 = miTabla14.getColumn("H02"); 
                TableColumn dcolumna5 = miTabla14.getColumn("H03"); 
                TableColumn dcolumna6 = miTabla14.getColumn("H04"); 
                TableColumn dcolumna7 = miTabla14.getColumn("H05"); 
                TableColumn dcolumna8 = miTabla14.getColumn("H06"); 
                TableColumn dcolumna9 = miTabla14.getColumn("H07"); 
                TableColumn dcolumna10 = miTabla14.getColumn("H08"); 
                TableColumn dcolumna11 = miTabla14.getColumn("H09"); 
                TableColumn dcolumna12 = miTabla14.getColumn("H10"); 
                TableColumn dcolumna13 = miTabla14.getColumn("H11"); 
                TableColumn dcolumna14 = miTabla14.getColumn("H12"); 
                TableColumn dcolumna15 = miTabla14.getColumn("H13"); 
                TableColumn dcolumna16 = miTabla14.getColumn("H14"); 
                TableColumn dcolumna17 = miTabla14.getColumn("H15"); 
                TableColumn dcolumna18 = miTabla14.getColumn("H16"); 
                TableColumn dcolumna19 = miTabla14.getColumn("H17"); 
                TableColumn dcolumna20 = miTabla14.getColumn("H18");  
                TableColumn dcolumna21 = miTabla14.getColumn("H19"); 
                TableColumn dcolumna22 = miTabla14.getColumn("H20"); 
                TableColumn dcolumna23 = miTabla14.getColumn("H21"); 
                TableColumn dcolumna24 = miTabla14.getColumn("H22");  
                TableColumn dcolumna25 = miTabla14.getColumn("H23");
                TableColumn dcolumna26 = miTabla14.getColumn("H24"); 
                
                dcolumna2.setMinWidth(50); 
                dcolumna3.setMinWidth(12);
                dcolumna4.setMinWidth(12);
                dcolumna5.setMinWidth(12);
                dcolumna6.setMinWidth(12);
                dcolumna7.setMinWidth(12);
                dcolumna8.setMinWidth(12);
                dcolumna9.setMinWidth(12);
                dcolumna10.setMinWidth(12);
                dcolumna11.setMinWidth(12);
                dcolumna12.setMinWidth(12);
                dcolumna13.setMinWidth(12);
                dcolumna14.setMinWidth(12);
                dcolumna15.setMinWidth(12);
                dcolumna16.setMinWidth(12);
                dcolumna17.setMinWidth(12);
                dcolumna18.setMinWidth(12);
                dcolumna19.setMinWidth(12);
                dcolumna20.setMinWidth(12);
                dcolumna21.setMinWidth(12);
                dcolumna22.setMinWidth(12); 
                dcolumna23.setMinWidth(12);
                dcolumna24.setMinWidth(12);
                dcolumna25.setMinWidth(12);
               
                             
                miBarra14.setViewportView(miTabla14); 
                
                
                
                // .....................................................
        }
        // ---------------------------------------------------------------------------------------------------------------------------
        public void cargarTablaOmie(int indice) throws SQLException{
            
             int mes = Integer.valueOf(this.tablasOmieFechas[indice][0]);
             int year= Integer.valueOf(this.tablasOmieFechas[indice][1]);
             
             actualizarDatosEnTablaOMIE();
                
              saepDao misaepDao = new saepDao();
                
              misaepDao.consultaTablaPreciosOmie(this.model4,mes,year);         System.out.println("ConsultaDatosOMIE(mes,year)=("+mes+","+year+")");
              
              miBarra14.setViewportView(miTabla14);
             
             
            
        }
         // ---------------------------------------------------------------------------------------------------------------------------
        public void cargarTablaEnergia(int indice) throws SQLException{
            
             int mes        = Integer.valueOf(this.indiceSimulacionesPuntos[indice][4]);
             int year       = Integer.valueOf(this.indiceSimulacionesPuntos[indice][5]);
             int id_punto   = Integer.valueOf(this.indiceSimulacionesPuntos[indice][1]);
             
                
              saepDao misaepDao = new saepDao();
                
              misaepDao.consultaTablaEnergia(this.model5,mes,year,id_punto);         System.out.println("ConsultaDatosEnergia(mes,year)=("+mes+","+year+")");
              
              miBarra15.setViewportView(miTabla16);
             
             
            
        }
         // ---------------------------------------------------------------------------------------------------------------------------
        public void cargarTablaPotencias(int indice) throws SQLException{
            
             int id_cliente = Integer.valueOf(this.indiceSimulacionesPuntos[indice][0]);
             int id_punto   = Integer.valueOf(this.indiceSimulacionesPuntos[indice][1]);
             String desde = this.indiceSimulacionesPuntos[indice][6];
             String hasta = this.indiceSimulacionesPuntos[indice][7];
             
                
              saepDao misaepDao = new saepDao();
                
              misaepDao.consultaTablaPotencia(this.model6,id_cliente,id_punto,desde,hasta);         System.out.println("ConsultaDatosPotencia=("+id_cliente+","+id_punto+")");
              
              miBarra16.setViewportView(miTabla15);
             
             
            
        }
         // ---------------------------------------------------------------------------------------------------------------------------
        public void cargarDatosPuntoSimulacion(int indice) throws SQLException{
             
             int id_tarifa_actual = 0 ;
            
                       
             int id_cliente = Integer.valueOf(this.indiceSimulacionesPuntos[indice][0]);
             int id_punto   = Integer.valueOf(this.indiceSimulacionesPuntos[indice][1]);
             
             String desde = this.indiceSimulacionesPuntos[indice][8];
             String hasta = this.indiceSimulacionesPuntos[indice][9];
             
             System.out.println("ConsultaDatos del punto=("+id_cliente+","+id_punto+")");
                
              saepDao misaepDao = new saepDao();
                
              misaepDao.consultaDatosPuntosSimulacion(this.model3,id_cliente,id_punto);        
              
              miBarra13.setViewportView(miTabla13);
              
              // ............................................
              
              id_tarifa_actual = Integer.valueOf(String.valueOf(miTabla13.getValueAt(5,1))) ;
              
              misaepDao.consultaDatosCondicionesSimulacion(id_cliente,id_punto,id_tarifa_actual);  
             
              this.condicionesContratoSimulacion = misaepDao.condicionesContratoSimulacion;
               // .............................................................................
                      jTextField199.setText("0");
                      jTextField200.setText("0");
                      jTextField201.setText("0");
                      
                      jTextField204.setText("0");
                      jTextField203.setText("0");
                      jTextField202.setText("0");
                      
                      jTextField234.setText("0");
                      jTextField235.setText("0");
                      jTextField236.setText("0");
                      
                      jTextField239.setText("0");
                      jTextField238.setText("0");
                      jTextField237.setText("0");
                      
                      jTextField133.setText("0");
                      jTextField167.setText("0");
                      jTextField168.setText("0");
                      jTextField169.setText("0");
                      jTextField170.setText("0");
                      jTextField171.setText("0");
                      
                      jTextField179.setText("0");
                      jTextField180.setText("0");
                      jTextField181.setText("0");
                      jTextField182.setText("0");
                      jTextField183.setText("0");
                      jTextField184.setText("0");
                      
                      jTextField147.setText("");
                      jTextField148.setText("");
                      
                      jTextField211.setText("");
                      jTextField212.setText("");
                      
                      jTextField161.setText("");
                      jTextField162.setText("");
              
              // .............................................................................
              switch (id_tarifa_actual){
                  
                  case 5:
                      jTextField199.setText(this.condicionesContratoSimulacion[2]);
                      jTextField200.setText(this.condicionesContratoSimulacion[3]);
                      jTextField201.setText(this.condicionesContratoSimulacion[4]);
                      
                      jTextField204.setText(this.condicionesContratoSimulacion[8]);
                      jTextField203.setText(this.condicionesContratoSimulacion[9]);
                      jTextField202.setText(this.condicionesContratoSimulacion[10]);
                      
                      jTextField161.setText(desde);
                      jTextField162.setText(hasta);
                      jTabbedPane10.setSelectedIndex(1);
                      this.jLabel220.setVisible(true);    this.jLabel202.setVisible(false); this.jLabel200.setVisible(false);
                      jComboBox9.setSelectedIndex(1);
                     
                      
                  break;
                  case 6:
                      jTextField234.setText(this.condicionesContratoSimulacion[2]);
                      jTextField235.setText(this.condicionesContratoSimulacion[3]);
                      jTextField236.setText(this.condicionesContratoSimulacion[4]);
                      
                      jTextField239.setText(this.condicionesContratoSimulacion[8]);
                      jTextField238.setText(this.condicionesContratoSimulacion[9]);
                      jTextField237.setText(this.condicionesContratoSimulacion[10]);
                      
                      jTextField211.setText(desde);
                      jTextField212.setText(hasta);
                      jTabbedPane10.setSelectedIndex(2);
                      this.jLabel220.setVisible(false);    this.jLabel202.setVisible(false); this.jLabel200.setVisible(true);
                      jComboBox9.setSelectedIndex(2);
                      
                  break;
                  case 7:
                      jTextField133.setText(this.condicionesContratoSimulacion[2]);
                      jTextField167.setText(this.condicionesContratoSimulacion[3]);
                      jTextField168.setText(this.condicionesContratoSimulacion[4]);
                      jTextField169.setText(this.condicionesContratoSimulacion[5]);
                      jTextField170.setText(this.condicionesContratoSimulacion[6]);
                      jTextField171.setText(this.condicionesContratoSimulacion[7]);
                      
                      jTextField179.setText(this.condicionesContratoSimulacion[8]);
                      jTextField180.setText(this.condicionesContratoSimulacion[9]);
                      jTextField181.setText(this.condicionesContratoSimulacion[10]);
                      jTextField182.setText(this.condicionesContratoSimulacion[11]);
                      jTextField183.setText(this.condicionesContratoSimulacion[12]);
                      jTextField184.setText(this.condicionesContratoSimulacion[13]);
                      
                      jTextField147.setText(desde);
                      jTextField148.setText(hasta);
                      jTabbedPane10.setSelectedIndex(0);
                      this.jLabel220.setVisible(false);  this.jLabel200.setVisible(false); this.jLabel202.setVisible(true);
                      jComboBox9.setSelectedIndex(0);
                      
                  break;
                  case 10:
                      
                      jTextField199.setText(this.condicionesContratoSimulacion[2]);
                      jTextField200.setText(this.condicionesContratoSimulacion[3]);
                      jTextField201.setText(this.condicionesContratoSimulacion[4]);
                      
                      jTextField204.setText(this.condicionesContratoSimulacion[8]);
                      jTextField203.setText(this.condicionesContratoSimulacion[9]);
                      jTextField202.setText(this.condicionesContratoSimulacion[10]);
                      
                      jTextField161.setText(desde);
                      jTextField162.setText(hasta);
                      jTabbedPane10.setSelectedIndex(1);
                      this.jLabel220.setVisible(true);    this.jLabel202.setVisible(false); this.jLabel200.setVisible(false);
                      jComboBox9.setSelectedIndex(1);
                      
                  break;
                  case 13:
                      
                      
                      jTextField234.setText(this.condicionesContratoSimulacion[2]);
                      jTextField235.setText(this.condicionesContratoSimulacion[3]);
                      jTextField236.setText(this.condicionesContratoSimulacion[4]);
                      
                      jTextField239.setText(this.condicionesContratoSimulacion[8]);
                      jTextField238.setText(this.condicionesContratoSimulacion[9]);
                      jTextField237.setText(this.condicionesContratoSimulacion[10]);
                      
                      jTextField211.setText(desde);
                      jTextField212.setText(hasta);
                      jTabbedPane10.setSelectedIndex(2);
                      this.jLabel220.setVisible(false);    this.jLabel202.setVisible(false); this.jLabel200.setVisible(true);
                      jComboBox9.setSelectedIndex(2);
                      
                  break;
                  case 14:
                      jTextField133.setText(this.condicionesContratoSimulacion[2]);
                      jTextField167.setText(this.condicionesContratoSimulacion[3]);
                      jTextField168.setText(this.condicionesContratoSimulacion[4]);
                      jTextField169.setText(this.condicionesContratoSimulacion[5]);
                      jTextField170.setText(this.condicionesContratoSimulacion[6]);
                      jTextField171.setText(this.condicionesContratoSimulacion[7]);
                      
                      jTextField179.setText(this.condicionesContratoSimulacion[8]);
                      jTextField180.setText(this.condicionesContratoSimulacion[9]);
                      jTextField181.setText(this.condicionesContratoSimulacion[10]);
                      jTextField182.setText(this.condicionesContratoSimulacion[11]);
                      jTextField183.setText(this.condicionesContratoSimulacion[12]);
                      jTextField184.setText(this.condicionesContratoSimulacion[13]);
                      
                      jTextField147.setText(desde);
                      jTextField148.setText(hasta);
                      jTabbedPane10.setSelectedIndex(0);
                      this.jLabel220.setVisible(false);  this.jLabel200.setVisible(false); this.jLabel202.setVisible(true);
                      jComboBox9.setSelectedIndex(0);
                    
                  break;
                  
                  
              }
              
              
              
              
            
        }
        // ---------------------------------------------------------------------------------------------------------------------------
        public void recalcularSimulacionFacturaP6() {
            
            int dias=0 ;
            double pEnergia,pPotencia, pTarifaPot,total ;
            String psEnergia,psE1,psE2,psE3,psE4,psE5,psE6;
            String esEnergia,esE1,esE2,esE3,esE4,esE5,esE6;
            String ocsEnergia,ocsE1,ocsE2,ocsE3,ocsE4,ocsE5,ocsE6;
            String psPotencia,psP1,psP2,psP3,psP4,psP5,psP6;
            String PC1,PC2,PC3,PC4,PC5,PC6 ;
            String socsP1,socsP2,socsP3,socsP4,socsP5,socsP6;
            
            String pP1,pP2,pP3,pP4,pP5,pP6 ;
            
            String fDesde="",fHasta="" ;
            String psTarifaPot,psTotal;
            
            String tpP1,tpP2,tpP3,tpP4,tpP5,tpP6 ;
            
            String esP1,esP2,esP3,esP4,esP5,esP6;
            
            int mes, year ;
            
            
            mes = Integer.valueOf(this.indiceSimulacionesPuntos[this.indSim][4]);
            year= Integer.valueOf(this.indiceSimulacionesPuntos[this.indSim][5]);
            
             // .......................................................................
     
            NumberFormat formatoImporte = NumberFormat.getCurrencyInstance();

            formatoImporte = NumberFormat.getCurrencyInstance(new Locale("es","ES"));

            NumberFormat formatoPorcentaje = NumberFormat.getPercentInstance();

            NumberFormat formatoNumero = NumberFormat.getNumberInstance();

            formatoNumero.setMaximumFractionDigits(2);
           
            
            // .......................................................................
            
            miSimulacionFacturas miSimulacion = new miSimulacionFacturas();
            
            // .......................................................................
                    
            ocsE1 = jTextField141.getText();    ocsE1.trim();  miSimulacion.ocsE1 = ocsE1 ;              // Otros costes energía P1  
            ocsE2 = jTextField142.getText();    ocsE2.trim();  miSimulacion.ocsE2 = ocsE2 ;              // Otros costes energía P2 
            ocsE3 = jTextField143.getText();    ocsE3.trim();  miSimulacion.ocsE3 = ocsE3 ;              // Otros costes energía P3  
            ocsE4 = jTextField144.getText();    ocsE4.trim();  miSimulacion.ocsE4 = ocsE4 ;              // Otros costes energía P4  
            ocsE5 = jTextField145.getText();    ocsE5.trim();  miSimulacion.ocsE5 = ocsE5 ;              // Otros costes energía P5  
            ocsE6 = jTextField146.getText();    ocsE6.trim();  miSimulacion.ocsE6 = ocsE6 ;              // Otros costes energía P6  
            
            // .......................................................................
            
             pEnergia = miSimulacion.calcularSubtotalEnergiaP6(this.model4, this.model5, mes, year) ;            // enviamos precios y consumos
           
            
            
            
            
            
            psEnergia = formatoImporte.format(pEnergia); jTextField130.setText(psEnergia);
            esEnergia = formatoNumero.format(miSimulacion.eEnergiaTotal); jTextField178.setText(esEnergia);
            
            psE1 = formatoImporte.format(miSimulacion.pEnergiaSubtotalP6[0]); jTextField149.setText(psE1);
            psE2 = formatoImporte.format(miSimulacion.pEnergiaSubtotalP6[1]); jTextField150.setText(psE2);
            psE3 = formatoImporte.format(miSimulacion.pEnergiaSubtotalP6[2]); jTextField151.setText(psE3);
            psE4 = formatoImporte.format(miSimulacion.pEnergiaSubtotalP6[3]); jTextField152.setText(psE4);
            psE5 = formatoImporte.format(miSimulacion.pEnergiaSubtotalP6[4]); jTextField153.setText(psE5);
            psE6 = formatoImporte.format(miSimulacion.pEnergiaSubtotalP6[5]); jTextField154.setText(psE6);
            
            esE1 = formatoNumero.format(miSimulacion.eEnergiaSubtotalP6[0]); jTextField172.setText(esE1);
            esE2 = formatoNumero.format(miSimulacion.eEnergiaSubtotalP6[1]); jTextField173.setText(esE2);
            esE3 = formatoNumero.format(miSimulacion.eEnergiaSubtotalP6[2]); jTextField174.setText(esE3);
            esE4 = formatoNumero.format(miSimulacion.eEnergiaSubtotalP6[3]); jTextField175.setText(esE4);
            esE5 = formatoNumero.format(miSimulacion.eEnergiaSubtotalP6[4]); jTextField176.setText(esE5);
            esE6 = formatoNumero.format(miSimulacion.eEnergiaSubtotalP6[5]); jTextField177.setText(esE6);
            
            esP1 = String.valueOf(redondear(miSimulacion.pEnergiaMedioPeriodoP6[0],6)); jTextField267.setText(esP1);
            esP2 = String.valueOf(redondear(miSimulacion.pEnergiaMedioPeriodoP6[1],6)); jTextField268.setText(esP2);
            esP3 = String.valueOf(redondear(miSimulacion.pEnergiaMedioPeriodoP6[2],6)); jTextField269.setText(esP3);
            esP4 = String.valueOf(redondear(miSimulacion.pEnergiaMedioPeriodoP6[3],6)); jTextField270.setText(esP4);
            esP5 = String.valueOf(redondear(miSimulacion.pEnergiaMedioPeriodoP6[4],6)); jTextField271.setText(esP5);
            esP6 = String.valueOf(redondear(miSimulacion.pEnergiaMedioPeriodoP6[5],6)); jTextField272.setText(esP6);
            
            
            // .......................................................................
            
            PC1 = jTextField133.getText();    PC1.trim();  miSimulacion.PC1 = PC1 ;              // Potencia contratada en P1 
            PC2 = jTextField167.getText();    PC2.trim();  miSimulacion.PC2 = PC2 ;              // Potencia contratada en P2 
            PC3 = jTextField168.getText();    PC3.trim();  miSimulacion.PC3 = PC3 ;              // Potencia contratada en P3 
            PC4 = jTextField169.getText();    PC4.trim();  miSimulacion.PC4 = PC4 ;              // Potencia contratada en P4 
            PC5 = jTextField170.getText();    PC5.trim();  miSimulacion.PC5 = PC5 ;              // Potencia contratada en P5 
            PC6 = jTextField171.getText();    PC6.trim();  miSimulacion.PC6 = PC6 ;              // Potencia contratada en P6 
            
            // .......................................................................
            if (!jCheckBox12.isSelected() ){
                    pPotencia = miSimulacion.calcularSubtotalPotenciaP6(this.model6, mes, year) ;                  // enviamos potencias de maximetro
            } else {
                   JOptionPane.showMessageDialog(null,
                                                     "\nVas a simular los periodos cuartohorarios en tarifa 3.1.",
                                                     "ATENCION!!!",JOptionPane.WARNING_MESSAGE);    
               
                    pPotencia = miSimulacion.calcularSubtotalPotenciaP31(this.model6, mes, year,1) ;            // enviamos potencias de maximetro para simular
            }
            
            psPotencia = formatoImporte.format(pPotencia); jTextField132.setText(psPotencia);
              
            socsP1= formatoImporte.format(miSimulacion.ocsP1);  jTextField155.setText(socsP1);
            socsP2= formatoImporte.format(miSimulacion.ocsP2);  jTextField156.setText(socsP2);
            socsP3= formatoImporte.format(miSimulacion.ocsP3);  jTextField157.setText(socsP3);
            socsP4= formatoImporte.format(miSimulacion.ocsP4);  jTextField158.setText(socsP4);
            socsP5= formatoImporte.format(miSimulacion.ocsP5);  jTextField159.setText(socsP5);
            socsP6= formatoImporte.format(miSimulacion.ocsP6);  jTextField160.setText(socsP6);
            
             // .......................................................................
            
            pP1 = jTextField179.getText();    pP1.trim();  miSimulacion.pP1 = pP1 ;              // Tarifa de potencia en P1
            pP2 = jTextField180.getText();    pP2.trim();  miSimulacion.pP2 = pP2 ;              // Tarifa de potencia en P2
            pP3 = jTextField181.getText();    pP3.trim();  miSimulacion.pP3 = pP3 ;              // Tarifa de potencia en P3
            pP4 = jTextField182.getText();    pP4.trim();  miSimulacion.pP4 = pP4 ;              // Tarifa de potencia en P4
            pP5 = jTextField183.getText();    pP5.trim();  miSimulacion.pP5 = pP5 ;              // Tarifa de potencia en P5
            pP6 = jTextField184.getText();    pP6.trim();  miSimulacion.pP6 = pP6 ;              // Tarifa de potencia en P6
       
        
            fDesde = jTextField147.getText(); fDesde.trim(); 
            fHasta = jTextField148.getText(); fHasta.trim();
            
            dias = diferenciaFechas(fDesde,fHasta,1) ;      jTextField185.setText(String.valueOf(dias));
            
            pTarifaPot =  miSimulacion.calcularSubtotalTarifaPotenciaP6(dias) ;       
            
            psTarifaPot = formatoImporte.format(pTarifaPot); jTextField129.setText(psTarifaPot);
            
            tpP1= formatoImporte.format(miSimulacion.tpP1);  jTextField134.setText(tpP1);
            tpP2= formatoImporte.format(miSimulacion.tpP2);  jTextField135.setText(tpP2);
            tpP3= formatoImporte.format(miSimulacion.tpP3);  jTextField136.setText(tpP3);
            tpP4= formatoImporte.format(miSimulacion.tpP4);  jTextField137.setText(tpP4);
            tpP5= formatoImporte.format(miSimulacion.tpP5);  jTextField138.setText(tpP5);
            tpP6= formatoImporte.format(miSimulacion.tpP6);  jTextField139.setText(tpP6); 
            
            total = (((1.05113 * 4.864) / 100)+1) * (pTarifaPot + pPotencia + pEnergia) ;
            
            psTotal   = formatoImporte.format(total); jTextField131.setText(psTotal);
            
        }
         // ---------------------------------------------------------------------------------------------------------------------------
        public void recalcularSimulacionFacturaP3() {
            
            int dias=0 ;
            double pEnergia,pPotencia, pTarifaPot,total ;
            String psEnergia,psE1,psE2,psE3;
            String esEnergia,esE1,esE2,esE3;
            String ocsEnergia,ocsE1,ocsE2,ocsE3;
            String psPotencia,psP1,psP2,psP3;
            String PC1,PC2,PC3 ;
            String socsP1,socsP2,socsP3;
            String sPF1a,sPF2a,sPF3a;
            
            String pP1,pP2,pP3 ;
            
            String fDesde="",fHasta="" ;
            String psTarifaPot,psTotal;
            
            String tpP1,tpP2,tpP3 ;
            
            String esP1,esP2,esP3 ;
            
            int mes, year ;
            
            mes = Integer.valueOf(this.indiceSimulacionesPuntos[this.indSim][4]);
            year= Integer.valueOf(this.indiceSimulacionesPuntos[this.indSim][5]);
            
            // .......................................................................
     
            NumberFormat formatoImporte = NumberFormat.getCurrencyInstance();

            formatoImporte = NumberFormat.getCurrencyInstance(new Locale("es","ES"));

            NumberFormat formatoPorcentaje = NumberFormat.getPercentInstance();

            NumberFormat formatoNumero = NumberFormat.getNumberInstance();

            formatoNumero.setMaximumFractionDigits(2);
           
            
            // .......................................................................
            
            miSimulacionFacturas miSimulacion = new miSimulacionFacturas();
            
            // .......................................................................
                    
            ocsE1 = jTextField205.getText();    ocsE1.trim();  miSimulacion.ocsE1 = ocsE1 ;              // Otros costes energía P1  
            ocsE2 = jTextField206.getText();    ocsE2.trim();  miSimulacion.ocsE2 = ocsE2 ;              // Otros costes energía P2 
            ocsE3 = jTextField207.getText();    ocsE3.trim();  miSimulacion.ocsE3 = ocsE3 ;              // Otros costes energía P3  
                       
            // .......................................................................
            
            pEnergia = miSimulacion.calcularSubtotalEnergiaP30(this.model4, this.model5, mes, year) ;       // enviamos precios y consumos
            
            psEnergia = formatoImporte.format(pEnergia); jTextField163.setText(psEnergia);
            esEnergia = formatoNumero.format(miSimulacion.eEnergiaTotal); jTextField191.setText(esEnergia);
            
            psE1 = formatoImporte.format(miSimulacion.pEnergiaSubtotalP3[0]); jTextField188.setText(psE1);
            psE2 = formatoImporte.format(miSimulacion.pEnergiaSubtotalP3[1]); jTextField189.setText(psE2);
            psE3 = formatoImporte.format(miSimulacion.pEnergiaSubtotalP3[2]); jTextField190.setText(psE3);
                        
            esE1 = formatoNumero.format(miSimulacion.eEnergiaSubtotalP3[0]); jTextField193.setText(esE1);
            esE2 = formatoNumero.format(miSimulacion.eEnergiaSubtotalP3[1]); jTextField194.setText(esE2);
            esE3 = formatoNumero.format(miSimulacion.eEnergiaSubtotalP3[2]); jTextField195.setText(esE3);
            
            esP1 = String.valueOf(redondear(miSimulacion.pEnergiaMedioPeriodoP30[0],6)); jTextField273.setText(esP1);
            esP2 = String.valueOf(redondear(miSimulacion.pEnergiaMedioPeriodoP30[1],6)); jTextField274.setText(esP2);
            esP3 = String.valueOf(redondear(miSimulacion.pEnergiaMedioPeriodoP30[2],6)); jTextField275.setText(esP3);
           
            // .......................................................................
            
            PC1 = jTextField199.getText();    PC1.trim();  miSimulacion.PC1 = PC1 ;              // Potencia contratada en P1 
            PC2 = jTextField200.getText();    PC2.trim();  miSimulacion.PC2 = PC2 ;              // Potencia contratada en P2 
            PC3 = jTextField201.getText();    PC3.trim();  miSimulacion.PC3 = PC3 ;              // Potencia contratada en P3 
            
            // .......................................................................
           
            if ( !jCheckBox8.isSelected() ) {
            
                pPotencia = miSimulacion.calcularSubtotalPotenciaP30(this.model6, mes, year,1,0) ;            // enviamos potencias de maximetro

                pP1 = formatoNumero.format(Double.valueOf(miSimulacion.pmaxP1)); jTextField198.setText(pP1);
                pP2 = formatoNumero.format(Double.valueOf(miSimulacion.pmaxP2)); jTextField197.setText(pP2);
                pP3 = formatoNumero.format(Double.valueOf(miSimulacion.pmaxP3)); jTextField196.setText(pP3);

                sPF1a = formatoNumero.format(miSimulacion.dPF1a); jTextField208.setText(sPF1a);
                sPF2a = formatoNumero.format(miSimulacion.dPF2a); jTextField209.setText(sPF2a);
                sPF3a = formatoNumero.format(miSimulacion.dPF3a); jTextField210.setText(sPF3a);
            
            } else {
                
                miSimulacion.pmaxP1 =  jTextField198.getText();
                miSimulacion.pmaxP2 =  jTextField197.getText();
                miSimulacion.pmaxP3 =  jTextField196.getText();
                pPotencia = miSimulacion.calcularSubtotalPotenciaP30(this.model6, mes, year,1,1) ;            // enviamos potencias de maximetro
                
                sPF1a = formatoNumero.format(miSimulacion.dPF1a); jTextField208.setText(sPF1a);
                sPF2a = formatoNumero.format(miSimulacion.dPF2a); jTextField209.setText(sPF2a);
                sPF3a = formatoNumero.format(miSimulacion.dPF3a); jTextField210.setText(sPF3a);
                
                
            }
             // .......................................................................
            
            pP1 = jTextField204.getText();    pP1.trim();  miSimulacion.pP1 = pP1 ;              // Tarifa de potencia en P1
            pP2 = jTextField203.getText();    pP2.trim();  miSimulacion.pP2 = pP2 ;              // Tarifa de potencia en P2
            pP3 = jTextField202.getText();    pP3.trim();  miSimulacion.pP3 = pP3 ;              // Tarifa de potencia en P3
          
            fDesde = jTextField161.getText(); fDesde.trim(); 
            fHasta = jTextField162.getText(); fHasta.trim();
            
            dias = diferenciaFechas(fDesde,fHasta,1) ;      jTextField186.setText(String.valueOf(dias));
            
            pTarifaPot =  miSimulacion.calcularSubtotalTarifaPotenciaP30(dias) ;       
            
            psTarifaPot = formatoImporte.format(pTarifaPot); jTextField140.setText(psTarifaPot);
            
            tpP1= formatoImporte.format(miSimulacion.tpP1);  jTextField187.setText(tpP1);
            tpP2= formatoImporte.format(miSimulacion.tpP2);  jTextField166.setText(tpP2);
            tpP3= formatoImporte.format(miSimulacion.tpP3);  jTextField165.setText(tpP3);
           
            total = (((1.05113 * 4.864) / 100)+1) * (pTarifaPot +  pEnergia) ;
            
            psTotal   = formatoImporte.format(total); jTextField164.setText(psTotal);
        }    
        // ---------------------------------------------------------------------------------------------------------------------------
        public void recalcularSimulacionFacturaP31() {
            
            int dias=0 ;
            double pEnergia,pPotencia, pTarifaPot,total ;
            String psEnergia,psE1,psE2,psE3;
            String esEnergia,esE1,esE2,esE3;
            String ocsEnergia,ocsE1,ocsE2,ocsE3;
            String psPotencia,psP1,psP2,psP3;
            String PC1,PC2,PC3 ;
            String socsP1,socsP2,socsP3;
            String sPF1a,sPF2a,sPF3a;
            
            String pP1,pP2,pP3 ;
            
            String fDesde="",fHasta="" ;
            String psTarifaPot,psTotal;
            
            String tpP1,tpP2,tpP3 ;
            
            String esP1,esP2,esP3 ;
            int mes, year ;
            
            mes = Integer.valueOf(this.indiceSimulacionesPuntos[this.indSim][4]);
            year= Integer.valueOf(this.indiceSimulacionesPuntos[this.indSim][5]);
            // .......................................................................
     
            NumberFormat formatoImporte = NumberFormat.getCurrencyInstance();

            formatoImporte = NumberFormat.getCurrencyInstance(new Locale("es","ES"));

            NumberFormat formatoPorcentaje = NumberFormat.getPercentInstance();

            NumberFormat formatoNumero = NumberFormat.getNumberInstance();

            formatoNumero.setMaximumFractionDigits(2);
           
            
            // .......................................................................
            
            miSimulacionFacturas miSimulacion = new miSimulacionFacturas();
            
            // .......................................................................
                    
            ocsE1 = jTextField240.getText();    ocsE1.trim();  miSimulacion.ocsE1 = ocsE1 ;              // Otros costes energía P1  
            ocsE2 = jTextField241.getText();    ocsE2.trim();  miSimulacion.ocsE2 = ocsE2 ;              // Otros costes energía P2 
            ocsE3 = jTextField242.getText();    ocsE3.trim();  miSimulacion.ocsE3 = ocsE3 ;              // Otros costes energía P3  
                       
            // .......................................................................
            
            pEnergia = miSimulacion.calcularSubtotalEnergiaP31(this.model4, this.model5, mes, year) ;       // enviamos precios y consumos
            
            psEnergia = formatoImporte.format(pEnergia); jTextField215.setText(psEnergia);
            esEnergia = formatoNumero.format(miSimulacion.eEnergiaTotal); jTextField223.setText(esEnergia);
            
            psE1 = formatoImporte.format(miSimulacion.pEnergiaSubtotalP3[0]); jTextField220.setText(psE1);
            psE2 = formatoImporte.format(miSimulacion.pEnergiaSubtotalP3[1]); jTextField221.setText(psE2);
            psE3 = formatoImporte.format(miSimulacion.pEnergiaSubtotalP3[2]); jTextField222.setText(psE3);
                        
            esE1 = formatoNumero.format(miSimulacion.eEnergiaSubtotalP3[0]); jTextField225.setText(esE1);
            esE2 = formatoNumero.format(miSimulacion.eEnergiaSubtotalP3[1]); jTextField226.setText(esE2);
            esE3 = formatoNumero.format(miSimulacion.eEnergiaSubtotalP3[2]); jTextField227.setText(esE3);
           
            esP1 = String.valueOf(redondear(miSimulacion.pEnergiaMedioPeriodoP31[0],6)); jTextField276.setText(esP1);
            esP2 = String.valueOf(redondear(miSimulacion.pEnergiaMedioPeriodoP31[1],6)); jTextField277.setText(esP2);
            esP3 = String.valueOf(redondear(miSimulacion.pEnergiaMedioPeriodoP31[2],6)); jTextField278.setText(esP3);
            
            // .......................................................................
            
            PC1 = jTextField234.getText();    PC1.trim();  miSimulacion.PC1 = PC1 ;              // Potencia contratada en P1 
            PC2 = jTextField235.getText();    PC2.trim();  miSimulacion.PC2 = PC2 ;              // Potencia contratada en P2 
            PC3 = jTextField236.getText();    PC3.trim();  miSimulacion.PC3 = PC3 ;              // Potencia contratada en P3 
            
            // .......................................................................
            
            if (!jCheckBox10.isSelected() ){
                         pPotencia = miSimulacion.calcularSubtotalPotenciaP31(this.model6, mes, year,1) ;            // enviamos potencias de maximetro
            } else  {
                         pPotencia = miSimulacion.calcularSubtotalPotenciaP6(this.model6, mes, year) ;            // enviamos potencias de maximetro
            }
            pP1 = formatoNumero.format(Double.valueOf(miSimulacion.pmaxP1)); jTextField230.setText(pP1);
            pP2 = formatoNumero.format(Double.valueOf(miSimulacion.pmaxP2)); jTextField229.setText(pP2);
            pP3 = formatoNumero.format(Double.valueOf(miSimulacion.pmaxP3)); jTextField228.setText(pP3);
            
            sPF1a = formatoNumero.format(miSimulacion.dPF1a); jTextField231.setText(sPF1a);
            sPF2a = formatoNumero.format(miSimulacion.dPF2a); jTextField232.setText(sPF2a);
            sPF3a = formatoNumero.format(miSimulacion.dPF3a); jTextField233.setText(sPF3a);
            
            
             // .......................................................................
            
            pP1 = jTextField239.getText();    pP1.trim();  miSimulacion.pP1 = pP1 ;              // Tarifa de potencia en P1
            pP2 = jTextField238.getText();    pP2.trim();  miSimulacion.pP2 = pP2 ;              // Tarifa de potencia en P2
            pP3 = jTextField237.getText();    pP3.trim();  miSimulacion.pP3 = pP3 ;              // Tarifa de potencia en P3
          
            fDesde = jTextField211.getText(); fDesde.trim(); 
            fHasta = jTextField212.getText(); fHasta.trim();
            
            dias = diferenciaFechas(fDesde,fHasta,1) ;      jTextField213.setText(String.valueOf(dias));
            
            pTarifaPot =  miSimulacion.calcularSubtotalTarifaPotenciaP31(dias) ;       
            
            psTarifaPot = formatoImporte.format(pTarifaPot); jTextField214.setText(psTarifaPot);
            
            tpP1= formatoImporte.format(miSimulacion.tpP1);  jTextField219.setText(tpP1);
            tpP2= formatoImporte.format(miSimulacion.tpP2);  jTextField218.setText(tpP2);
            tpP3= formatoImporte.format(miSimulacion.tpP3);  jTextField217.setText(tpP3);
           
            total = (((1.05113 * 4.864) / 100)+1) * (pTarifaPot +  pEnergia) ;
            
            psTotal   = formatoImporte.format(total); jTextField216.setText(psTotal);
        }    
        //Método que llamaremos desde nuestro botón
        private void iniciaBarra(){
        //Creamos un Thread para mejorar el ejemplo
        final Thread t;
        //Inicializamos
        t = new Thread(new Runnable() {
            //Implementamos el método run()
            @Override
            public void run() {
                //Permite mostrar el valor del progreso
                jProgressBar1.setStringPainted(true);
                int x = 1;
                //Utilizamos un while para emular el valor mínimo y máximo
                //En este caso 0 - 100
                while(x <= 100){
                    //Asignamos valor a nuestro JProgressBar por cada siclo del bucle
                    jProgressBar1.setValue(x);
                    //Valor que se mostrará en el JTextArea
                    logAcciones.append("Progreso " + x + "%...\n");
                    //Hacemos una parada de medio segundo por cada siclo while
                    try {
                        Thread.sleep(500);
                    } catch (InterruptedException e) {
                    }
                    //Se incrementa el valor de x
                    x++;
                }
            }
        });
        //Se ejecuta el Thread
        t.start();
        }
        // ----------------------------------------------------------------------------------------------------------------------------------
          public class t implements Runnable {
                    
                 public t(String nombres[],String tablaDatos[][],String plogin,String ppassword,String bdStr,String urlStr) {
                     
                 }
                    
                    
                    
                 //Implementamos el método run()
                @Override
                 public void run() {
                 
                  String sqlStr  ;
                  String str ;
                  int i,j,k,cnt=0, nDatos, nColumnas ;
                  int estadoInsert = 0 ;
                   Conexion conex = new Conexion(); 
                   
                  // .....................................................................................................................
                  if (conex!=null){
          
                    TablasDao miTablaDao = new TablasDao();
                    //Permite mostrar el valor del progreso
                    jProgressBar1.setStringPainted(true);
                    int x = 0;
                    jProgressBar1.setMaximum(100);
                    nDatos    = Integer.valueOf(jTextField127.getText()) ;
                    nColumnas = Integer.valueOf(jTextField128.getText()) ;

                          // .......................................................................
                          for (k=0; k<nDatos-2; k++) {

                                sqlStr = "INSERT INTO ";

                                str = tabla.getText(); str = str.trim() ;

                                sqlStr = sqlStr + str +" (" ;


                                for (i=0; i<nColumnas-1; i++) {

                                    sqlStr = sqlStr+nombres[i].trim()+",";

                                }
                                sqlStr = sqlStr+nombres[i].trim()+") ";

                                sqlStr = sqlStr+" VALUES (";

                                for ( i=0; i<nColumnas-1; i++) {

                                    str = tablaDatos[k][i] ; str = str.trim() ;
                                    sqlStr = sqlStr  + "'"+ str + "', " ;

                                }

                                str = tablaDatos[k][i] ; str = str.trim() ;
                                sqlStr = sqlStr + "'"+ str + "') " ;

                                System.out.println(k+"sqlStr = "+sqlStr);

                                estadoInsert = miTablaDao.registrarFila(conex,plogin,ppassword,bdStr,urlStr,sqlStr);

                                logAcciones.append(k+" --> sqlStr = "+sqlStr+"\n");

                                x = (k * 100) / nDatos ;  jProgressBar1.setValue(x);

                          }
                          // .....................................................................................................................   
                            conex.desconectar(); 
                            jProgressBar1.setValue(0);
                            jProgressBar1.setMaximum(0);
                            jProgressBar1.setString("");  
                            
                                JOptionPane.showMessageDialog(null,
                               "¡La entrada de datos se ha concluido con exito!",
                               "Informacion",JOptionPane.WARNING_MESSAGE);
                                
                          // .....................................................................................................................   
                    
                       } else  {
                              JOptionPane.showMessageDialog(null,
                              "Debes introducir login y password",
                              "Advertencia",JOptionPane.WARNING_MESSAGE);

                      }
                      
                    }
                  }
         public void activarGraficas() {
             
              // .....................................................
        Graficas  migrafico = new Graficas (); //aqui debe de ir esta linea de programacion
       

        //tamaño del grafico

        Dimension d = jPanelGrafica01.getSize();        //toma el tamaño del contenedor

        //se crean los datos

        int[] valores = {1000,2011,3030,1569,2688,4587};
        String[] arg1 = {"Enero","Febrero","Marzo","Enero","Febrero","Marzo"};
        String[] arg2 = {"Visitas","Visitas","Visitas","Hits","Hits","Hits"};
        //titulo, lateral 1, lateral 2
        String[] data = {"CONSUMOS","Primer Trimestre","kwH"};
        //se crea el grafico

        migrafico.crear_grafico_de_barras(d, valores, arg2, arg1, data);

        //se crea un jlabel para colocar el grafico
        JLabel j = new JLabel();
        j.setBounds(0, 0, d.width, d.height);
        //se carga el grafico de memoria
        migrafico.cargar_grafico(j);
        //se añade al contenedor

        jPanelGrafica01.add(j);
        this.repaint();

        // .....................................................
        
        Dimension d2 = jPanelGrafica02.getSize();
        DefaultPieDataset dataset = new DefaultPieDataset();
        

        // Establecemos unas categorías de ejemplo

        dataset.setValue("Ejemplo1", 43.2);
        dataset.setValue("Ejemplo2", 27.9);
        dataset.setValue("Ejemplo1", 79.5);
        dataset.setValue("Ejemplo2", 79.5);

        // Creamos la tabla

        grafico = ChartFactory.createPieChart("Distribución de consumos Kwh",dataset,true,true,false);

        JLabel j2 = new JLabel();
        j2.setBounds(0, 0, d2.width, d2.height);
        _image = grafico.createBufferedImage(d2.width, d2.height);
        ImageIcon imagenFondo = new ImageIcon(_image);
        j2.setIcon(imagenFondo);
        j2.repaint();
        jPanelGrafica02.add(j2);
        this.repaint();
        
         // .....................................................
        
        Dimension d3 = jPanelGrafica03.getSize();
        
        //se declara el grafico XY Lineal
        XYDataset xydataset = xyDataset();
        JFreeChart jfreechart = ChartFactory.createXYLineChart(
        "Consumos semanales" , "1ra semana del mes de Junio", "Consumos en KWh",  
        xydataset, PlotOrientation.VERTICAL,  true, true, false);               

        //personalización del grafico
        XYPlot xyplot = (XYPlot) jfreechart.getPlot();
        xyplot.setBackgroundPaint( Color.white );
        xyplot.setDomainGridlinePaint( Color.BLACK );
        xyplot.setRangeGridlinePaint( Color.BLACK );        
        // -> Pinta Shapes en los puntos dados por el XYDataset
        XYLineAndShapeRenderer xylineandshaperenderer = (XYLineAndShapeRenderer) xyplot.getRenderer();
        xylineandshaperenderer.setBaseShapesVisible(true);
        //--> muestra los valores de cada punto XY
        XYItemLabelGenerator xy = new StandardXYItemLabelGenerator();
        xylineandshaperenderer.setBaseItemLabelGenerator( xy );
        xylineandshaperenderer.setBaseItemLabelsVisible(true);
        xylineandshaperenderer.setBaseLinesVisible(true);
        xylineandshaperenderer.setBaseItemLabelsVisible(true);                
        //fin de personalización

        //se crea la imagen y se asigna a la clase ImageIcon
        JLabel j3 = new JLabel();
        j3.setBounds(0, 0, d3.width, d3.height);
        BufferedImage bufferedImage  = jfreechart.createBufferedImage( d3.width, d3.height);
        ImageIcon imagenFondo2 = new ImageIcon(bufferedImage);
        j3.setIcon(imagenFondo2);
        j3.repaint();
        jPanelGrafica03.add(j3);
        this.repaint();
        
             
         }
         private XYDataset xyDataset()
    {
        //se declaran las series y se llenan los datos
        XYSeries sIngresos = new XYSeries("Ingresos");
        XYSeries sEgresos = new XYSeries("Egresos");        
        //serie #1
        sIngresos.add( 1, 340);
        sIngresos.add( 2, 210);
        sIngresos.add( 3, 410);
        sIngresos.add( 4, 200);
        sIngresos.add( 5, 525);
        sIngresos.add( 6, 492);
        sIngresos.add( 7, 390);
        //serie #2
        sEgresos.add( 1, 90);
        sEgresos.add( 2, 434);
        sEgresos.add( 3, 741);
        sEgresos.add( 4, 91);
        sEgresos.add( 5, 412);
        sEgresos.add( 6, 361);
        sEgresos.add( 7, 271);

        XYSeriesCollection xyseriescollection =  new XYSeriesCollection();
        xyseriescollection.addSeries( sIngresos );        
        xyseriescollection.addSeries( sEgresos );        

        return xyseriescollection;
    }
 }
